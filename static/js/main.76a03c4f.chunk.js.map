{"version":3,"sources":["HexDump/SimpleHexDump.js","Utils.js","pages/SmppDecoderPage.js","../../js-smpp/index.js","pages/test/TestHexDumpPage.js","components/Menu.js","pages/HomePage.js","pages/HexDumpPage.js","pages/EncodingsPage.js","_nav.js","App.js","routes.js","index.js","../../js-smpp/src/Encoding.js","../../js-smpp/src/UCS2Encoding.js","../../js-smpp/src/GsmEncoding.js","../../js-smpp/src/constants.js","../../js-smpp/src/DissectingContext.js","../../js-smpp/src/Notifications.js","../../js-smpp/src/DissectingResult.js","../../js-smpp/src/SmppDecoder.js"],"names":["SimpleHexDump","props","state","showOffset","showHex","showCharacters","currentGroup","onFilterClick","bind","filterName","this","setState","Object","assign","hexDumpLength","hexdump","byteLength","minimumLength10","Math","ceil","log10","minimumLength16","log2","offsets","offset","push","toString","padStart","key","className","dump","endGroup","startGroup","readUInt8","dangerouslySetInnerHTML","__html","join","charCode","char","Utils","Text","isPrint","String","fromCodePoint","array","groups","length","i","curGroup","nextGroup","name","panels","renderOffsetPanel","renderHexPanel","renderCharactersPanel","map","el","index","style","padding","type","checked","onChange","Component","defaultProps","val","HexSymbols","intToHex","byteToHex","halfByteToHex","charAt","stringToHex","s","result","charCodeAt","hexToIntArray","hexString","upperHexString","toUpperCase","currentValue","indexOf","intArrayToString","intArray","fromCharCode","Hex","cleanup","replace","Encoding","GSM0338","basicSet","extendedSet","mapping","escCharacter","isRepresentable","str","isCharRepresentable","character","Buffer","create","data","position","cap","readByte","b","readShort","res","readInt","Bytes","readLong","Smpp","DataTypes","Integer","read","buf","CString","SmppDecoderPage","decodeState","window","location","hash","substr","from","doDecode","value","buffer","meta","settings","dissectingFieldsColors","change","changeSettings","oldState","decodedData","notifications","self","keys","decodedField","specRef","renderFieldValue","interpreted","getAll","tag","body","width","rows","placeholder","defaultValue","href","e","target","title","decoder","SmppDecoder","trim","decode","module","exports","TestHexDumpPage","console","log","colSpan","fontSize","paddingRight","paddingLeft","HomePage","HexDumpPage","EncodingsPage","encodingName","Row","to","params","encodingParameterizedPage","match","items","url","icon","exact","App","oldText","text","basename","process","fixed","display","navConfig","role","Container","fluid","Card","CardBody","Switch","Route","path","component","ROUTES","ReactDOM","render","document","getElementById","Error","_Encoding","UCS2Encoding","apply","arguments","code0","code1","GsmEncoding","_this","call","ESCAPE_CHARACTER","basicCharset","code","code2","SMPP_HEADER","packetLength","pattern","fieldLength","commandId","interpret","v","cmdId","SMPP_COMMANDS_DESCRIPTIONS","status","sequenceNumber","systemId","password","systemType","interfaceVersion","addrTon","addrNpi","addressRange","tlvs","messageId","sourceAddrTon","sourceAddrNpi","sourceAddr","finalDate","messageState","errorCode","serviceType","destAddrTon","destAddrNpi","destinationAddr","esmClass","protocolId","priorityFlag","scheduleDeliveryTime","validityPeriod","registeredDelivery","replaceIfPresentFlag","dataCoding","smDefaultMsgId","smLength","shortMessage","ctx","boundVars","ESM_CLASS_UDHI_MASK","udhLength","slice","encodings","encName","encoding","convert","SMPP_TLV_TAGS","DissectingContext","initialBuffer","processingBuffer","processedVariables","previoudBuffer","initialBufferLength","fieldDescription","newBuffer","currentOffset","newLength","Notifications","messages","filter","item","DissectingResult","logLevel","_len","msg","Array","_key","level","ignoreHeader","undefined","defaultCommandId","trace","fieldName","decodeField","bodyFieldDescription","_fieldName","parse","tlvMatch","addNotification","obj","pushBuffer","rest","getTlvName","t","interpretValue","_fieldDescription","checkLength","concat","matchedObject","getPattern","raw","field","header","descr","compilePattern","ptr"],"mappings":"iKAMMA,G,wBACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAGDC,MAAQ,CACLC,WAAY,EAAKF,MAAME,WACvBC,QAAS,EAAKH,MAAMG,QACpBC,eAAgB,EAAKJ,MAAMI,gBAGnC,EAAKC,aAAa,EAElB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,6BAZN,E,2EAcLC,GACV,IAAIP,EAAQQ,KAAKR,MAEjBA,EAAMO,IAAeP,EAAMO,GAE3BC,KAAKC,SAASC,OAAOC,OAAO,GAAIX,M,0CAUhC,IAPA,IAAIY,EAAgBJ,KAAKT,MAAMc,QAAQC,WAEnCC,EAAkBC,KAAKC,KAAKD,KAAKE,MAAMN,IACvCO,EAAkBH,KAAKC,KAAKD,KAAKI,KAAKR,GAAiBI,KAAKI,KAAK,KAEjEC,EAAU,GACVC,EAAS,EACNA,EAASV,GACZS,EACKE,KACG,KACED,EAAOE,SAAS,IAAIC,SAASN,EAAgB,KAC7C,IACAG,EAAOE,SAAS,IAAIC,SAASV,EAAgB,OAGvDO,GAAQ,IAEKV,GACTS,EAAQE,KAAK,wBAAIG,IAAK,iBAAiBJ,KAI/C,OAAO,yBAAKK,UAAU,gCAA+B,8BAAON,M,uCAG5D,IAAIO,EAAO,GAEPhB,EAAgBJ,KAAKT,MAAMc,QAAQC,WAEvCN,KAAKJ,aAAe,EAEpB,IAAK,IAAIkB,EAAS,EAAEA,EAASV,EAAcU,IACvCd,KAAKqB,SAASP,EAAQM,GACtBpB,KAAKsB,WAAWR,EAAQM,GAExBA,EAAKL,KAAKf,KAAKT,MAAMc,QAAQkB,UAAUT,GAAQE,SAAS,IAAIC,SAAS,EAAE,MAGlEH,EAAS,IAAM,GACZA,EAAS,KAAO,IAEpBM,EAAKL,KAAK,MAGVD,EAAS,GAAK,IACdM,EAAKL,KAAK,KAGVD,EAAO,GAAKA,EAAS,KAAO,IAC5BM,EAAKL,KAAK,UAMlB,OAFAf,KAAKqB,SAASjB,EAAegB,GAEtB,yBAAKD,UAAU,8BAA6B,0BAAMK,wBAAyB,CAACC,OAAOL,EAAKM,KAAK,U,8CAGpG1B,KAAKJ,aAAe,EAMpB,IAJA,IAAIwB,EAAO,GAEPhB,EAAgBJ,KAAKT,MAAMc,QAAQC,WAE9BQ,EAAS,EAAEA,EAASV,EAAcU,IAAU,CACjDd,KAAKqB,SAASP,EAAQM,GACtBpB,KAAKsB,WAAWR,EAAQM,GAExB,IAAIO,EAAW3B,KAAKT,MAAMc,QAAQkB,UAAUT,GAExCc,EAAOC,IAAMC,KAAKC,QAAQJ,GAAYK,OAAOC,cAAcN,GAAY,IAE3EP,EAAKL,KAAKa,GAGLd,EAAS,IAAM,GACZA,EAAS,KAAO,IAEpBM,EAAKL,KAAK,MAGVD,EAAS,GAAK,IACdM,EAAKL,KAAK,KAGVD,EAAO,GAAKA,EAAS,KAAO,IAC5BM,EAAKL,KAAK,WAMlB,OAFAf,KAAKqB,SAASjB,EAAegB,GAEtB,yBAAKD,UAAU,oCAAmC,0BAAMK,wBAAyB,CAACC,OAAQL,EAAKM,KAAK,U,iCAEpGZ,EAAQoB,GACf,GAAiC,qBAAtBlC,KAAKT,MAAM4C,QAAuD,IAA7BnC,KAAKT,MAAM4C,OAAOC,OAGlE,IAAK,IAAIC,KAAKrC,KAAKT,MAAM4C,OAAQ,CAC7B,IAAIG,EAAWtC,KAAKT,MAAM4C,OAAOE,GAEjC,GAAIC,EAASxB,SAAWA,EAAQ,CAC5BoB,EAAMnB,KAAK,2BAA4Bf,KAAKuC,YAAY,YAAcD,EAASE,KAAK,MAEpF,U,+BAIH1B,EAAQoB,GACb,GAAiC,qBAAtBlC,KAAKT,MAAM4C,QAAuD,IAA7BnC,KAAKT,MAAM4C,OAAOC,OAGlE,IAAK,IAAIC,KAAKrC,KAAKT,MAAM4C,OAAQ,CAC7B,IAAIG,EAAWtC,KAAKT,MAAM4C,OAAOE,GAEjC,GAAIC,EAASxB,OAASwB,EAASF,SAAWtB,EAAQ,CAC9CoB,EAAMnB,KAAK,WACX,U,kCAWR,OANIf,KAAKJ,cAAgB,GACrBI,KAAKJ,aAAe,EAEpBI,KAAKJ,eAGFI,KAAKJ,e,+BAEN,IAAD,OAGL,GAFAI,KAAKJ,aAAa,EAGgB,qBAAvBI,KAAKT,MAAMc,SACO,MAAtBL,KAAKT,MAAMc,QAEd,MAAO,GAGX,IAAIoC,EAAS,GAcb,OAZIzC,KAAKR,MAAMC,YACXgD,EAAO1B,KAAKf,KAAK0C,qBAGjB1C,KAAKR,MAAME,SACX+C,EAAO1B,KAAKf,KAAK2C,kBAGjB3C,KAAKR,MAAMG,gBACX8C,EAAO1B,KAAKf,KAAK4C,yBAIjB,yBAAKzB,UAAU,uBACX,2BAAOA,UAAU,mBACb,+BACI,4BACKsB,EAAOI,KAAI,SAACC,EAAIC,GAAL,OAAe,wBAAI7B,IAAK,KAAK6B,EAAOC,MAAO,CAACC,QAAQ,aAAcH,SAI1F,6BACI,2BAAO3B,UAAU,8BACb,2BACI+B,KAAK,WACL/B,UAAU,eACVgC,QAASnD,KAAKR,MAAMC,WACpB2D,SAAU,kBAAI,EAAKvD,cAAc,iBALzC,UASA,2BAAOsB,UAAU,8BACb,2BACI+B,KAAK,WACL/B,UAAU,eACVgC,QAASnD,KAAKR,MAAME,QACpB0D,SAAU,kBAAI,EAAKvD,cAAc,cALzC,OASA,2BAAOsB,UAAU,8BACb,2BACI+B,KAAK,WACL/B,UAAU,eACVgC,QAASnD,KAAKR,MAAMG,eACpByD,SAAU,kBAAI,EAAKvD,cAAc,qBALzC,oB,GA9MQwD,cAiO5B/D,EAAcgE,aAAe,CACzB7D,YAAY,EACZC,SAAS,EACTC,gBAAgB,GAGLL,O,gCC7Of,IAAIuC,EAAQ,CACZA,KAAa,IACbA,EAAMC,KAAKC,QAAQ,SAASwB,GAC3B,OAAIA,EAAM,IAAQA,EAAM,KAOzB1B,EAAMC,KAAK0B,WAAa,mBACxB3B,EAAMC,KAAK2B,SAAW,SAASF,GAC9B,OAAIA,EAAM,IAKF,GAHC1B,EAAMC,KAAK2B,SAASF,GAAO,GAC3B1B,EAAMC,KAAK4B,UAAgB,IAANH,GAItB1B,EAAMC,KAAK4B,UAAUH,IAG9B1B,EAAMC,KAAK4B,UAAY,SAASH,GAI/B,MAAO,GAHC1B,EAAMC,KAAK6B,cAAcJ,GAAO,GAChC1B,EAAMC,KAAK6B,cAAoB,GAANJ,IAIlC1B,EAAMC,KAAK6B,cAAgB,SAASJ,GACnC,OAAO1B,EAAMC,KAAK0B,WAAWI,OAAa,GAANL,IAGrC1B,EAAMC,KAAK+B,YAAY,SAASC,GAE/B,IADA,IAAIC,EAAO,GACF1B,EAAE,EAAEA,EAAEyB,EAAE1B,OAAOC,IACvB0B,EAAOhD,KAAKc,EAAMC,KAAK2B,SAASK,EAAEE,WAAW3B,KAG9C,OAAO0B,EAAOrC,KAAK,KAGpBG,EAAMC,KAAKmC,cAAc,SAASC,GAKjC,IAJA,IAAIC,EAAiBD,EAAUE,cAE3BL,EAAO,GACPM,EAAa,EACRhC,EAAE,EAAEA,EAAE8B,EAAe/B,OAAOC,IAChCA,EAAI,IAAM,GACbgC,GAAgBxC,EAAMC,KAAK0B,WAAWc,QAAQH,EAAeP,OAAOvB,IACpE0B,EAAOhD,KAAKsD,IAEZA,EAAexC,EAAMC,KAAK0B,WAAWc,QAAQH,EAAeP,OAAOvB,KAAO,EAI5E,OAAO0B,GAGRlC,EAAMC,KAAKyC,iBAAiB,SAASC,GAGpC,IAFA,IAAIT,EAAO,GAEF1B,EAAE,EAAEA,EAAEmC,EAASpC,OAAOC,IAC9B0B,EAAOhD,KAAKiB,OAAOyC,aAAaD,EAASnC,KAG1C,OAAO0B,EAAOrC,KAAK,KAGpBG,EAAMC,KAAK4C,IAAM,GAEjB7C,EAAMC,KAAK4C,IAAIC,QAAU,SAAST,GACjC,OAAiB,MAAbA,EACI,GAGMA,EAAUU,QAAQ,kBAAkB,KAKnD/C,EAAMC,KAAK+C,SAAW,GAEtBhD,EAAMC,KAAK+C,SAASC,QAAU,GAE9BjD,EAAMC,KAAK+C,SAASC,QAAQC,SAAW,+QACvClD,EAAMC,KAAK+C,SAASC,QAAQE,YAAc,kBAC1CnD,EAAMC,KAAK+C,SAASC,QAAQG,QAAU,CAAC,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IACvFpD,EAAMC,KAAK+C,SAASC,QAAQI,aAAe,GAE3CrD,EAAMC,KAAK+C,SAASC,QAAQK,gBAAkB,SAASC,GACtD,OAAY,OAARA,GAA+B,IAAfA,EAAIhD,QAYzBP,EAAMC,KAAK+C,SAASC,QAAQO,oBAAsB,SAASC,GAG1D,OAFoBzD,EAAMC,KAAK+C,SAASC,QAAQC,SAAST,QAAQgB,IAE5C,GAIKzD,EAAMC,KAAK+C,SAASC,QAAQE,YAAYV,QAAQgB,IAElD,GAOzBzD,EAAM0D,OAAS,GAEf1D,EAAM0D,OAAOC,OAAS,SAAShB,GAgC9B,MA/Ba,CACZiB,KAAMjB,EACNpC,OAAQoC,EAASpC,OACjBsD,SAAS,EACTC,IAAI,WACH,OAAO3F,KAAKoC,OAASpC,KAAK0F,UAE3BE,SAAS,WACR,IAAIC,EAAI7F,KAAKyF,KAAKzF,KAAK0F,UAGvB,OAFA1F,KAAK0F,WAEEG,GAERC,UAAU,WAET,IADC,IAAIC,EAAM,EACF1D,EAAE,EAAEA,EAAE,EAAEA,IAChB0D,GAAOA,GAAO,GAAK/F,KAAK4F,WAGzB,OAAOG,GAERC,QAAQ,WAEP,IADA,IAAID,EAAM,EACD1D,EAAE,EAAEA,EAAE,EAAEA,IAChB0D,GAAOA,GAAO,GAAK/F,KAAK4F,WAGzB,OAAOG,KAOVlE,EAAMoE,MAAQ,GAEdpE,EAAMoE,MAAMC,SAAS,SAAShE,GAE7B,IADA,IAAI6D,EAAM,EACD1D,EAAE,EAAEA,EAAE,EAAEA,IAChB0D,GAAOA,GAAO,GAAK7D,EAAMG,GAG1B,OAAO0D,GAGRlE,EAAMsE,KAAO,GAEbtE,EAAMsE,KAAKC,UAAY,GAEvBvE,EAAMsE,KAAKC,UAAUC,QAAU,CAC9BC,KAAK,SAASC,GACb,OAAOA,EAAIP,YAGbnE,EAAMsE,KAAKC,UAAUI,QAAU,GAC/B3E,EAAMsE,KAAKC,UAAUpE,OAAS,GAC9BH,EAAMsE,KAAKC,UAAUC,QAAU,GAchBxE,O,sIC1LT4E,G,kBACF,WAAYlH,GAAO,IAAD,uBACd,4CAAMA,KAYDK,aAAe,EAEpB,IAAI8G,EAAc,GAElB,GAA6B,OAAzBC,OAAOC,SAASC,KAAgB,CAChC,IAAIA,EAAOF,OAAOC,SAASC,KAAKC,OAAO,GAGnCP,EAAMhB,EAAOwB,KAAKF,EAAM,OAE5BH,EAAc,EAAKM,SAAST,EAAIvF,SAAS,QAvB/B,OA0Bd,EAAKxB,MAAQU,OAAOC,OAAO,GAvBf,CACR8G,MAAM,KACNC,OAAO,KACPnD,OAAO,KACPoD,KAAM,KACNC,SAAS,CACLC,wBAAuB,IAiBOX,GAEtC,EAAKY,OAAS,EAAKA,OAAOxH,KAAZ,6BAEd,EAAKyH,eAAiB,EAAKA,eAAezH,KAApB,6BA9BR,E,4EAgCHoB,EAAK+F,GAChB,IAAIO,EAAWxH,KAAKR,MAEpBgI,EAASJ,SAASlG,GAAO+F,EAEzBjH,KAAKC,SAASC,OAAOC,OAAO,GAAIqH,M,uCAEnBP,GACb,GAAqB,kBAAVA,EAAoB,CAC3B,IAAIlD,EAAS,GAEb,IAAK,IAAI1B,KAAK4E,EACVlD,EAAOhD,KAAK,oCAAE,4BAAKsB,GAAO,4BAAK4E,EAAM5E,MAGzC,OAAO0B,EAEP,OAAO,oCAAGkD,K,+BAGR,IAAD,OACDQ,EAAc,KACdC,EAAgB,KAEpB,GAA0B,OAAtB1H,KAAKR,MAAMuE,OAAiB,CAC5B/D,KAAKJ,aAAe,EAEpB,IAAI+H,EAAO3H,KAEXyH,EACIvH,OACK0H,KAAK5H,KAAKR,MAAMuE,OAAO0B,MACvB5C,KACG,SAAC3B,GACG,IAAI2G,EAAe,EAAKrI,MAAMuE,OAAO0B,KAAKvE,GACtCC,EAAY,GAMhB,OAJIwG,EAAKnI,MAAM4H,SAASC,yBACpBlG,EAAY,cAAgBwG,EAAKpF,aAG7B,wBAAIrB,IAAK2G,EAAarF,KAAMrB,UAAWA,GAC3C,4BACI,0BAAMA,UAAU,WAAhB,OAEJ,4BACI,6BAAM0G,EAAarF,MAEiB,qBAAzBqF,EAAaC,SACM,KAAvBD,EAAaC,SAAgB,6BAAK,uCAAY,8BAAOD,EAAaC,WAEzE,0CAAgBD,EAAa/G,QANjC,OAOI,0CAAgB+G,EAAazF,SAEjC,4BACI,kBAAC,IAAD,CACI/B,QAASwH,EAAaX,OACtBzH,YAAY,EACZE,gBAAgB,KAGxB,4BAAK,EAAKoI,iBAAiBF,EAAaZ,MAAMe,cAC9C,iCAKpBN,EACI1H,KACKR,MACAuE,OACA2D,cACAO,SACApF,KACG,cAAEqF,IAAF,IAAOC,EAAP,EAAOA,KAAMrH,EAAb,EAAaA,OAAb,OAAyB,wBAAII,IAAK,eAAeJ,GAASqH,EAAjC,cAAkDrH,MAI3F,OACI,6BACI,4CACA,8BACIkC,MAAO,CAACoF,MAAM,QACdC,KAAM,EACNC,YAAY,+DACZC,aAAcvI,KAAKR,MAAMyH,MACzB7D,SAAUpD,KAAKsH,SAEnB,6BACI,uBAAGkB,KAAM7B,OAAOC,UAAhB,sBAGA5G,KAAKR,MAAM0H,QACX,kBAAC,WAAD,KACI,uDACA,kBAAC,IAAD,CAAe7G,QAASL,KAAKR,MAAM0H,OAAQ/E,OAAQnC,KAAKR,MAAMuE,OAAO0B,QAI7E,4CACA,+BACI,2BACIvC,KAAK,WACL+D,MAAOjH,KAAKR,MAAM4H,SAASC,uBAC3BjE,SAAU,SAACqF,GAAD,OAAK,EAAKlB,eAAe,yBAA0BkB,EAAEC,OAAOvF,YAJ9E,iMAOiB,OAAhBsE,GACG,kBAAC,WAAD,KACI,4BAAKC,GACL,2BAAOvG,UAAU,iCACb,+BACI,4BACI,wBAAIwH,MAAM,cAAV,OACA,wBAAIA,MAAM,0CAAV,SACA,wBAAIA,MAAM,2BAAV,OACA,wBAAIA,MAAM,qBAAV,SACA,wBAAIA,MAAM,WAAV,aAGR,+BAAQlB,Q,kCAe5B,OANIzH,KAAKJ,cAAgB,GACrBI,KAAKJ,aAAe,EAEpBI,KAAKJ,eAGFI,KAAKJ,e,+BAEPqH,GACL,IAAI2B,EAAU,IAAIC,IAIlB,IAFA5B,EAAQA,EAAMrC,QAAQ,oBAAqB,IAAIkE,QAErC1G,OAAS,IAAM,EAAG,CACxB,IAAI8E,EAAS3B,EAAOwB,KAAKE,EAAO,OAEhC,IAKI,MAAQ,CAACA,QAAOC,SAAQnD,OAHpB6E,EACKG,OAAO7B,GAAQ,EAAM,cAGhC,MAAOuB,GACL,MAAQ,CAACxB,QAAOC,OAAO,KAAMnD,OAAQ,U,6BAI1C0E,GACH,IAAIjJ,EAAQQ,KAAKgH,SAASyB,EAAEC,OAAOzB,OAEd,OAAjBzH,EAAM0H,SAENP,OAAOC,SAASC,KAAOrH,EAAM0H,OAAOlG,SAAS,QAGjDhB,KAAKC,SAASC,OAAOC,OAAO,GAAIH,KAAKR,MAAOA,Q,GArMtB6D,cAyMfoD,Q,4CC9MfuC,EAAOC,QAAU,EAAQ,K,8GCGnBC,E,iLAEE,IAAI3C,EACAhB,EACKwB,KACG,CACI,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAC1E,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAC1E,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAC1E,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAC1E,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAC1E,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAC1E,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,IAG1FoC,QAAQC,IAAI7C,EAAIjG,YAShB,OACI,6BACI,kBAAC,IAAD,CACID,QAASkG,EACTpE,OAXC,CACT,CAACrB,OAAQ,EAAGsB,OAAQ,EAAGI,KAAK,eAC5B,CAAC1B,OAAQ,EAAGsB,OAAQ,EAAGI,KAAK,iBAC5B,CAAC1B,OAAQ,EAAGsB,OAAQ,EAAGI,KAAK,iBAC5B,CAAC1B,OAAQ,EAAGsB,OAAQ,EAAGI,KAAK,iBAUxB,+BACI,4BACI,wBAAI6G,QAAQ,KACR,0BAAMrG,MAAO,CAACsG,SAAS,SACnB,4BAAQnI,UAAU,0BAAlB,eACA,4BAAQA,UAAU,0BAAlB,aACA,4BAAQA,UAAU,0BAAlB,sBAIZ,4BACI,wBAAI6B,MAAO,CAACuG,aAAa,SACrB,0CACa,6BADb,YAEa,6BAFb,YAGa,6BAHb,YAIa,6BAJb,YAKa,6BALb,YAMa,6BANb,YAOa,6BAPb,YAQa,6BARb,YASa,6BATb,YAUa,+BAGjB,wBAAIvG,MAAO,CAACwG,YAAY,MAAMD,aAAa,QACvC,iEACoC,6BADpC,eAEgB,0BAAMpI,UAAU,eAAewH,MAAM,oBAArC,uBAA4E,6BAA5E,YACH,0BAAMA,MAAM,MAAMxH,UAAU,gBAA5B,kBADG,YACsE,6BADtE,mCAEoB,6BAFpB,8BAFhB,SAK2C,6BAL3C,mCAMoC,6BANpC,mCAOoC,6BAPpC,mCAQoC,6BARpC,mCASoC,6BATpC,mCAUoC,+BAGxC,wBAAI6B,MAAO,CAACwG,YAAY,SACpB,wDAC2B,6BAD3B,WAEY,0BAAMrI,UAAU,eAAewH,MAAM,oBAArC,kBAAuE,6BAAvE,0BACe,6BADf,0BAEe,6BAFf,uBAFZ,OAKkC,6BALlC,0BAM2B,6BAN3B,0BAO2B,6BAP3B,0BAQ2B,6BAR3B,0BAS2B,6BAT3B,0BAU2B,sC,GAjFzBtF,aA4Ff6F,Q,yVC3FI7F,Y,OCUJoG,E,iLARP,OACI,kC,GALWpG,aCURqG,E,iLARP,OACI,6C,GAHcrG,aCCpBsG,E,iLAEE,OACI,6BACK3J,KAAKT,MAAMqK,aACZ,kBAACC,EAAD,CAAK9C,KAAM,EAAG+C,GAAI,U,GALNzG,aAW5B,SAASwG,EAAIE,GAGT,OAAO,mCAASA,EAAOhD,KAAhB,OAA0BgD,EAAOD,IAO7BH,IAEFK,EAA4B,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OAAa,kBAAC,EAAD,CAAeL,aAAcK,EAAMF,OAAOH,gB,gDC1BjF,GACbM,MAAO,CACL,CACE1H,KAAM,6CACN2H,IAAK,IACLC,KAAM,mBACNC,OAAO,GAET,CACE7H,KAAM,WACN2H,IAAK,YACLC,KAAM,oBAER,CACE5H,KAAM,eACN2H,IAAK,eACLC,KAAM,oBAER,CACE5H,KAAM,YACN2H,IAAK,YACLC,KAAM,sBCiEGE,E,YArEX,WAAY/K,GAAQ,IAAD,sBACf,4CAAMA,IAEN,IAAIsH,EAAOF,OAAOC,SAASC,KAEvB0D,EAAQ,GALG,OAOH,MAAR1D,GAAgBA,EAAKzE,OAAO,IAC5BmI,EAAU1I,IAAMC,KAAK4C,IAAIC,QAAQkC,EAAKC,OAAO,KAGjD,EAAKtH,MAAQ,CACTgL,KAAKD,GAGT,EAAKnH,SAAW,EAAKA,SAAStD,KAAd,6BAfD,E,sEAiBV0K,GACLxK,KAAKC,SAAS,CAACuK,KAAMA,IAEjBA,EAAKpI,QAAU,MACfuE,OAAOC,SAASC,KAAO,IAAM2D,K,+BAIjC,OACI,kBAAC,IAAD,CAAQC,SAAQ,UAAKC,WACjB,yBAAKvJ,UAAU,OAIX,yBAAKA,UAAU,YACX,kBAAC,IAAD,CAAYwJ,OAAK,EAACC,QAAQ,MAEtB,kBAAC,IAAD,CAAeC,UAAWA,KAE9B,0BAAMC,KAAK,OAAO3J,UAAU,QACxB,kBAAC4J,EAAA,EAAD,CAAWC,OAAK,EAAC7J,UAAU,OACvB,kBAAC8J,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOf,OAAK,EAACgB,KC1DhC,ID0DwDC,UAAW7B,IAChD,kBAAC2B,EAAA,EAAD,CAAOC,KC1DtB,YD0DkDC,UAAW5B,IAC9C,kBAAC0B,EAAA,EAAD,CAAOC,KC1DnB,eD0DkDC,UAAW7E,MAEjD,kBAAC2E,EAAA,EAAD,CACIC,KAAME,0BACND,UAAWtB,IAGf,kBAACoB,EAAA,EAAD,CACIC,KAAK,gBACLC,UAAWpC,YAQvC,kBAAC,IAAD,+B,GA7DF7F,aEXlBmI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,iGCelC,EAff,WACE,SAAS9G,IACP,YAAgB7E,KAAM6E,GAUxB,OAPA,YAAaA,EAAU,CAAC,CACtB3D,IAAK,kBACL+F,MAAO,SAAyBC,GAC9B,MAAM,IAAI0E,MAAM,2BAIb/G,EAZT,GC+Be,EA3Bf,SAAUgH,GAGR,SAASC,IAGP,OAFA,YAAgB9L,KAAM8L,GAEf,YAA2B9L,KAAM,YAAgB8L,GAAcC,MAAM/L,KAAMgM,YAkBpF,OAvBA,YAAUF,EAAcD,GAQxB,YAAaC,EAAc,CAAC,CAC1B5K,IAAK,UACL+F,MAAO,SAAiBC,GAGtB,IAFA,IAAInD,EAAS,GAEJ1B,EAAI,EAAGA,EAAI6E,EAAO9E,OAAQC,GAAK,EAAG,CACzC,IAAI4J,EAAQ/E,EAAO7E,GACf6J,EAAQhF,EAAO7E,EAAI,GACvB0B,EAAOhD,KAAKiB,OAAOyC,aAAqB,IAARwH,EAAcC,IAGhD,OAAOnI,EAAOrC,KAAK,QAIhBoK,EAxBT,CAyBE,GCuCa,EAhEf,SAAUD,GAGR,SAASM,IACP,IAAIC,EAQJ,OANA,YAAgBpM,KAAMmM,IAEtBC,EAAQ,YAA2BpM,KAAM,YAAgBmM,GAAaE,KAAKrM,QACrEsM,iBAAmB,GACzBF,EAAMG,aAAe,CAAC,IAAK,OAAK,IAAK,OAAK,OAAK,OAAK,OAAK,OAAK,OAAK,OAAK,KAAM,OAAK,OAAK,KAAM,OAAK,OAAK,SAAK,IAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,MAAO,OAAK,OAAK,OAAK,OAAK,IAAK,IAAK,IAAK,IAAK,OAAK,IAAK,IAAK,IAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OAAK,OAAK,OAAK,OAAK,OAAK,OAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OAAK,OAAK,OAAK,OAAK,QACtpBH,EAAMpH,YAAc,CAAC,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,KAAM,YAAa,YAAa,MAAO,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,IAAK,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,MAAO,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,IAAK,IAAK,YAAa,YAAa,YAAa,YAAa,YAAa,KAAM,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,IAAK,IAAK,IAAK,YAAa,IAAK,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,SAAK,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,YAAa,aACviDoH,EAiDT,OA5DA,YAAUD,EAAaN,GAcvB,YAAaM,EAAa,CAAC,CACzBjL,IAAK,kBACL+F,MAAO,SAAyBC,GAC9B,IAAK,IAAI7E,EAAI,EAAGA,EAAI6E,EAAO9E,OAAQC,IAAK,CACtC,IAAImK,EAAOtF,EAAO7E,GAElB,GAAImK,GAAQxM,KAAKsM,kBAAoBjK,EAAI6E,EAAO9E,OAAS,EAAG,CAC1D,IAAIqK,EAAQvF,EAAO7E,EAAI,GAEvB,GAAsC,oBAA3BrC,KAAKgF,YAAYyH,IAAoD,aAA3BzM,KAAKgF,YAAYyH,GACpE,OAAO,EAGTpK,SACK,GAAImK,EAAO,GAAKA,EAAO,IAC5B,OAAO,EAIX,OAAO,IAER,CACDtL,IAAK,UACL+F,MAAO,SAAiBC,GACtB,GAAIlH,KAAKmF,gBAAgB+B,GAAS,CAGhC,IAFA,IAAInD,EAAS,GAEJ1B,EAAI,EAAGA,EAAI6E,EAAO9E,OAAQC,IAAK,CACtC,IAAImK,EAAOtF,EAAO7E,GAElB,GAAImK,GAAQxM,KAAKsM,iBAAkB,CACjC,IAAIG,EAAQvF,EAAO7E,EAAI,GACvB0B,EAAOhD,KAAKf,KAAKgF,YAAYyH,IAC7BpK,SAEA0B,EAAOhD,KAAKf,KAAKuM,aAAaC,IAIlC,OAAOzI,EAAOrC,KAAK,IAEnB,MAAM,IAAIkK,MAAM,mCAKfO,EA7DT,CA8DE,GCpESO,EAAc,CACvBC,aAAc,CACZC,QAAS,0BACTC,YAAa,EACb/E,QAAS,SAEXgF,UAAW,CACTF,QAAS,uBACTG,UAAW,SAAmBC,GAC5B,IAAK,IAAIC,KAASC,EAChB,GAAIA,EAA2BD,GAAOH,WAAaE,EACjD,OAAOC,EAIX,MAAO,sBAETJ,YAAa,EACb/E,QAAS,SAEXqF,OAAQ,CACNP,QAAS,oBACTG,UAAW,SAAmBC,GAE5B,MAAO,MAETH,YAAa,EACb/E,QAAS,SAEXsF,eAAgB,CACdR,QAAS,4BACTC,YAAa,EACb/E,QAAS,UA6BFoF,EAA6B,CACtC,aAAgB,CACd,KAAQ,UACR,UAAa,WACb,QAAW,MAEb,cAAiB,CACf,KAAQ,UACR,UAAa,EACb,QAAW,CACTG,SAAU,uBACVC,SAAU,sBACVC,WAAY,yBACZC,iBAAkB,6BAClBC,QAAS,oBACTC,QAAS,oBACTC,aAAc,6BAGlB,mBAAsB,CACpB,KAAQ,WACR,UAAa,WACb,QAAW,CACTN,SAAU,uBACVO,KAAM,gBAGV,iBAAoB,CAClB,KAAQ,UACR,UAAa,EACb,QAAW,CACTP,SAAU,uBACVC,SAAU,sBACVC,WAAY,yBACZC,iBAAkB,6BAClBC,QAAS,oBACTC,QAAS,oBACTC,aAAc,6BAGlB,sBAAyB,CACvB,KAAQ,WACR,UAAa,WACb,QAAW,CACTN,SAAU,uBACVO,KAAM,gBAGV,SAAY,CACV,KAAQ,UACR,UAAa,EACb,QAAW,CACTC,UAAW,wBACXC,cAAe,0BACfC,cAAe,0BACfC,WAAY,2BAGhB,cAAiB,CACf,KAAQ,WACR,UAAa,WACb,QAAW,CACTH,UAAW,wBACXI,UAAW,wBACXC,aAAc,yBACdC,UAAW,wBAGf,UAAa,CACX,KAAQ,UACR,UAAa,EACb,QAAW,QACX,QAAW,CACTC,YAAa,CACXxB,QAAS,yBACT9E,QAAS,UAEXgG,cAAe,CACblB,QAAS,0BACT9E,QAAS,SAEXiG,cAAe,CACbnB,QAAS,0BACT9E,QAAS,SAEXkG,WAAY,CACVpB,QAAS,yBACT9E,QAAS,SAEXuG,YAAa,CACXzB,QAAS,wBACT9E,QAAS,SAEXwG,YAAa,CACX1B,QAAS,wBACT9E,QAAS,SAEXyG,gBAAiB,CACf3B,QAAS,8BACT9E,QAAS,SAEX0G,SAAU,CACR5B,QAAS,qBACT9E,QAAS,UAEX2G,WAAY,CACV7B,QAAS,uBACT9E,QAAS,UAEX4G,aAAc,CACZ9B,QAAS,yBACT9E,QAAS,UAEX6G,qBAAsB,CACpB/B,QAAS,mCACT9E,QAAS,UAEX8G,eAAgB,CACdhC,QAAS,6BACT9E,QAAS,UAEX+G,mBAAoB,CAClBjC,QAAS,+BACT9E,QAAS,UAEXgH,qBAAsB,CACpBlC,QAAS,iCACT9E,QAAS,UAEXiH,WAAY,CACVnC,QAAS,uBACT9E,QAAS,UAEXkH,eAAgB,CACdpC,QAAS,2BACT9E,QAAS,UAEXmH,SAAU,CACRrC,QAAS,qBACT9E,QAAS,UAEXoH,aAAc,CACZtC,QAAS,+BACT9E,QAAS,SACTiF,UAAW,SAAmB9F,EAAOkI,GACnC,IAAKA,EAAIC,UAAUZ,SAAWa,GAAuB,EAAG,CACtD,IAAIC,EAAYrI,EAAM,GACtBA,EAAQA,EAAMsI,MAAMD,EAAY,GAGlC,IAAIE,EAAY,CACd,KAAQ,IAAI,EACZ,IAAO,IAAI,GAETzL,EAAS,GAEb,IAAK,IAAI0L,KAAWD,EAAW,CAC7B,IAAIE,EAAWF,EAAUC,GAEzB,IACE1L,EAAO0L,GAAWC,EAASC,QAAQ1I,GACnC,MAAOwB,KAIX,OAAO1E,IAGX6J,KAAM,CACJhB,QAAS,iBAIf,eAAkB,CAChB,KAAQ,WACR,UAAa,WACb,QAAW,QACX,QAAW,CAAC,0BAEd,WAAc,CACZ,KAAQ,UACR,UAAa,EACb,QAAW,CAAC,yBAA0B,0BAA2B,0BAA2B,yBAA0B,wBAAyB,wBAAyB,8BAA+B,qBAAsB,uBAAwB,yBAA0B,mCAAoC,6BAA8B,+BAAgC,iCAAkC,uBAAwB,2BAA4B,qBAAsB,+BAAgC,gBAE/f,gBAAmB,CACjB,KAAQ,WACR,UAAa,WACb,QAAW,CAAC,0BAEd,OAAU,CACR,KAAQ,UACR,UAAa,EACb,QAAW,MAEb,YAAe,CACb,KAAQ,WACR,UAAa,WACb,QAAW,MAEb,WAAc,CACZ,KAAQ,UACR,UAAa,EACb,QAAW,CAAC,wBAAyB,0BAA2B,0BAA2B,yBAA0B,mCAAoC,6BAA8B,+BAAgC,2BAA4B,qBAAsB,iCAE3Q,gBAAmB,CACjB,KAAQ,WACR,UAAa,WACb,QAAW,MAEb,UAAa,CACX,KAAQ,UACR,UAAa,EACb,QAAW,CAAC,yBAA0B,wBAAyB,0BAA2B,0BAA2B,yBAA0B,wBAAyB,wBAAyB,gCAEnM,eAAkB,CAChB,KAAQ,WACR,UAAa,WACb,QAAW,MAEb,iBAAoB,CAClB,KAAQ,UACR,UAAa,EACb,QAAW,CAAC,uBAAwB,sBAAuB,yBAA0B,6BAA8B,oBAAqB,oBAAqB,6BAE/J,sBAAyB,CACvB,KAAQ,WACR,UAAa,WACb,QAAW,CAAC,uBAAwB,gBAEtC,QAAW,CACT,KAAQ,UACR,QAAW,gDACX,UAAa,WACb,QAAW,CAAC,uBAAwB,wBAEtC,aAAgB,CACd,KAAQ,UACR,UAAa,GACb,QAAW,MAEb,kBAAqB,CACnB,KAAQ,WACR,UAAa,WACb,QAAW,MAEb,mBAAsB,CACpB,KAAQ,UACR,UAAa,IACb,QAAW,CAAC,0BAA2B,0BAA2B,yBAA0B,wBAAyB,wBAAyB,uBAAwB,gBAExK,QAAW,CACT,KAAQ,UACR,UAAa,IACb,QAAW,CAAC,yBAA0B,0BAA2B,0BAA2B,yBAA0B,wBAAyB,wBAAyB,8BAA+B,qBAAsB,+BAAgC,uBAAwB,gBAEvR,aAAgB,CACd,KAAQ,WACR,UAAa,WACb,QAAW,CAAC,wBAAyB,iBA0H9BgD,EAAgB,CAAC,CAC1B1H,IAnHoC,GAoHpC1F,KAAM,4BACL,CACD0F,IArH4B,GAsH5B1F,KAAM,oBACL,CACD0F,IAvHiC,IAwHjC1F,KAAM,yBACL,CACD0F,IAzHsC,IA0HtC1F,KAAM,8BACL,CACD0F,IA3HkC,IA4HlC1F,KAAM,0BACL,CACD0F,IA7H2B,IA8H3B1F,KAAM,mBACL,CACD0F,IA/HgC,IAgIhC1F,KAAM,wBACL,CACD0F,IAjI+B,IAkI/B1F,KAAM,uBACL,CACD0F,IAnIkC,IAoIlC1F,KAAM,0BACL,CACD0F,IArIkC,IAsIlC1F,KAAM,0BACL,CACD0F,IAvIkC,IAwIlC1F,KAAM,0BACL,CACD0F,IAzIiC,IA0IjC1F,KAAM,yBACL,CACD0F,IA3I+B,IA4I/B1F,KAAM,uBACL,CACD0F,IA7I4B,IA8I5B1F,KAAM,oBACL,CACD0F,IA/I+B,KAgJ/B1F,KAAM,uBACL,CACD0F,IAhJoC,IAiJpC1F,KAAM,4BACL,CACD0F,IAjJ4B,KAkJ5B1F,KAAM,oBACL,CACD0F,IAlJ2B,KAmJ3B1F,KAAM,mBACL,CACD0F,IAnJ0B,KAoJ1B1F,KAAM,kBACL,CACD0F,IApJuB,KAqJvB1F,KAAM,eACL,CACD0F,IArJ+B,KAsJ/B1F,KAAM,uBACL,CACD0F,IAtJkC,KAuJlC1F,KAAM,0BACL,CACD0F,IAvJuC,KAwJvC1F,KAAM,+BACL,CACD0F,IAxJmC,KAyJnC1F,KAAM,2BACL,CACD0F,IAzJyB,KA0JzB1F,KAAM,iBACL,CACD0F,IA1JgC,KA2JhC1F,KAAM,wBACL,CACD0F,IA3JqC,IA4JrC1F,KAAM,6BACL,CACD0F,IA5JiC,IA6JjC1F,KAAM,yBACL,CACD0F,IA7JwB,IA8JxB1F,KAAM,gBACL,CACD0F,IA9J0B,KA+J1B1F,KAAM,kBACL,CACD0F,IA/JqC,KAgKrC1F,KAAM,6BACL,CACD0F,IAhK8B,KAiK9B1F,KAAM,sBACL,CACD0F,IAjKgC,KAkKhC1F,KAAM,wBACL,CACD0F,IAlK+B,KAmK/B1F,KAAM,uBACL,CACD0F,IAnK2C,KAoK3C1F,KAAM,mCACL,CACD0F,IApKsC,KAqKtC1F,KAAM,8BACL,CACD0F,IArK2C,KAsK3C1F,KAAM,mCACL,CACD0F,IAtKuC,KAuKvC1F,KAAM,+BACL,CACD0F,IAvKiC,KAwKjC1F,KAAM,yBACL,CACD0F,IAxK4C,KAyK5C1F,KAAM,oCACL,CACD0F,IAzKyC,KA0KzC1F,KAAM,iCACL,CACD0F,IA1KsC,KA2KtC1F,KAAM,8BACL,CACD0F,IA3KsC,KA4KtC1F,KAAM,8BACL,CACD0F,IA5KkC,KA6KlC1F,KAAM,0BACL,CACD0F,IA7KuC,KA8KvC1F,KAAM,+BACL,CACD0F,IA9KiC,KA+KjC1F,KAAM,yBACL,CACD0F,IA/K+B,KAgL/B1F,KAAM,uBACL,CACD0F,IAhL8B,KAiL9B1F,KAAM,sBACL,CACD0F,IAjL4B,KAkL5B1F,KAAM,oBACL,CACD0F,IAlLsC,KAmLtC1F,KAAM,6BACNsF,QAAS,IACR,CACDI,IApL6B,MAqL7B1F,KAAM,qBACL,CACD0F,IArL6B,MAsL7B1F,KAAM,qBACL,CACD0F,IAtLiC,EAuLjC1F,KAAM,yBACL,CACD0F,IAvLiC,EAwLjC1F,KAAM,yBACL,CACD0F,IAxL8B,EAyL9B1F,KAAM,sBACL,CACD0F,IAzL4B,EA0L5B1F,KAAM,oBACL,CACD0F,IA1LmC,GA2LnC1F,KAAM,2BACL,CACD0F,IA3LmC,GA4LnC1F,KAAM,2BACL,CACD0F,IA5LgC,GA6LhC1F,KAAM,wBACL,CACD0F,IA7L8B,GA8L9B1F,KAAM,sBACL,CACD0F,IA9LgC,GA+LhC1F,KAAM,wBACL,CACD0F,IA/L+B,GAgM/B1F,KAAM,uBACL,CACD0F,IAhMgC,GAiMhC1F,KAAM,wBACL,CACD0F,IAjMsC,GAkMtC1F,KAAM,+BA2BG6M,EAAsB,GCtmBlB,EA5Cf,WACE,SAASQ,EAAkBC,GACzB,YAAgB9P,KAAM6P,GAEtB7P,KAAKc,OAAS,EACdd,KAAK+P,iBAAmBD,EACxB9P,KAAKgQ,mBAAqB,GAC1BhQ,KAAK8P,cAAgBA,EACrB9P,KAAKiQ,eAAiBH,EACtB9P,KAAKkQ,oBAAsBJ,EAAcxP,WACzCN,KAAKoP,UAAY,GA+BnB,OA5BA,YAAaS,EAAmB,CAAC,CAC/B3O,IAAK,cACL+F,MAAO,SAAqBkJ,GAC1B,QAA4C,qBAAjCA,EAAiBtD,aACtB7M,KAAKc,OAASqP,EAAiBtD,YAAc7M,KAAKkQ,uBAOzD,CACDhP,IAAK,aACL+F,MAAO,SAAoBmJ,GACzBpQ,KAAKiQ,eAAiBjQ,KAAK+P,iBAC3B/P,KAAK+P,iBAAmBK,EACxB,IAAIC,EAAgBrQ,KAAKc,OACrBwP,EAAYtQ,KAAK+P,iBAAiBzP,WAClCuM,EAAc7M,KAAKkQ,oBAAsBG,EAAgBC,EAE7D,OADAtQ,KAAKc,QAAU+L,EACR,CACL/L,OAAQuP,EACRjO,OAAQyK,EACR3F,OAAQlH,KAAKiQ,eAAeV,MAAM,EAAG1C,QAKpCgD,EAzCT,GCiCe,EAjCf,WACE,SAASU,IACP,YAAgBvQ,KAAMuQ,GAEtBvQ,KAAKwQ,SAAW,GA0BlB,OAvBA,YAAaD,EAAe,CAAC,CAC3BrP,IAAK,kBACL+F,MAAO,SAAyBiB,EAAKC,EAAMrH,GACzCd,KAAKwQ,SAASzP,KAAK,CACjBmH,IAAKA,EACLC,KAAMA,EACNrH,OAAQA,MAGX,CACDI,IAAK,SACL+F,MAAO,WACL,OAAOjH,KAAKwQ,WAEb,CACDtP,IAAK,eACL+F,MAAO,SAAsBiB,GAC3B,OAAOlI,KAAKwQ,SAASC,QAAO,SAAUC,GACpC,OAAOA,EAAKxI,MAAQA,SAKnBqI,EA9BT,GCKe,EAPQ,SAASI,IAC9B,YAAgB3Q,KAAM2Q,GAEtB3Q,KAAKyF,KAAO,GACZzF,KAAK0H,cAAgB,IAAI,GCIvB,EAEJ,WACE,SAASmB,IACP,YAAgB7I,KAAM6I,GAEtB7I,KAAK4Q,SAAW,OA4JlB,OAzJA,YAAa/H,EAAa,CAAC,CACzB3H,IAAK,QACL+F,MAAO,SAAe2J,GACpB,GAAsB,SAAlB5Q,KAAK4Q,SAAqB,CAC5B,IAAK,IAAIC,EAAO7E,UAAU5J,OAAQ0O,EAAM,IAAIC,MAAMF,EAAO,EAAIA,EAAO,EAAI,GAAIG,EAAO,EAAGA,EAAOH,EAAMG,IACjGF,EAAIE,EAAO,GAAKhF,UAAUgF,GAG5B7H,QAAQC,IAAI0H,MAGf,CACD5P,IAAK,cACL+F,MAAO,SAAqBgK,GAE1B,OADAjR,KAAK4Q,SAAWK,EACTjR,OAUR,CACDkB,IAAK,SACL+F,MAAO,SAAgBV,GACrB,IAAI2K,EAAelF,UAAU5J,OAAS,QAAsB+O,IAAjBnF,UAAU,IAAmBA,UAAU,GAC9EoF,EAAmBpF,UAAU5J,OAAS,QAAsB+O,IAAjBnF,UAAU,GAAmBA,UAAU,GAAK,YAC3FhM,KAAKqR,MAAM,QAAS,iBAAkB9K,EAAK2K,EAAcE,GACzD,IAAIjC,EAAM,IAAI,EAAkB5I,GAC5BxC,EAAS,IAAI,EAEjB,IAAKmN,EACH,IAAK,IAAII,KAAa5E,EAAa,CACjC,IAAIyD,EAAmBzD,EAAY4E,GAEnC,IACEtR,KAAKuR,YAAYD,EAAWnB,EAAkBhB,EAAKpL,GACnD,MAAO0E,GACP,OAKN,IAAI+I,EAAuBtE,EAA2BkE,GAEtD,IAAK,IAAIK,KAAcD,EAAqB5E,QAC1C,GAAmB,SAAf6E,EAAuB,CAEzB,IAAI7E,EAAU,IAAU8E,MAAM,oDAE9B,EAAG,CACD,IAAIC,EAAW,IAAU1H,MAAM2C,EAASuC,EAAIY,kBAE5C,IAAiB,IAAb4B,EAKG,CACL5N,EAAO2D,cAAckK,gBAAgB,MAAO,0BAA2BzC,EAAIrO,QAC3E,MANA,IAAI+Q,EAAM1C,EAAI2C,WAAWH,EAASI,MAClCF,EAAIrP,KAAOxC,KAAKgS,WAAWL,EAASM,GACpCJ,EAAI5K,MAAQjH,KAAKkS,eAAeL,EAAIrP,KAAMmP,EAAS3E,EAAEhM,YACrD+C,EAAO0B,KAAK1E,KAAK8Q,SAKZ1C,EAAIY,iBAAiBzP,WAAa,OACtC,CACL,IAAI6R,EAAoBX,EAAqB5E,QAAQ6E,GACrDzR,KAAKqR,MAAM,QAAS,oBAAqBc,GAEzC,IACEnS,KAAKuR,YAAYE,EAAYU,EAAmBhD,EAAKpL,GACrD,MAAO0E,GACP,OAKN,OAAO1E,IAER,CACD7C,IAAK,cACL+F,MAAO,SAAqBqK,EAAWnB,EAAkBhB,EAAKpL,GAC5D,IAAKoL,EAAIiD,YAAYjC,GAGnB,MAFApM,EAAO2D,cAAckK,gBAAgBN,EAAW,oCAAoCe,OAAOlC,EAAiBtD,YAAa,cAAcwF,OAAOlD,EAAIe,oBAAsBf,EAAIrO,QAASqO,EAAIrO,QAEnL,IAAI8K,MAAM,6BAGlB,IAAI0G,EAAgB,IAAUrI,MAAMjK,KAAKuS,WAAWpC,GAAmBhB,EAAIY,iBAAkBZ,EAAIC,WAEjG,IAAKkD,EAGH,MAFAvO,EAAO2D,cAAckK,gBAAgBN,EAAW,6BAA6Be,OAAOf,GAAYnC,EAAIrO,QAE9F,IAAI8K,MAAM,6BAEhB,IAAIiG,EAAM1C,EAAI2C,WAAWQ,EAAcP,MACvCF,EAAIrP,KAAO8O,EACXO,EAAI5K,MAAQjH,KAAKkS,eAAeZ,EAAWgB,EAAchB,GAAYnB,EAAkBhB,GAE/C,qBAA7BgB,EAAiBrI,UAC1B+J,EAAI/J,QAAUqI,EAAiBrI,SAGjCqH,EAAIC,UAAUkC,GAAaO,EAAI5K,MAAMuL,IACrCzO,EAAO0B,KAAK1E,KAAK8Q,KAGpB,CACD3Q,IAAK,iBACL+F,MAAO,SAAwBwL,EAAOxL,EAAOyL,EAAQvD,GACnD,IAAInH,EAAcf,EAMlB,MAJsB,qBAAXyL,GAAsD,qBAArBA,EAAO3F,YACjD/E,EAAc0K,EAAO3F,UAAU9F,EAAOkI,IAGjC,CACLnH,YAAaA,EACbwK,IAAKvL,KAGR,CACD/F,IAAK,aACL+F,MAAO,SAAoB0L,GACzB,MAA6B,qBAAlBA,EAAM/F,QACR5M,KAAK4S,eAAeD,EAAM/F,SAE1B5M,KAAK4S,eAAeD,KAG9B,CACDzR,IAAK,iBACL+F,MAAO,SAAwB4L,GAC7B,MAAmB,kBAARA,EACF,IAAUnB,MAAMmB,EAAM,gBAEtBA,IAGV,CACD3R,IAAK,aACL+F,MAAO,SAAoBiB,GACzB,IAAK,IAAI7F,KAAKuN,EACZ,GAAI1H,IAAQ0H,EAAcvN,GAAG6F,IAC3B,OAAO0H,EAAcvN,GAAGG,KAI5B,MAAO,kBAIJqG,EAhKT,GAmKe,c","file":"static/js/main.76a03c4f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Utils from \"../Utils\";\nimport \"./simple-hex-dump.css\";\nimport \"../color-groups.css\";\n\nclass SimpleHexDump extends Component {\n    constructor(props) {\n        super(props);\n\n        this\n            .state = {\n                showOffset: this.props.showOffset,\n                showHex: this.props.showHex,\n                showCharacters: this.props.showCharacters\n            };\n\n        this.currentGroup=0;\n\n        this.onFilterClick = this.onFilterClick.bind(this);\n    }\n    onFilterClick(filterName) {\n        let state = this.state;\n\n        state[filterName] = !state[filterName];\n\n        this.setState(Object.assign({}, state));\n    }\n    renderOffsetPanel() {\n        let hexDumpLength = this.props.hexdump.byteLength;\n\n        let minimumLength10 = Math.ceil(Math.log10(hexDumpLength));\n        let minimumLength16 = Math.ceil(Math.log2(hexDumpLength) / Math.log2(16));\n\n        let offsets = [];\n        let offset = 0;\n        while (offset < hexDumpLength) {\n            offsets\n                .push(\n                    \"0x\"\n                    + offset.toString(16).padStart(minimumLength16,\"0\")\n                    + \":\"\n                    + offset.toString(10).padStart(minimumLength10,\"0\")\n                );\n\n            offset+=16;\n\n            if (offset < hexDumpLength) {\n                offsets.push(<br key={\"offset-offset-\"+offset} />);\n            }\n        }\n\n        return <div className=\"simple-hex-dump-offset-panel\"><code>{offsets}</code></div>;\n    }\n    renderHexPanel() {\n        let dump = [];\n\n        let hexDumpLength = this.props.hexdump.byteLength;\n\n        this.currentGroup = 0;\n\n        for (let offset = 0;offset < hexDumpLength;offset++) {\n            this.endGroup(offset, dump);\n            this.startGroup(offset, dump);\n\n            dump.push(this.props.hexdump.readUInt8(offset).toString(16).padStart(2,\"0\"));\n\n            if (\n                (offset % 4 === 3)\n                && (offset % 16 !== 15)\n            ) {\n                dump.push(\" |\");\n            }\n\n            if (offset % 16 < 15) {\n                dump.push(\" \");\n            }\n\n            if (offset>0 && offset % 16 === 15) {\n                dump.push(\"<br />\");\n            }\n        }\n\n        this.endGroup(hexDumpLength, dump);\n\n        return <div className=\"simple-hex-dump-body-panel\"><code dangerouslySetInnerHTML={{__html:dump.join(\"\")}} /></div>;\n    }\n    renderCharactersPanel() {\n        this.currentGroup = 0;\n\n        let dump = [];\n\n        let hexDumpLength = this.props.hexdump.byteLength;\n\n        for (let offset = 0;offset < hexDumpLength;offset++) {\n            this.endGroup(offset, dump);\n            this.startGroup(offset, dump);\n\n            let charCode = this.props.hexdump.readUInt8(offset);\n\n            let char = Utils.Text.isPrint(charCode) ? String.fromCodePoint(charCode) : \".\";\n\n            dump.push(char);\n\n            if (\n                (offset % 4 === 3)\n                && (offset % 16 !== 15)\n            ) {\n                dump.push(\" |\");\n            }\n\n            if (offset % 16 < 15) {\n                dump.push(\" \");\n            }\n\n            if (offset>0 && offset % 16 === 15) {\n                dump.push(\"<br  />\");\n            }\n        }\n\n        this.endGroup(hexDumpLength, dump);\n\n        return <div className=\"simple-hex-dump-characters-panel\"><code dangerouslySetInnerHTML={{__html: dump.join(\"\")}} /></div>;\n    }\n    startGroup(offset, array) {\n        if (typeof this.props.groups === \"undefined\" || this.props.groups.length === 0) {\n            return ;\n        }\n        for (let i in this.props.groups) {\n            let curGroup = this.props.groups[i];\n\n            if (curGroup.offset === offset) {\n                array.push(\"<span class=\\\"color-group\"+this.nextGroup()+\"\\\" title=\\\"\"+curGroup.name+\"\\\">\");\n\n                break;\n            }\n        }\n    }\n    endGroup(offset, array) {\n        if (typeof this.props.groups === \"undefined\" || this.props.groups.length === 0) {\n            return ;\n        }\n        for (let i in this.props.groups) {\n            let curGroup = this.props.groups[i];\n\n            if (curGroup.offset + curGroup.length === offset) {\n                array.push(\"</span>\");\n                break;\n            }\n        }\n    }\n    nextGroup() {\n        if (this.currentGroup >= 20) {\n            this.currentGroup = 1;\n        } else {\n            this.currentGroup++;\n        }\n\n        return this.currentGroup;\n    }\n    render() {\n        this.currentGroup=0;\n\n        if (\n            typeof this.props.hexdump === \"undefined\"\n            || this.props.hexdump == null\n        ) {\n            return \"\";\n        }\n\n        let panels = [];\n\n        if (this.state.showOffset) {\n            panels.push(this.renderOffsetPanel());\n        }\n\n        if (this.state.showHex) {\n            panels.push(this.renderHexPanel());\n        }\n\n        if (this.state.showCharacters) {\n            panels.push(this.renderCharactersPanel());\n        }\n\n        return (\n            <div className=\"a1s-simple-hex-dump\">\n                <table className=\"simple-hex-dump\">\n                    <tbody>\n                        <tr>\n                            {panels.map((el, index) => <td key={\"of\"+index} style={{padding:\"0px 10px\"}}>{el}</td>)}\n                        </tr>\n                    </tbody>\n                </table>\n                <div>\n                    <label className=\"a1s-simple-hex-dump-btn-xs\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-element\"\n                            checked={this.state.showOffset}\n                            onChange={()=>this.onFilterClick(\"showOffset\")}\n                        />Offset\n                    </label>\n\n                    <label className=\"a1s-simple-hex-dump-btn-xs\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-element\"\n                            checked={this.state.showHex}\n                            onChange={()=>this.onFilterClick(\"showHex\")}\n                        />Hex\n                    </label>\n\n                    <label className=\"a1s-simple-hex-dump-btn-xs\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-element\"\n                            checked={this.state.showCharacters}\n                            onChange={()=>this.onFilterClick(\"showCharacters\")}\n                        />Characters\n                    </label>\n                </div>\n            </div>\n        );\n    }\n}\n\nSimpleHexDump.propTypes = {\n    hexdump: PropTypes.object.isRequired,\n    groups: PropTypes.array\n};\n\nSimpleHexDump.defaultProps = {\n    showOffset: true,\n    showHex: true,\n    showCharacters: true,\n};\n\nexport default SimpleHexDump;","let Utils = {};\nUtils.Text = {};\nUtils.Text.isPrint=function(val) {\n\tif (val > 0x20 && val < 0x7f) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\nUtils.Text.HexSymbols = \"0123456789ABCDEF\";\nUtils.Text.intToHex = function(val) {\n\tif (val > 255) {\n\t\t//var H = Utils.Text.byteToHex(val >> 8);\n\t\tvar H = Utils.Text.intToHex(val >> 8);\n\t\tvar L = Utils.Text.byteToHex(val & 0xFF);\n\t\t\t\t\n\t\treturn \"\"+H+L;\n\t} else {\n\t\treturn Utils.Text.byteToHex(val);\n\t}\n};\nUtils.Text.byteToHex = function(val) {\n\tvar H = Utils.Text.halfByteToHex(val >> 4);\n\tvar L =\tUtils.Text.halfByteToHex(val & 0xF);\n\t\n\treturn \"\"+H+L;\n};\nUtils.Text.halfByteToHex = function(val) {\n\treturn Utils.Text.HexSymbols.charAt(val & 0xF);\n};\n\nUtils.Text.stringToHex=function(s) {\n\tvar result=[];\n\tfor (var i=0;i<s.length;i++) {\n\t\tresult.push(Utils.Text.intToHex(s.charCodeAt(i)));\n\t}\n\t\n\treturn result.join('');\n};\n\nUtils.Text.hexToIntArray=function(hexString) {\n\tvar upperHexString = hexString.toUpperCase();\n\t\n\tvar result=[];\n\tvar currentValue=0;\n\tfor (var i=0;i<upperHexString.length;i++) {\n\t\tif (i % 2 === 1) {\n\t\t\tcurrentValue |= Utils.Text.HexSymbols.indexOf(upperHexString.charAt(i)); \n\t\t\tresult.push(currentValue);\t\t\t\t\t\t\n\t\t} else {\n\t\t\tcurrentValue = Utils.Text.HexSymbols.indexOf(upperHexString.charAt(i)) << 4; \n\t\t}\n\t}\n\t\t\t \n\treturn result;\t \n};\n\nUtils.Text.intArrayToString=function(intArray) {\n\tvar result=[];\n\t\n\tfor (var i=0;i<intArray.length;i++) {\n\t\tresult.push(String.fromCharCode(intArray[i]));\n\t}\n\t\t\t \n\treturn result.join('');\t \n};\n\nUtils.Text.Hex = {};\n\nUtils.Text.Hex.cleanup = function(hexString) {\n\tif (hexString == null) {\n\t\treturn \"\";\n\t}\n\n    var text = hexString.replace(/[^0-9a-fA-F]/gim,\"\");\n\n    return text;\n};\n\nUtils.Text.Encoding = {};\n\nUtils.Text.Encoding.GSM0338 = {};\n\nUtils.Text.Encoding.GSM0338.basicSet = \"@£$¥èéùìòÇ\\rØø\\nÅåΔ_ΦΓΛΩΠΨΣΘΞ@ÆæßÉ !\\\"#¤%&'()*+,-./0123456789:;<=>?¡ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÑÜ§¿abcdefghijklmnopqrstuvwxyzäöñüà\";\nUtils.Text.Encoding.GSM0338.extendedSet = \"|^€{}[~]\\\\\";\nUtils.Text.Encoding.GSM0338.mapping = [0x40, 0x14, 0x65, 0x28, 0x29, 0x3c, 0x3d, 0x3e, 0x2f];\nUtils.Text.Encoding.GSM0338.escCharacter = 0x1B;\n\nUtils.Text.Encoding.GSM0338.isRepresentable = function(str) {\n\tif (str === null || str.length === 0) {\n\t\treturn true;\n\t}\n\n\t/*if (str.length > 1) {\n\t\tfor (var i=0;i<str.length;i++) {\n\t\t\tvar res = Utils.Text.Encoding.GSM0338.isRepresentable(str.charCodeAt());\n\t\t}\n\t}*/\n\treturn false;\n};\n\nUtils.Text.Encoding.GSM0338.isCharRepresentable = function(character) {\n\tvar basicPosition = Utils.Text.Encoding.GSM0338.basicSet.indexOf(character);\n\n\tif (basicPosition >= 0) {\n        return true;\n    }\n\n    var extendedPosition = Utils.Text.Encoding.GSM0338.extendedSet.indexOf(character);\n\n\tif (extendedPosition >= 0) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nUtils.Buffer = {};\n\nUtils.Buffer.create = function(intArray) {\n\tvar buffer = {\n\t\tdata: intArray,\n\t\tlength: intArray.length,\n\t\tposition:0,\n\t\tcap:function() {\n\t\t\treturn this.length - this.position;\n\t\t},\n\t\treadByte:function() {\n\t\t\tvar b = this.data[this.position];\n\t\t\tthis.position++;\n\t\t\t\n\t\t\treturn b;\n\t\t},\n\t\treadShort:function() {\n\t\t  var res = 0;\n\t\t\tfor (var i=0;i<2;i++) {\n\t\t\t\tres = (res << 8) + this.readByte();\n\t\t\t}\n\n\t\t\treturn res;\t\n\t\t},\n\t\treadInt:function() {\n\t\t\tvar res = 0;\n\t\t\tfor (var i=0;i<4;i++) {\n\t\t\t\tres = (res << 8) + this.readByte();\n\t\t\t}\n\n\t\t\treturn res;\n\t\t}\n\t};\n\t\n\treturn buffer;\n};\n\nUtils.Bytes = {};\n\nUtils.Bytes.readLong=function(array) {\n\tvar res = 0;\n\tfor (let i=0;i<4;i++) {\n\t\tres = (res << 8) + array[i];\n\t}\n\t\n\treturn res;\n}\n\nUtils.Smpp = {};\n\nUtils.Smpp.DataTypes = {};\n\nUtils.Smpp.DataTypes.Integer = {\n\tread:function(buf) {\n\t\treturn buf.readInt();\n\t}\n};\nUtils.Smpp.DataTypes.CString = {};\nUtils.Smpp.DataTypes.String = {};\nUtils.Smpp.DataTypes.Integer = {};\n/*\nvar hexDumpStr=\"0000007500000004000000000000000200010131393438000000313233343536373839000000000000000003000568656C6C6F000500010000070001010006000101000800020000042400000019000100020F000101020E0001010421000101000D000100000F000101000E000101001000020000\";\n\nvar intArr = Utils.Text.hexToIntArray(hexDumpStr);\n\nvar buf = Utils.Buffer.create(intArr);\n\nconsole.log(\"Length:\" + buf.readInt() +\":\" + buf.cap());\nconsole.log(\"Command ID:\" + buf.readInt() +\":\" + buf.cap());\nconsole.log(\"Status:\" + buf.readInt() +\":\" + buf.cap());\nconsole.log(\"Sequence number:\"+buf.readInt() +\":\" + buf.cap());*/\n\n\nexport default Utils;","import React, {Component, Fragment} from 'react';\nimport SmppDecoder from 'js-smpp';\nimport SimpleHexDump from \"../HexDump/SimpleHexDump\";\nimport { Base64 } from 'js-base64';\n\nclass SmppDecoderPage extends Component {\n    constructor(props){\n        super(props);\n\n        let state = {\n            value:null,\n            buffer:null,\n            result:null,\n            meta: null,\n            settings:{\n                dissectingFieldsColors:false\n            }\n        };\n\n        this.currentGroup = 0;\n\n        let decodeState = {};\n\n        if (window.location.hash !== null ) {\n            let hash = window.location.hash.substr(1);\n\n            //let buf = Buffer.from(atob(hash),\"hex\");\n            let buf = Buffer.from(hash, \"hex\");\n\n            decodeState = this.doDecode(buf.toString(\"hex\"));\n        }\n\n        this.state = Object.assign({}, state, decodeState);\n\n        this.change = this.change.bind(this);\n\n        this.changeSettings = this.changeSettings.bind(this);\n    }\n    changeSettings(key, value) {\n        let oldState = this.state;\n\n        oldState.settings[key] = value;\n\n        this.setState(Object.assign({}, oldState));\n    }\n    renderFieldValue(value) {\n        if (typeof value === \"object\") {\n            let result = [];\n\n            for (let i in value) {\n                result.push(<><dt>{i}</dt><dd>{value[i]}</dd></>);\n            }\n\n            return result;\n        } else {\n            return <>{value}</>;\n        }\n    }\n    render() {\n        let decodedData = null;\n        let notifications = null;\n\n        if (this.state.result !== null) {\n            this.currentGroup = 0;\n\n            let self = this;\n\n            decodedData =\n                Object\n                    .keys(this.state.result.data)\n                    .map(\n                        (key) => {\n                            let decodedField = this.state.result.data[key];\n                            let className = \"\";\n\n                            if (self.state.settings.dissectingFieldsColors) {\n                                className = \"color-group\" + self.nextGroup();\n                            }\n\n                            return (<tr key={decodedField.name} className={className}>\n                                <td>\n                                    <span className=\"text-xs\">no</span>\n                                </td>\n                                <td>\n                                    <div>{decodedField.name}</div>\n                                    {\n                                        typeof decodedField.specRef !== \"undefined\"\n                                        && decodedField.specRef!==\"\" && <div><small>ref: <span>{decodedField.specRef}</span></small></div>\n                                    }\n                                    <small>Offset: {decodedField.offset}</small>&nbsp;\n                                    <small>Length: {decodedField.length}</small>\n                                </td>\n                                <td>\n                                    <SimpleHexDump\n                                        hexdump={decodedField.buffer}\n                                        showOffset={false}\n                                        showCharacters={false}\n                                    />\n                                </td>\n                                <td>{this.renderFieldValue(decodedField.value.interpreted)}</td>\n                                <td></td>\n                            </tr>);\n                        }\n                    );\n\n            notifications =\n                this\n                    .state\n                    .result\n                    .notifications\n                    .getAll()\n                    .map(\n                        ({tag, body, offset}) => <li key={\"notification\"+offset}>{body} at offset:{offset}</li>\n                    );\n        }\n\n        return (\n            <div>\n                <h1>PDU Hex dump</h1>\n                <textarea\n                    style={{width:\"100%\"}}\n                    rows={8}\n                    placeholder=\"Введите HEX-dump SMPP PDU\"\n                    defaultValue={this.state.value}\n                    onChange={this.change}\n                />\n                <div>\n                    <a href={window.location}>Link to this page</a>\n                </div>\n                {\n                    this.state.buffer &&\n                    <Fragment>\n                        <h1>Hex dump representation</h1>\n                        <SimpleHexDump hexdump={this.state.buffer} groups={this.state.result.data} />\n                    </Fragment>\n                }\n\n                <h1>Decoded data</h1>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        value={this.state.settings.dissectingFieldsColors}\n                        onChange={(e)=>this.changeSettings(\"dissectingFieldsColors\", e.target.checked)}\n                    />Добавить цветовое разделение полей\n                </label>\n                {decodedData !== null &&\n                    <Fragment>\n                        <ol>{notifications}</ol>\n                        <table className=\"table table-stripped table-sm\">\n                            <thead>\n                                <tr>\n                                    <th title=\"Validation\">Val</th>\n                                    <th title=\"Field name and specification reference\">Field</th>\n                                    <th title=\"Hex dump representation\">Hex</th>\n                                    <th title=\"Interpreted value\">Value</th>\n                                    <th title=\"Comment\">Comment</th>\n                                </tr>\n                            </thead>\n                            <tbody>{decodedData}</tbody>\n                        </table>\n                    </Fragment>\n\n                }\n            </div>\n        );\n    }\n    nextGroup() {\n        if (this.currentGroup >= 20) {\n            this.currentGroup = 1;\n        } else {\n            this.currentGroup++;\n        }\n\n        return this.currentGroup;\n    }\n    doDecode(value) {\n        let decoder = new SmppDecoder();\n\n        value = value.replace(\"~[^0-9a-fA-F]~gim\", \"\").trim();\n\n        if (value.length % 2 === 0) {\n            let buffer = Buffer.from(value, \"hex\");\n\n            try {\n                let result =\n                    decoder\n                        .decode(buffer, true, \"SUBMIT_SM\");\n\n                return ({value, buffer, result});\n            } catch (e) {\n                return ({value, buffer:null, result: null});\n            }\n        }\n    }\n    change(e) {\n        let state = this.doDecode(e.target.value);\n\n        if (state.buffer !== null) {\n            ///window.location.hash = btoa(state.buffer.toString(\"hex\"));\n            window.location.hash = state.buffer.toString(\"hex\");\n        }\n\n        this.setState(Object.assign({}, this.state, state));\n    }\n}\n\nexport default SmppDecoderPage;","module.exports = require('./src/SmppDecoder');","import React, {Component} from 'react';\nimport SimpleHexDump from \"../../HexDump/SimpleHexDump\";\n\nclass TestHexDumpPage extends Component {\n    render() {\n        let buf =\n            Buffer\n                .from(\n                    [\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                    ]);\n\n        console.log(buf.byteLength);\n\n        let groups = [\n            {offset: 0, length: 1, name:\"serviceType\"},\n            {offset: 1, length: 1, name:\"sourceAddrTon\"},\n            {offset: 2, length: 1, name:\"sourceAddrNpi\"},\n            {offset: 3, length: 5, name:\"sourceAddr\"},\n        ];\n\n        return (\n            <div>\n                <SimpleHexDump\n                    hexdump={buf}\n                    groups={groups}\n                />\n\n                <table>\n                    <tr>\n                        <td colSpan=\"3\">\n                            <span style={{fontSize:\"10px\"}}>\n                                <button className=\"btn btn-xs btn-primary\">Show offset</button>\n                                <button className=\"btn btn-xs btn-primary\">Show dump</button>\n                                <button className=\"btn btn-xs btn-primary\">Show characters</button>\n                            </span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style={{paddingRight:\"10px\"}}>\n                            <code>\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                            </code>\n                        </td>\n                        <td style={{paddingLeft:\"5px\",paddingRight:\"5px\"}}>\n                            <code>\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 <span className=\"color-group1\" title=\"serviceType: sms\">00 00 00 00 00 00 00<br />\n                                00 00 00 <span title=\"udh\" className=\"color-group2\">00 00 00 00 00</span> 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00</span> 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                            </code>\n                        </td>\n                        <td style={{paddingLeft:\"10px\"}}>\n                            <code>\n                                A B C D E F G H I J K L<br />\n                                A B C D <span className=\"color-group1\" title=\"serviceType: sms\">E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J</span> K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                            </code>\n                        </td>\n\n                    </tr>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default TestHexDumpPage;","import React, {Component} from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport * as ROUTES from '../routes';\n\nclass Menu extends Component {\n    render() {\n        return (\n            <div className=\"sidebar-sticky\">\n                <ul className=\"nav flex-column\">\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" exact={true} to={ROUTES.PATH_HOME}>\n                            Главная\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_HEX_DUMP}>\n                            Hex-dump\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_SMPP_DECODE}>\n                            Smpp-decoder\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING}>\n                            encodings\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING_GSM}>\n                            Gsm encoding\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING_LATIN1}>\n                            Latin-1 encoding\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING_ASCII}>\n                            Ascii encoding\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING_UCS2}>\n                            Ucs2 encoding\n                        </NavLink>\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Menu;","import React, {Component} from 'react';\n\nclass HomePage extends Component {\n\n\n    render() {\n        return (\n            <div>\n\n            </div>\n        );\n    }\n}\n\nexport default HomePage;","import React, {Component} from 'react';\n\nclass HexDumpPage extends Component {\n    render() {\n        return (\n            <div>\n                hex dump\n            </div>\n        );\n    }\n}\n\nexport default HexDumpPage;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass EncodingsPage extends Component {\n    render() {\n        return (\n            <div>\n                {this.props.encodingName}\n                <Row from={1} to={10} />\n            </div>\n        );\n    }\n}\n\nfunction Row(params) {\n    //console.log(arguments);\n\n    return <div>Ok {params.from} to {params.to}</div>;\n}\n\nEncodingsPage.propTypes = {\n    encodingName: PropTypes.string.isRequired,\n};\n\nexport default EncodingsPage;\n\nexport const encodingParameterizedPage = ({match}) => <EncodingsPage encodingName={match.params.encodingName} />;","export default {\n  items: [\n    {\n      name: 'Главная',\n      url: '/',\n      icon: 'icon-speedometer',\n      exact: true,\n    },\n    {\n      name: 'Hex-dump',\n      url: '/hex-dump',\n      icon: 'icon-speedometer',\n    },\n    {\n      name: 'Smpp decoder',\n      url: '/smpp-decode',\n      icon: 'icon-speedometer',\n    },\n    {\n      name: 'Encodings',\n      url: '/encoding',\n      icon: 'icon-speedometer',\n      /*children: [\n\n      ]*/\n    },\n  ]\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport Utils from \"./Utils\";\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Menu from \"./components/Menu\";\nimport SmppDecoderPage from \"./pages/SmppDecoderPage\";\nimport * as ROUTES from \"./routes\";\nimport HomePage from \"./pages/HomePage\";\nimport HexDumpPage from \"./pages/HexDumpPage\";\nimport {encodingParameterizedPage} from \"./pages/EncodingsPage\";\nimport TestHexDumpPage from \"./pages/test/TestHexDumpPage\";\nimport {AppSidebar, AppSidebarNav, AppHeader, AppFooter } from  \"@coreui/react\";\nimport \"./App.scss\";\nimport { Container, Card, CardBody } from 'reactstrap';\nimport navConfig from \"./_nav\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        var hash = window.location.hash;\n\n        var oldText=\"\";\n\n        if (hash != null && hash.length>1) {\n            oldText = Utils.Text.Hex.cleanup(hash.substr(1));\n        }\n\n        this.state = {\n            text:oldText,\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n    onChange(text) {\n        this.setState({text: text});\n\n        if (text.length <= 2000) {\n            window.location.hash = '#' + text;\n        }\n    }\n    render() {\n        return (\n            <Router basename={`${process.env.PUBLIC_URL}`}>\n                <div className=\"app\">\n                    {/*<AppHeader fixed>\n\n                    </AppHeader>*/}\n                    <div className=\"app-body\">\n                        <AppSidebar fixed display=\"lg\">\n                            {/*<Menu/>*/}\n                            <AppSidebarNav navConfig={navConfig}/>\n                        </AppSidebar>\n                        <main role=\"main\" className=\"main\">\n                            <Container fluid className=\"p-1\">\n                                <Card>\n                                    <CardBody>\n                                        <Switch>\n                                            <Route exact path={ROUTES.PATH_HOME} component={HomePage} />\n                                            <Route path={ROUTES.PATH_HEX_DUMP} component={HexDumpPage} />\n                                            <Route path={ROUTES.PATH_SMPP_DECODE} component={SmppDecoderPage} />\n\n                                            <Route\n                                                path={ROUTES.PATH_ENCODING + \"/:encodingName\"}\n                                                component={encodingParameterizedPage}\n                                            />\n\n                                            <Route\n                                                path=\"/test/hexdump\"\n                                                component={TestHexDumpPage}\n                                            />\n                                        </Switch>\n                                    </CardBody>\n                                </Card>\n                            </Container>\n                        </main>\n                    </div>\n                    <AppFooter>\n                        Footer goes here\n                    </AppFooter>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;","export const PATH_HOME = \"/\";\nexport const PATH_HEX_DUMP = \"/hex-dump\";\nexport const PATH_SMPP_DECODE = \"/smpp-decode\";\n\nexport const PATH_ENCODING = \"/encoding\";\n\nexport const PATH_ENCODING_GSM = PATH_ENCODING + \"/gsm\";\nexport const PATH_ENCODING_ASCII = PATH_ENCODING + \"/ascii\";\nexport const PATH_ENCODING_LATIN1 = PATH_ENCODING + \"/latin1\";\nexport const PATH_ENCODING_UCS2 = PATH_ENCODING + \"/ucs2\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Encoding =\n/*#__PURE__*/\nfunction () {\n  function Encoding() {\n    _classCallCheck(this, Encoding);\n  }\n\n  _createClass(Encoding, [{\n    key: \"isRepresentable\",\n    value: function isRepresentable(buffer) {\n      throw new Error(\"Unimplmented method\");\n    }\n  }]);\n\n  return Encoding;\n}();\n\nexport default Encoding;","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Encoding from \"./Encoding\";\n\nvar UCS2Encoding =\n/*#__PURE__*/\nfunction (_Encoding) {\n  _inherits(UCS2Encoding, _Encoding);\n\n  function UCS2Encoding() {\n    _classCallCheck(this, UCS2Encoding);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(UCS2Encoding).apply(this, arguments));\n  }\n\n  _createClass(UCS2Encoding, [{\n    key: \"convert\",\n    value: function convert(buffer) {\n      var result = [];\n\n      for (var i = 0; i < buffer.length; i += 2) {\n        var code0 = buffer[i];\n        var code1 = buffer[i + 1];\n        result.push(String.fromCharCode(code0 * 256 + code1));\n      }\n\n      return result.join(\"\");\n    }\n  }]);\n\n  return UCS2Encoding;\n}(Encoding);\n\nexport default UCS2Encoding;","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Encoding from \"./Encoding\";\n\nvar GsmEncoding =\n/*#__PURE__*/\nfunction (_Encoding) {\n  _inherits(GsmEncoding, _Encoding);\n\n  function GsmEncoding() {\n    var _this;\n\n    _classCallCheck(this, GsmEncoding);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GsmEncoding).call(this));\n    _this.ESCAPE_CHARACTER = 0x1B;\n    _this.basicCharset = ['@', '£', '$', '¥', 'è', 'é', 'ù', 'ì', 'ò', 'Ç', 'LF', 'Ø', 'ø', '\\n', 'Å', 'å', 'Δ', '_', 'Φ', 'Γ', 'Λ', 'Ω', 'Π', 'Ψ', 'Σ', 'Θ', 'Ξ', 'ESC', 'Æ', 'æ', 'ß', 'É', ' ', '!', '\"', '#', '¤', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '¡', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Ä', 'Ö', 'Ñ', 'Ü', '§', '¿', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'ä', 'ö', 'ñ', 'ü', 'à'];\n    _this.extendedSet = ['undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'FF', 'undefined', 'undefined', 'CR2', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', '^', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'SS2', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', '{', '}', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', '\\\\', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', '[', '~', ']', 'undefined', '|', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', '€', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined', 'undefined'];\n    return _this;\n  }\n\n  _createClass(GsmEncoding, [{\n    key: \"isRepresentable\",\n    value: function isRepresentable(buffer) {\n      for (var i = 0; i < buffer.length; i++) {\n        var code = buffer[i];\n\n        if (code == this.ESCAPE_CHARACTER && i < buffer.length - 1) {\n          var code2 = buffer[i + 1];\n\n          if (typeof this.extendedSet[code2] == \"undefined\" || this.extendedSet[code2] == \"undefined\") {\n            return false;\n          }\n\n          i++;\n        } else if (code < 0 || code > 0x7F) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"convert\",\n    value: function convert(buffer) {\n      if (this.isRepresentable(buffer)) {\n        var result = [];\n\n        for (var i = 0; i < buffer.length; i++) {\n          var code = buffer[i];\n\n          if (code == this.ESCAPE_CHARACTER) {\n            var code2 = buffer[i + 1];\n            result.push(this.extendedSet[code2]);\n            i++;\n          } else {\n            result.push(this.basicCharset[code]);\n          }\n        }\n\n        return result.join(\"\");\n      } else {\n        throw new Error(\"Buffer is not representable\");\n      }\n    }\n  }]);\n\n  return GsmEncoding;\n}(Encoding);\n\nexport default GsmEncoding;","// Base SMPP HEADER\nimport UCS2Encoding from \"./UCS2Encoding.js\";\nimport GsmEncoding from \"./GsmEncoding\";\nexport var SMPP_HEADER = {\n  packetLength: {\n    pattern: \"packetLength:32/integer\",\n    fieldLength: 4,\n    specRef: \"3.2.1\"\n  },\n  commandId: {\n    pattern: \"commandId:32/integer\",\n    interpret: function interpret(v) {\n      for (var cmdId in SMPP_COMMANDS_DESCRIPTIONS) {\n        if (SMPP_COMMANDS_DESCRIPTIONS[cmdId].commandId == v) {\n          return cmdId;\n        }\n      }\n\n      return \"unknown command id\";\n    },\n    fieldLength: 4,\n    specRef: \"3.2.1\"\n  },\n  status: {\n    pattern: \"status:32/integer\",\n    interpret: function interpret(v) {\n      // https://github.com/twitter-archive/cloudhopper-smpp/blob/master/src/main/java/com/cloudhopper/smpp/SmppConstants.java#L355\n      return \"OK\";\n    },\n    fieldLength: 4,\n    specRef: \"3.2.1\"\n  },\n  sequenceNumber: {\n    pattern: \"sequenceNumber:32/integer\",\n    fieldLength: 4,\n    specRef: \"3.2.1\"\n  }\n};\nexport var COMMAND_ID_GENERIC_NACK = \"GENERIC_NACK\";\nexport var COMMAND_ID_BIND_RECEIVER = \"BIND_RECEIVER\";\nexport var COMMAND_ID_BIND_RECEIVER_RESP = \"BIND_RECEIVER_RESP\";\nexport var COMMAND_ID_BIND_TRANSMITTER = \"BIND_TRANSMITTER\";\nexport var COMMAND_ID_BIND_TRANSMITTER_RESP = \"BIND_TRANSMITTER_RESP\";\nexport var COMMAND_ID_QUERY_SM = \"QUERY_SM\";\nexport var COMMAND_ID_QUERY_SM_RESP = \"QUERY_SM_RESP\";\nexport var COMMAND_ID_SUBMIT_SM = \"SUBMIT_SM\";\nexport var COMMAND_ID_SUBMIT_SM_RESP = \"SUBMIT_SM_RESP\";\nexport var COMMAND_ID_DELIVER_SM = \"DELIVER_SM\";\nexport var COMMAND_ID_DELIVER_SM_RESP = \"DELIVER_SM_RESP\";\nexport var COMMAND_ID_UNBIND = \"UNBIND\";\nexport var COMMAND_ID_UNBIND_RESP = \"UNBIND_RESP\";\nexport var COMMAND_ID_REPLACE_SM = \"REPLACE_SM\";\nexport var COMMAND_ID_REPLACE_SM_RESP = \"REPLACE_SM_RESP\";\nexport var COMMAND_ID_CANCEL_SM = \"CANCEL_SM\";\nexport var COMMAND_ID_CANCEL_SM_RESP = \"CANCEL_SM_RESP\";\nexport var COMMAND_ID_BIND_TRANSCEIVER = \"BIND_TRANSCEIVER\";\nexport var COMMAND_ID_BIND_TRANSCEIVER_RESP = \"BIND_TRANSCEIVER_RESP\";\nexport var COMMAND_ID_OUTBIND = \"OUTBIND\";\nexport var COMMAND_ID_ENQUIRE_LINK = \"ENQUIRE_LINK\";\nexport var COMMAND_ID_ENQUIRE_LINK_RESP = \"ENQUIRE_LINK_RESP\";\nexport var COMMAND_ID_ALERT_NOTIFICATION = \"ALERT_NOTIFICATION\";\nexport var COMMAND_ID_DATA_SM = \"DATA_SM\";\nexport var COMMAND_ID_DATA_SM_RESP = \"DATA_SM_RESP\";\nexport var SMPP_COMMAND_IDS = [COMMAND_ID_GENERIC_NACK, COMMAND_ID_BIND_RECEIVER, COMMAND_ID_BIND_RECEIVER_RESP, COMMAND_ID_BIND_TRANSMITTER, COMMAND_ID_BIND_TRANSMITTER_RESP, COMMAND_ID_QUERY_SM, COMMAND_ID_QUERY_SM_RESP, COMMAND_ID_SUBMIT_SM, COMMAND_ID_SUBMIT_SM_RESP, COMMAND_ID_DELIVER_SM, COMMAND_ID_DELIVER_SM_RESP, COMMAND_ID_UNBIND, COMMAND_ID_UNBIND_RESP, COMMAND_ID_REPLACE_SM, COMMAND_ID_REPLACE_SM_RESP, COMMAND_ID_CANCEL_SM, COMMAND_ID_CANCEL_SM_RESP, COMMAND_ID_BIND_TRANSCEIVER, COMMAND_ID_BIND_TRANSCEIVER_RESP, COMMAND_ID_OUTBIND, COMMAND_ID_ENQUIRE_LINK, COMMAND_ID_ENQUIRE_LINK_RESP, COMMAND_ID_ALERT_NOTIFICATION, COMMAND_ID_DATA_SM, COMMAND_ID_DATA_SM_RESP];\nexport var SMPP_COMMANDS_DESCRIPTIONS = {\n  \"GENERIC_NACK\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x80000000,\n    \"pattern\": null\n  },\n  \"BIND_RECEIVER\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000001,\n    \"pattern\": {\n      systemId: \"systemId:16/string-z\",\n      password: \"password:9/string-z\",\n      systemType: \"systemType:13/string-z\",\n      interfaceVersion: \"interfaceVersion:8/integer\",\n      addrTon: \"addrTon:8/integer\",\n      addrNpi: \"addrNpi:8/integer\",\n      addressRange: \"addressRange:41/string-z\"\n    }\n  },\n  \"BIND_RECEIVER_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000001,\n    \"pattern\": {\n      systemId: \"systemId:16/string-z\",\n      tlvs: \"tlvs/binary\"\n    }\n  },\n  \"BIND_TRANSMITTER\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000002,\n    \"pattern\": {\n      systemId: \"systemId:16/string-z\",\n      password: \"password:9/string-z\",\n      systemType: \"systemType:13/string-z\",\n      interfaceVersion: \"interfaceVersion:8/integer\",\n      addrTon: \"addrTon:8/integer\",\n      addrNpi: \"addrNpi:8/integer\",\n      addressRange: \"addressRange:41/string-z\"\n    }\n  },\n  \"BIND_TRANSMITTER_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000002,\n    \"pattern\": {\n      systemId: \"systemId:16/string-z\",\n      tlvs: \"tlvs/binary\"\n    }\n  },\n  \"QUERY_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000003,\n    \"pattern\": {\n      messageId: \"messageId:65/string-z\",\n      sourceAddrTon: \"sourceAddrTon:8/integer\",\n      sourceAddrNpi: \"sourceAddrNpi:8/integer\",\n      sourceAddr: \"sourceAddr:21/string-z\"\n    }\n  },\n  \"QUERY_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000003,\n    \"pattern\": {\n      messageId: \"messageId:65/string-z\",\n      finalDate: \"finalDate:18/string-z\",\n      messageState: \"messageState:8/integer\",\n      errorCode: \"errorCode:8/integer\"\n    }\n  },\n  \"SUBMIT_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000004,\n    \"specRef\": \"4.4.1\",\n    \"pattern\": {\n      serviceType: {\n        pattern: \"serviceType:6/string-z\",\n        specRef: \"5.2.11\"\n      },\n      sourceAddrTon: {\n        pattern: \"sourceAddrTon:8/integer\",\n        specRef: \"5.2.5\"\n      },\n      sourceAddrNpi: {\n        pattern: \"sourceAddrNpi:8/integer\",\n        specRef: \"5.2.6\"\n      },\n      sourceAddr: {\n        pattern: \"sourceAddr:21/string-z\",\n        specRef: \"5.2.8\"\n      },\n      destAddrTon: {\n        pattern: \"destAddrTon:8/integer\",\n        specRef: \"5.2.5\"\n      },\n      destAddrNpi: {\n        pattern: \"destAddrNpi:8/integer\",\n        specRef: \"5.2.6\"\n      },\n      destinationAddr: {\n        pattern: \"destinationAddr:21/string-z\",\n        specRef: \"5.2.9\"\n      },\n      esmClass: {\n        pattern: \"esmClass:8/integer\",\n        specRef: \"5.2.12\"\n      },\n      protocolId: {\n        pattern: \"protocolId:8/integer\",\n        specRef: \"5.2.13\"\n      },\n      priorityFlag: {\n        pattern: \"priorityFlag:8/integer\",\n        specRef: \"5.2.14\"\n      },\n      scheduleDeliveryTime: {\n        pattern: \"scheduleDeliveryTime:17/string-z\",\n        specRef: \"5.2.15\"\n      },\n      validityPeriod: {\n        pattern: \"validityPeriod:17/string-z\",\n        specRef: \"5.2.16\"\n      },\n      registeredDelivery: {\n        pattern: \"registeredDelivery:8/integer\",\n        specRef: \"5.2.17\"\n      },\n      replaceIfPresentFlag: {\n        pattern: \"replaceIfPresentFlag:8/integer\",\n        specRef: \"5.2.18\"\n      },\n      dataCoding: {\n        pattern: \"dataCoding:8/integer\",\n        specRef: \"5.2.19\"\n      },\n      smDefaultMsgId: {\n        pattern: \"smDefaultMsgId:8/integer\",\n        specRef: \"5.2.20\"\n      },\n      smLength: {\n        pattern: \"smLength:8/integer\",\n        specRef: \"5.2.21\"\n      },\n      shortMessage: {\n        pattern: \"shortMessage:smLength/binary\",\n        specRef: \"5.2.22\",\n        interpret: function interpret(value, ctx) {\n          if ((ctx.boundVars.esmClass & ESM_CLASS_UDHI_MASK) > 0) {\n            var udhLength = value[0];\n            value = value.slice(udhLength + 1);\n          }\n\n          var encodings = {\n            \"ucs2\": new UCS2Encoding(),\n            \"gsm\": new GsmEncoding()\n          };\n          var result = {};\n\n          for (var encName in encodings) {\n            var encoding = encodings[encName];\n\n            try {\n              result[encName] = encoding.convert(value);\n            } catch (e) {//\n            }\n          }\n\n          return result;\n        }\n      },\n      tlvs: {\n        pattern: \"tlvs/binary\"\n      }\n    }\n  },\n  \"SUBMIT_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000004,\n    \"specRef\": \"4.4.2\",\n    \"pattern\": [\"messageId:65/string-z\"]\n  },\n  \"DELIVER_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000005,\n    \"pattern\": [\"serviceType:6/string-z\", \"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"destAddrTon:8/integer\", \"destAddrNpi:8/integer\", \"destinationAddr:21/string-z\", \"esmClass:8/integer\", \"protocolId:8/integer\", \"priorityFlag:8/integer\", \"scheduleDeliveryTime:17/string-z\", \"validityPeriod:17/string-z\", \"registeredDelivery:8/integer\", \"replaceIfPresentFlag:8/integer\", \"dataCoding:8/integer\", \"smDefaultMsgId:8/integer\", \"smLength:8/integer\", \"shortMessage:smLength/binary\", \"tlvs/binary\"]\n  },\n  \"DELIVER_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000005,\n    \"pattern\": [\"messageId:65/string-z\"]\n  },\n  \"UNBIND\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000006,\n    \"pattern\": null\n  },\n  \"UNBIND_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000006,\n    \"pattern\": null\n  },\n  \"REPLACE_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000007,\n    \"pattern\": [\"messageId:65/string-z\", \"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"scheduleDeliveryTime:17/string-z\", \"validityPeriod:17/string-z\", \"registeredDelivery:8/integer\", \"smDefaultMsgId:8/integer\", \"smLength:8/integer\", \"shortMessage:smLength/binary\"]\n  },\n  \"REPLACE_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000007,\n    \"pattern\": null\n  },\n  \"CANCEL_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000008,\n    \"pattern\": [\"serviceType:6/string-z\", \"messageId:65/string-z\", \"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"destAddrTon:8/integer\", \"destAddrNpi:8/integer\", \"destinationAddr:21/string-z\"]\n  },\n  \"CANCEL_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000008,\n    \"pattern\": null\n  },\n  \"BIND_TRANSCEIVER\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000009,\n    \"pattern\": [\"systemId:16/string-z\", \"password:9/string-z\", \"systemType:13/string-z\", \"interfaceVersion:8/integer\", \"addrTon:8/integer\", \"addrNpi:8/integer\", \"addressRange:41/string-z\"]\n  },\n  \"BIND_TRANSCEIVER_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000009,\n    \"pattern\": [\"systemId:16/string-z\", \"tlvs/binary\"]\n  },\n  \"OUTBIND\": {\n    \"mtid\": \"request\",\n    \"example\": \"00000000B000000000000000148656c6c6f0031323300\",\n    \"commandId\": \"0000000B\",\n    \"pattern\": [\"systemId:16/string-z\", \"password:9/string-z\"]\n  },\n  \"ENQUIRE_LINK\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000015,\n    \"pattern\": null\n  },\n  \"ENQUIRE_LINK_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000015,\n    \"pattern\": null\n  },\n  \"ALERT_NOTIFICATION\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000102,\n    \"pattern\": [\"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"esmeAddrTon:8/integer\", \"esmeAddrNpi:8/integer\", \"esmeAddr:65/string-z\", \"tlvs/binary\"]\n  },\n  \"DATA_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000103,\n    \"pattern\": [\"serviceType:6/string-z\", \"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"destAddrTon:8/integer\", \"destAddrNpi:8/integer\", \"destinationAddr:21/string-z\", \"esmClass:8/integer\", \"registeredDelivery:8/integer\", \"dataCoding:8/integer\", \"tlvs/binary\"]\n  },\n  \"DATA_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000103,\n    \"pattern\": [\"messageId:65/string-z\", \"tlvs/binary\"]\n  }\n}; // TLV TAGS\n// @see: https://github.com/fizzed/cloudhopper-smpp/blob/master/src/main/java/com/cloudhopper/smpp/SmppConstants.java#L109-L224\n//\n// Optional TLV Tags\n//\n\nexport var TAG_SOURCE_TELEMATICS_ID = 0x0010;\nexport var TAG_PAYLOAD_TYPE = 0x0019;\nexport var TAG_PRIVACY_INDICATOR = 0x0201;\nexport var TAG_USER_MESSAGE_REFERENCE = 0x0204;\nexport var TAG_USER_RESPONSE_CODE = 0x0205;\nexport var TAG_SOURCE_PORT = 0x020A;\nexport var TAG_DESTINATION_PORT = 0x020B;\nexport var TAG_SAR_MSG_REF_NUM = 0x020C;\nexport var TAG_LANGUAGE_INDICATOR = 0x020D;\nexport var TAG_SAR_TOTAL_SEGMENTS = 0x020E;\nexport var TAG_SAR_SEGMENT_SEQNUM = 0x020F;\nexport var TAG_SOURCE_SUBADDRESS = 0x0202;\nexport var TAG_DEST_SUBADDRESS = 0x0203;\nexport var TAG_CALLBACK_NUM = 0x0381;\nexport var TAG_MESSAGE_PAYLOAD = 0x0424; // SC Interface Version\n\nexport var TAG_SC_INTERFACE_VERSION = 0x0210; // Display Time\n\nexport var TAG_DISPLAY_TIME = 0x1201; // Validity Information\n\nexport var TAG_MS_VALIDITY = 0x1204; // DPF Result\n\nexport var TAG_DPF_RESULT = 0x0420; // Set DPF\n\nexport var TAG_SET_DPF = 0x0421; // MS Availability Status\n\nexport var TAG_MS_AVAIL_STATUS = 0x0422; // Network Error Code\n\nexport var TAG_NETWORK_ERROR_CODE = 0x0423; // Delivery Failure Reason\n\nexport var TAG_DELIVERY_FAILURE_REASON = 0x0425; // More Messages to Follow\n\nexport var TAG_MORE_MSGS_TO_FOLLOW = 0x0426; // Message State\n\nexport var TAG_MSG_STATE = 0x0427; // Congestion State\n\nexport var TAG_CONGESTION_STATE = 0x0428; // Callback Number Presentation  Indicator\n\nexport var TAG_CALLBACK_NUM_PRES_IND = 0x0302; // Callback Number Alphanumeric Tag\n\nexport var TAG_CALLBACK_NUM_ATAG = 0x0303; // Number of messages in Mailbox\n\nexport var TAG_NUM_MSGS = 0x0304; // SMS Received Alert\n\nexport var TAG_SMS_SIGNAL = 0x1203; // Message Delivery Alert\n\nexport var TAG_ALERT_ON_MSG_DELIVERY = 0x130C; // ITS Reply Type\n\nexport var TAG_ITS_REPLY_TYPE = 0x1380; // ITS Session Info\n\nexport var TAG_ITS_SESSION_INFO = 0x1383; // USSD Service Op\n\nexport var TAG_USSD_SERVICE_OP = 0x0501; // Broadcast Channel Indicator\n\nexport var TAG_BROADCAST_CHANNEL_INDICATOR = 0x0600; // Broadcast Content Type\n\nexport var TAG_BROADCAST_CONTENT_TYPE = 0x0601; // Broadcast Content Type Info\n\nexport var TAG_BROADCAST_CONTENT_TYPE_INFO = 0x0602; // Broadcast Message Class\n\nexport var TAG_BROADCAST_MESSAGE_CLASS = 0x0603; // Broadcast Rep Num\n\nexport var TAG_BROADCAST_REP_NUM = 0x0604; // Broadcast Frequency Interval\n\nexport var TAG_BROADCAST_FREQUENCY_INTERVAL = 0x0605; // Broadcast Area Identifier\n\nexport var TAG_BROADCAST_AREA_IDENTIFIER = 0x0606; // Broadcast Error Status\n\nexport var TAG_BROADCAST_ERROR_STATUS = 0x0607; // Broadcast Area Success\n\nexport var TAG_BROADCAST_AREA_SUCCESS = 0x0608; // Broadcast End Time\n\nexport var TAG_BROADCAST_END_TIME = 0x0609; // Broadcast Service Group\n\nexport var TAG_BROADCAST_SERVICE_GROUP = 0x060A; // Source Network Id\n\nexport var TAG_SOURCE_NETWORK_ID = 0x060D; // Dest Network Id\n\nexport var TAG_DEST_NETWORK_ID = 0x060E; // Source Node Id\n\nexport var TAG_SOURCE_NODE_ID = 0x060F; // Dest Node Id\n\nexport var TAG_DEST_NODE_ID = 0x0610; // Billing Identification\n\nexport var TAG_BILLING_IDENTIFICATION = 0x060B; // Originating MSC Address\n\nexport var TAG_ORIG_MSC_ADDR = 0x8081; // Destination MSC Address\n\nexport var TAG_DEST_MSC_ADDR = 0x8082; // Destination Address Subunit\n\nexport var TAG_DEST_ADDR_SUBUNIT = 0x0005; // Destination Network Type\n\nexport var TAG_DEST_NETWORK_TYPE = 0x0006; // Destination Bearer Type\n\nexport var TAG_DEST_BEAR_TYPE = 0x0007; // Destination Telematics ID\n\nexport var TAG_DEST_TELE_ID = 0x0008; // Source Address Subunit\n\nexport var TAG_SOURCE_ADDR_SUBUNIT = 0x000D; // Source Network Type\n\nexport var TAG_SOURCE_NETWORK_TYPE = 0x000E; // Source Bearer Type\n\nexport var TAG_SOURCE_BEAR_TYPE = 0x000F; // Source Telematics ID\n\nexport var TAG_SOURCE_TELE_ID = 0x0010; // QOS Time to Live\n\nexport var TAG_QOS_TIME_TO_LIVE = 0x0017; // Additional Status Info Text\n\nexport var TAG_ADD_STATUS_INFO = 0x001D; // Receipted Message ID\n\nexport var TAG_RECEIPTED_MSG_ID = 0x001E; // MS Message Wait Facilities\n\nexport var TAG_MS_MSG_WAIT_FACILITIES = 0x0030;\nexport var SMPP_TLV_TAG_IDS = [TAG_SOURCE_TELEMATICS_ID, TAG_PAYLOAD_TYPE, TAG_PRIVACY_INDICATOR, TAG_USER_MESSAGE_REFERENCE, TAG_USER_RESPONSE_CODE, TAG_SOURCE_PORT, TAG_DESTINATION_PORT, TAG_SAR_MSG_REF_NUM, TAG_LANGUAGE_INDICATOR, TAG_SAR_TOTAL_SEGMENTS, TAG_SAR_SEGMENT_SEQNUM, TAG_SOURCE_SUBADDRESS, TAG_DEST_SUBADDRESS, TAG_CALLBACK_NUM, TAG_MESSAGE_PAYLOAD, TAG_SC_INTERFACE_VERSION, TAG_DISPLAY_TIME, TAG_MS_VALIDITY, TAG_DPF_RESULT, TAG_SET_DPF, TAG_MS_AVAIL_STATUS, TAG_NETWORK_ERROR_CODE, TAG_DELIVERY_FAILURE_REASON, TAG_MORE_MSGS_TO_FOLLOW, TAG_MSG_STATE, TAG_CONGESTION_STATE, TAG_CALLBACK_NUM_PRES_IND, TAG_CALLBACK_NUM_ATAG, TAG_NUM_MSGS, TAG_SMS_SIGNAL, TAG_ALERT_ON_MSG_DELIVERY, TAG_ITS_REPLY_TYPE, TAG_ITS_SESSION_INFO, TAG_USSD_SERVICE_OP, TAG_BROADCAST_CHANNEL_INDICATOR, TAG_BROADCAST_CONTENT_TYPE, TAG_BROADCAST_CONTENT_TYPE_INFO, TAG_BROADCAST_MESSAGE_CLASS, TAG_BROADCAST_REP_NUM, TAG_BROADCAST_FREQUENCY_INTERVAL, TAG_BROADCAST_AREA_IDENTIFIER, TAG_BROADCAST_ERROR_STATUS, TAG_BROADCAST_AREA_SUCCESS, TAG_BROADCAST_END_TIME, TAG_BROADCAST_SERVICE_GROUP, TAG_SOURCE_NETWORK_ID, TAG_DEST_NETWORK_ID, TAG_SOURCE_NODE_ID, TAG_DEST_NODE_ID, TAG_BILLING_IDENTIFICATION, TAG_ORIG_MSC_ADDR, TAG_DEST_MSC_ADDR, TAG_DEST_ADDR_SUBUNIT, TAG_DEST_NETWORK_TYPE, TAG_DEST_BEAR_TYPE, TAG_DEST_TELE_ID, TAG_SOURCE_ADDR_SUBUNIT, TAG_SOURCE_NETWORK_TYPE, TAG_SOURCE_BEAR_TYPE, TAG_SOURCE_TELE_ID, TAG_QOS_TIME_TO_LIVE, TAG_ADD_STATUS_INFO, TAG_RECEIPTED_MSG_ID, TAG_MS_MSG_WAIT_FACILITIES];\nexport var SMPP_TLV_TAGS = [{\n  tag: TAG_SOURCE_TELEMATICS_ID,\n  name: \"TAG_SOURCE_TELEMATICS_ID\"\n}, {\n  tag: TAG_PAYLOAD_TYPE,\n  name: \"TAG_PAYLOAD_TYPE\"\n}, {\n  tag: TAG_PRIVACY_INDICATOR,\n  name: \"TAG_PRIVACY_INDICATOR\"\n}, {\n  tag: TAG_USER_MESSAGE_REFERENCE,\n  name: \"TAG_USER_MESSAGE_REFERENCE\"\n}, {\n  tag: TAG_USER_RESPONSE_CODE,\n  name: \"TAG_USER_RESPONSE_CODE\"\n}, {\n  tag: TAG_SOURCE_PORT,\n  name: \"TAG_SOURCE_PORT\"\n}, {\n  tag: TAG_DESTINATION_PORT,\n  name: \"TAG_DESTINATION_PORT\"\n}, {\n  tag: TAG_SAR_MSG_REF_NUM,\n  name: \"TAG_SAR_MSG_REF_NUM\"\n}, {\n  tag: TAG_LANGUAGE_INDICATOR,\n  name: \"TAG_LANGUAGE_INDICATOR\"\n}, {\n  tag: TAG_SAR_TOTAL_SEGMENTS,\n  name: \"TAG_SAR_TOTAL_SEGMENTS\"\n}, {\n  tag: TAG_SAR_SEGMENT_SEQNUM,\n  name: \"TAG_SAR_SEGMENT_SEQNUM\"\n}, {\n  tag: TAG_SOURCE_SUBADDRESS,\n  name: \"TAG_SOURCE_SUBADDRESS\"\n}, {\n  tag: TAG_DEST_SUBADDRESS,\n  name: \"TAG_DEST_SUBADDRESS\"\n}, {\n  tag: TAG_CALLBACK_NUM,\n  name: \"TAG_CALLBACK_NUM\"\n}, {\n  tag: TAG_MESSAGE_PAYLOAD,\n  name: \"TAG_MESSAGE_PAYLOAD\"\n}, {\n  tag: TAG_SC_INTERFACE_VERSION,\n  name: \"TAG_SC_INTERFACE_VERSION\"\n}, {\n  tag: TAG_DISPLAY_TIME,\n  name: \"TAG_DISPLAY_TIME\"\n}, {\n  tag: TAG_MS_VALIDITY,\n  name: \"TAG_MS_VALIDITY\"\n}, {\n  tag: TAG_DPF_RESULT,\n  name: \"TAG_DPF_RESULT\"\n}, {\n  tag: TAG_SET_DPF,\n  name: \"TAG_SET_DPF\"\n}, {\n  tag: TAG_MS_AVAIL_STATUS,\n  name: \"TAG_MS_AVAIL_STATUS\"\n}, {\n  tag: TAG_NETWORK_ERROR_CODE,\n  name: \"TAG_NETWORK_ERROR_CODE\"\n}, {\n  tag: TAG_DELIVERY_FAILURE_REASON,\n  name: \"TAG_DELIVERY_FAILURE_REASON\"\n}, {\n  tag: TAG_MORE_MSGS_TO_FOLLOW,\n  name: \"TAG_MORE_MSGS_TO_FOLLOW\"\n}, {\n  tag: TAG_MSG_STATE,\n  name: \"TAG_MSG_STATE\"\n}, {\n  tag: TAG_CONGESTION_STATE,\n  name: \"TAG_CONGESTION_STATE\"\n}, {\n  tag: TAG_CALLBACK_NUM_PRES_IND,\n  name: \"TAG_CALLBACK_NUM_PRES_IND\"\n}, {\n  tag: TAG_CALLBACK_NUM_ATAG,\n  name: \"TAG_CALLBACK_NUM_ATAG\"\n}, {\n  tag: TAG_NUM_MSGS,\n  name: \"TAG_NUM_MSGS\"\n}, {\n  tag: TAG_SMS_SIGNAL,\n  name: \"TAG_SMS_SIGNAL\"\n}, {\n  tag: TAG_ALERT_ON_MSG_DELIVERY,\n  name: \"TAG_ALERT_ON_MSG_DELIVERY\"\n}, {\n  tag: TAG_ITS_REPLY_TYPE,\n  name: \"TAG_ITS_REPLY_TYPE\"\n}, {\n  tag: TAG_ITS_SESSION_INFO,\n  name: \"TAG_ITS_SESSION_INFO\"\n}, {\n  tag: TAG_USSD_SERVICE_OP,\n  name: \"TAG_USSD_SERVICE_OP\"\n}, {\n  tag: TAG_BROADCAST_CHANNEL_INDICATOR,\n  name: \"TAG_BROADCAST_CHANNEL_INDICATOR\"\n}, {\n  tag: TAG_BROADCAST_CONTENT_TYPE,\n  name: \"TAG_BROADCAST_CONTENT_TYPE\"\n}, {\n  tag: TAG_BROADCAST_CONTENT_TYPE_INFO,\n  name: \"TAG_BROADCAST_CONTENT_TYPE_INFO\"\n}, {\n  tag: TAG_BROADCAST_MESSAGE_CLASS,\n  name: \"TAG_BROADCAST_MESSAGE_CLASS\"\n}, {\n  tag: TAG_BROADCAST_REP_NUM,\n  name: \"TAG_BROADCAST_REP_NUM\"\n}, {\n  tag: TAG_BROADCAST_FREQUENCY_INTERVAL,\n  name: \"TAG_BROADCAST_FREQUENCY_INTERVAL\"\n}, {\n  tag: TAG_BROADCAST_AREA_IDENTIFIER,\n  name: \"TAG_BROADCAST_AREA_IDENTIFIER\"\n}, {\n  tag: TAG_BROADCAST_ERROR_STATUS,\n  name: \"TAG_BROADCAST_ERROR_STATUS\"\n}, {\n  tag: TAG_BROADCAST_AREA_SUCCESS,\n  name: \"TAG_BROADCAST_AREA_SUCCESS\"\n}, {\n  tag: TAG_BROADCAST_END_TIME,\n  name: \"TAG_BROADCAST_END_TIME\"\n}, {\n  tag: TAG_BROADCAST_SERVICE_GROUP,\n  name: \"TAG_BROADCAST_SERVICE_GROUP\"\n}, {\n  tag: TAG_SOURCE_NETWORK_ID,\n  name: \"TAG_SOURCE_NETWORK_ID\"\n}, {\n  tag: TAG_DEST_NETWORK_ID,\n  name: \"TAG_DEST_NETWORK_ID\"\n}, {\n  tag: TAG_SOURCE_NODE_ID,\n  name: \"TAG_SOURCE_NODE_ID\"\n}, {\n  tag: TAG_DEST_NODE_ID,\n  name: \"TAG_DEST_NODE_ID\"\n}, {\n  tag: TAG_BILLING_IDENTIFICATION,\n  name: \"TAG_BILLING_IDENTIFICATION\",\n  specRef: \"\"\n}, {\n  tag: TAG_ORIG_MSC_ADDR,\n  name: \"TAG_ORIG_MSC_ADDR\"\n}, {\n  tag: TAG_DEST_MSC_ADDR,\n  name: \"TAG_DEST_MSC_ADDR\"\n}, {\n  tag: TAG_DEST_ADDR_SUBUNIT,\n  name: \"TAG_DEST_ADDR_SUBUNIT\"\n}, {\n  tag: TAG_DEST_NETWORK_TYPE,\n  name: \"TAG_DEST_NETWORK_TYPE\"\n}, {\n  tag: TAG_DEST_BEAR_TYPE,\n  name: \"TAG_DEST_BEAR_TYPE\"\n}, {\n  tag: TAG_DEST_TELE_ID,\n  name: \"TAG_DEST_TELE_ID\"\n}, {\n  tag: TAG_SOURCE_ADDR_SUBUNIT,\n  name: \"TAG_SOURCE_ADDR_SUBUNIT\"\n}, {\n  tag: TAG_SOURCE_NETWORK_TYPE,\n  name: \"TAG_SOURCE_NETWORK_TYPE\"\n}, {\n  tag: TAG_SOURCE_BEAR_TYPE,\n  name: \"TAG_SOURCE_BEAR_TYPE\"\n}, {\n  tag: TAG_SOURCE_TELE_ID,\n  name: \"TAG_SOURCE_TELE_ID\"\n}, {\n  tag: TAG_QOS_TIME_TO_LIVE,\n  name: \"TAG_QOS_TIME_TO_LIVE\"\n}, {\n  tag: TAG_ADD_STATUS_INFO,\n  name: \"TAG_ADD_STATUS_INFO\"\n}, {\n  tag: TAG_RECEIPTED_MSG_ID,\n  name: \"TAG_RECEIPTED_MSG_ID\"\n}, {\n  tag: TAG_MS_MSG_WAIT_FACILITIES,\n  name: \"TAG_MS_MSG_WAIT_FACILITIES\"\n}];\nexport var ESM_CLASS_MM_MASK = 0x03; // BIN 00000011\n\nexport var ESM_CLASS_MM_DEFAULT = 0x00; // BIN 00000000\n\nexport var ESM_CLASS_MM_DATAGRAM = 0x01; // BIN 00000001\n\nexport var ESM_CLASS_MM_TRANSACTION = 0x02; // BIN 00000010\n\nexport var ESM_CLASS_MM_STORE_FORWARD = 0x03; // BIN 00000011\n\n/** Message Type (bits 5-2) */\n\nexport var ESM_CLASS_MT_MASK = 0x1C; // BIN:  11100\n\nexport var ESM_CLASS_MT_SMSC_DELIVERY_RECEIPT = 0x04; // BIN:    100, Recv Msg contains SMSC delivery receipt\n\nexport var ESM_CLASS_MT_ESME_DELIVERY_RECEIPT = 0x08; // BIN:   1000, Send/Recv Msg contains ESME delivery acknowledgement\n\nexport var ESM_CLASS_MT_MANUAL_USER_ACK = 0x10; // BIN:  10000, Send/Recv Msg contains manual/user acknowledgment\n\nexport var ESM_CLASS_MT_CONVERSATION_ABORT = 0x18; // BIN:  11000, Recv Msg contains conversation abort (Korean CDMA)\n// i believe this flag is separate from the types above...\n\nexport var ESM_CLASS_INTERMEDIATE_DELIVERY_RECEIPT_FLAG = 0x20; // BIN: 100000, Recv Msg contains intermediate notification\n\nexport var ESM_CLASS_UDHI_MASK = 0x40;\nexport var ESM_CLASS_REPLY_PATH_MASK = 0x80;","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar DissectingContext =\n/*#__PURE__*/\nfunction () {\n  function DissectingContext(initialBuffer) {\n    _classCallCheck(this, DissectingContext);\n\n    this.offset = 0;\n    this.processingBuffer = initialBuffer;\n    this.processedVariables = {};\n    this.initialBuffer = initialBuffer;\n    this.previoudBuffer = initialBuffer;\n    this.initialBufferLength = initialBuffer.byteLength;\n    this.boundVars = {};\n  }\n\n  _createClass(DissectingContext, [{\n    key: \"checkLength\",\n    value: function checkLength(fieldDescription) {\n      if (typeof fieldDescription.fieldLength !== \"undefined\") {\n        if (this.offset + fieldDescription.fieldLength > this.initialBufferLength) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"pushBuffer\",\n    value: function pushBuffer(newBuffer) {\n      this.previoudBuffer = this.processingBuffer;\n      this.processingBuffer = newBuffer;\n      var currentOffset = this.offset;\n      var newLength = this.processingBuffer.byteLength;\n      var fieldLength = this.initialBufferLength - currentOffset - newLength;\n      this.offset += fieldLength;\n      return {\n        offset: currentOffset,\n        length: fieldLength,\n        buffer: this.previoudBuffer.slice(0, fieldLength)\n      };\n    }\n  }]);\n\n  return DissectingContext;\n}();\n\nexport default DissectingContext;","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Notifications =\n/*#__PURE__*/\nfunction () {\n  function Notifications() {\n    _classCallCheck(this, Notifications);\n\n    this.messages = [];\n  }\n\n  _createClass(Notifications, [{\n    key: \"addNotification\",\n    value: function addNotification(tag, body, offset) {\n      this.messages.push({\n        tag: tag,\n        body: body,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this.messages;\n    }\n  }, {\n    key: \"getByTagName\",\n    value: function getByTagName(tag) {\n      return this.messages.filter(function (item) {\n        return item.tag === tag;\n      });\n    }\n  }]);\n\n  return Notifications;\n}();\n\nexport default Notifications;","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport Notifications from \"./Notifications\";\n\nvar DissectingResult = function DissectingResult() {\n  _classCallCheck(this, DissectingResult);\n\n  this.data = [];\n  this.notifications = new Notifications();\n};\n\nexport default DissectingResult;","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport bitsyntax from 'ut-bitsyntax';\nimport * as CONSTANTS from './constants';\nimport { SMPP_HEADER } from \"./constants\";\nimport DissectingContext from \"./DissectingContext\";\nimport Notifications from \"./Notifications\";\nimport DissectingResult from \"./DissectingResult\";\nimport { SMPP_COMMANDS_DESCRIPTIONS } from \"./constants\";\nimport { SMPP_TLV_TAGS } from \"./constants\";\n\nvar SmppDecoder =\n/*#__PURE__*/\nfunction () {\n  function SmppDecoder() {\n    _classCallCheck(this, SmppDecoder);\n\n    this.logLevel = \"none\";\n  }\n\n  _createClass(SmppDecoder, [{\n    key: \"trace\",\n    value: function trace(logLevel) {\n      if (this.logLevel !== \"none\") {\n        for (var _len = arguments.length, msg = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          msg[_key - 1] = arguments[_key];\n        }\n\n        console.log(msg);\n      }\n    }\n  }, {\n    key: \"useLogLevel\",\n    value: function useLogLevel(level) {\n      this.logLevel = level;\n      return this;\n    }\n    /**\n     *\n     * @param buf\n     * @param ignoreHeader\n     * @param defaultCommandId\n     * @returns {boolean|*|boolean|*}\n     */\n\n  }, {\n    key: \"decode\",\n    value: function decode(buf) {\n      var ignoreHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var defaultCommandId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"SUBMIT_SM\";\n      this.trace(\"trace\", \"start decoding\", buf, ignoreHeader, defaultCommandId);\n      var ctx = new DissectingContext(buf);\n      var result = new DissectingResult(); // Do not parse header\n\n      if (!ignoreHeader) {\n        for (var fieldName in SMPP_HEADER) {\n          var fieldDescription = SMPP_HEADER[fieldName];\n\n          try {\n            this.decodeField(fieldName, fieldDescription, ctx, result);\n          } catch (e) {\n            break;\n          }\n        }\n      }\n\n      var bodyFieldDescription = SMPP_COMMANDS_DESCRIPTIONS[defaultCommandId];\n\n      for (var _fieldName in bodyFieldDescription.pattern) {\n        if (_fieldName === \"tlvs\") {\n          // parse TLVs\n          var pattern = bitsyntax.parse('t:16/integer,l:16/integer,v:l/binary,rest/binary');\n\n          do {\n            var tlvMatch = bitsyntax.match(pattern, ctx.processingBuffer);\n\n            if (tlvMatch !== false) {\n              var obj = ctx.pushBuffer(tlvMatch.rest);\n              obj.name = this.getTlvName(tlvMatch.t);\n              obj.value = this.interpretValue(obj.name, tlvMatch.v.toString());\n              result.data.push(obj);\n            } else {\n              result.notifications.addNotification(\"tlv\", \"Error on processing TLV\", ctx.offset);\n              break;\n            }\n          } while (ctx.processingBuffer.byteLength > 0);\n        } else {\n          var _fieldDescription = bodyFieldDescription.pattern[_fieldName];\n          this.trace(\"trace\", \"Field description\", _fieldDescription);\n\n          try {\n            this.decodeField(_fieldName, _fieldDescription, ctx, result);\n          } catch (e) {\n            break;\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"decodeField\",\n    value: function decodeField(fieldName, fieldDescription, ctx, result) {\n      if (!ctx.checkLength(fieldDescription)) {\n        result.notifications.addNotification(fieldName, \"Not enough data in buffer. Need: \".concat(fieldDescription.fieldLength, \" but have:\").concat(ctx.initialBufferLength - ctx.offset), ctx.offset); // Todo: тут что-то сделать надо\n\n        throw new Error(\"Not enough data n  buffer\");\n      }\n\n      var matchedObject = bitsyntax.match(this.getPattern(fieldDescription), ctx.processingBuffer, ctx.boundVars);\n\n      if (!matchedObject) {\n        result.notifications.addNotification(fieldName, \"Error on dissecting field:\".concat(fieldName), ctx.offset); // Todo: тут что-то сделать надо\n\n        throw new Error(\"Not enough data in buffer\");\n      } else {\n        var obj = ctx.pushBuffer(matchedObject.rest);\n        obj.name = fieldName;\n        obj.value = this.interpretValue(fieldName, matchedObject[fieldName], fieldDescription, ctx);\n\n        if (typeof fieldDescription.specRef !== \"undefined\") {\n          obj.specRef = fieldDescription.specRef;\n        }\n\n        ctx.boundVars[fieldName] = obj.value.raw;\n        result.data.push(obj);\n      }\n    }\n  }, {\n    key: \"interpretValue\",\n    value: function interpretValue(field, value, header, ctx) {\n      var interpreted = value;\n\n      if (typeof header !== \"undefined\" && typeof header.interpret !== \"undefined\") {\n        interpreted = header.interpret(value, ctx);\n      }\n\n      return {\n        interpreted: interpreted,\n        raw: value\n      };\n    }\n  }, {\n    key: \"getPattern\",\n    value: function getPattern(descr) {\n      if (typeof descr.pattern !== \"undefined\") {\n        return this.compilePattern(descr.pattern);\n      } else {\n        return this.compilePattern(descr);\n      }\n    }\n  }, {\n    key: \"compilePattern\",\n    value: function compilePattern(ptr) {\n      if (typeof ptr === \"string\") {\n        return bitsyntax.parse(ptr + \",rest/binary\");\n      } else {\n        return ptr;\n      }\n    }\n  }, {\n    key: \"getTlvName\",\n    value: function getTlvName(tag) {\n      for (var i in SMPP_TLV_TAGS) {\n        if (tag === SMPP_TLV_TAGS[i].tag) {\n          return SMPP_TLV_TAGS[i].name;\n        }\n      }\n\n      return \"UNKNOWN_TLV\";\n    }\n  }]);\n\n  return SmppDecoder;\n}();\n\nexport default SmppDecoder;"],"sourceRoot":""}