{"version":3,"sources":["HexDump/SimpleHexDump.js","Utils.js","pages/SmppDecoderPage.js","../../js-smpp/index.js","pages/test/TestHexDumpPage.js","components/Menu.js","routes.js","pages/HomePage.js","pages/HexDumpPage.js","pages/EncodingsPage.js","App.js","index.js","../../js-smpp/src/constants.js","../../js-smpp/src/DissectingContext.js","../../js-smpp/src/Notifications.js","../../js-smpp/src/DissectingResult.js","../../js-smpp/src/SmppDecoder.js"],"names":["SimpleHexDump","props","_this","Object","_home_wiz_TRASH_utils_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_wiz_TRASH_utils_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_wiz_TRASH_utils_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","showOffset","showHex","showCharacters","currentGroup","onFilterClick","bind","_home_wiz_TRASH_utils_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","filterName","setState","assign","hexDumpLength","hexdump","byteLength","minimumLength10","Math","ceil","log10","minimumLength16","log2","offsets","offset","push","toString","padStart","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","key","className","dump","endGroup","startGroup","readUInt8","dangerouslySetInnerHTML","__html","join","charCode","char","Utils","Text","isPrint","String","fromCodePoint","array","groups","length","i","curGroup","nextGroup","name","_this2","panels","renderOffsetPanel","renderHexPanel","renderCharactersPanel","map","el","index","style","padding","type","checked","onChange","Component","defaultProps","val","HexSymbols","intToHex","byteToHex","halfByteToHex","charAt","stringToHex","s","result","charCodeAt","hexToIntArray","hexString","upperHexString","toUpperCase","currentValue","indexOf","intArrayToString","intArray","fromCharCode","Hex","cleanup","replace","Encoding","GSM0338","basicSet","extendedSet","mapping","escCharacter","isRepresentable","str","isCharRepresentable","character","Buffer","create","data","position","cap","readByte","b","readShort","res","readInt","Bytes","readLong","Smpp","DataTypes","Integer","read","buf","CString","SmppDecoderPage","decodeState","window","location","hash","substr","from","Base64","btoa","doDecode","value","buffer","meta","settings","dissectingFieldsColors","change","changeSettings","oldState","decodedData","notifications","self","keys","decodedField","specRef","_HexDump_SimpleHexDump__WEBPACK_IMPORTED_MODULE_8__","raw","getAll","_ref","tag","body","width","rows","placeholder","defaultValue","href","react__WEBPACK_IMPORTED_MODULE_6__","e","target","title","decoder","SmppDecoder","trim","decode","atob","module","exports","__webpack_require__","TestHexDumpPage","console","log","react__WEBPACK_IMPORTED_MODULE_5___default","_HexDump_SimpleHexDump__WEBPACK_IMPORTED_MODULE_6__","colSpan","fontSize","paddingRight","paddingLeft","Menu","react_default","NavLink","activeClassName","to","PATH_ENCODING","HomePage","HexDumpPage","EncodingsPage","encodingName","Row","params","arguments","encodingParameterizedPage","match","EncodingsPage_EncodingsPage","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","oldText","text","assertThisInitialized","BrowserRouter","basename","concat","process","components_Menu","role","Switch","Route","exact","path","component","ROUTES","ReactDOM","render","src_App_0","document","getElementById","SMPP_HEADER","packetLength","pattern","fieldLength","commandId","interpret","v","cmdId","SMPP_COMMANDS_DESCRIPTIONS","status","sequenceNumber","GENERIC_NACK","mtid","BIND_RECEIVER","systemId","password","systemType","interfaceVersion","addrTon","addrNpi","addressRange","BIND_RECEIVER_RESP","tlvs","BIND_TRANSMITTER","BIND_TRANSMITTER_RESP","QUERY_SM","messageId","sourceAddrTon","sourceAddrNpi","sourceAddr","QUERY_SM_RESP","finalDate","messageState","errorCode","SUBMIT_SM","serviceType","destAddrTon","destAddrNpi","destinationAddr","esmClass","protocolId","priorityFlag","scheduleDeliveryTime","validityPeriod","registeredDelivery","replaceIfPresentFlag","dataCoding","smDefaultMsgId","smLength","shortMessage","SUBMIT_SM_RESP","DELIVER_SM","DELIVER_SM_RESP","UNBIND","UNBIND_RESP","REPLACE_SM","REPLACE_SM_RESP","CANCEL_SM","CANCEL_SM_RESP","BIND_TRANSCEIVER","BIND_TRANSCEIVER_RESP","OUTBIND","example","ENQUIRE_LINK","ENQUIRE_LINK_RESP","ALERT_NOTIFICATION","DATA_SM","DATA_SM_RESP","SMPP_TLV_TAGS","src_DissectingContext","DissectingContext","initialBuffer","processingBuffer","processedVariables","previoudBuffer","initialBufferLength","boundVars","createClass","fieldDescription","newBuffer","currentOffset","newLength","slice","src_Notifications","Notifications","messages","filter","item","src_DissectingResult","DissectingResult","SmppDecoder_SmppDecoder","logLevel","_len","msg","Array","_key","level","ignoreHeader","undefined","defaultCommandId","trace","ctx","fieldName","decodeField","bodyFieldDescription","_fieldName","ut_bitsyntax_default","parse","tlvMatch","addNotification","obj","pushBuffer","rest","getTlvName","t","interpretValue","_fieldDescription","checkLength","Error","matchedObject","getPattern","field","header","interpreted","descr","compilePattern","ptr","__webpack_exports__"],"mappings":"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","file":"static/js/main.f98a7188.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Utils from \"../Utils\";\nimport \"./simple-hex-dump.css\";\nimport \"../color-groups.css\";\n\nclass SimpleHexDump extends Component {\n    constructor(props) {\n        super(props);\n\n        this\n            .state = {\n                showOffset: this.props.showOffset,\n                showHex: this.props.showHex,\n                showCharacters: this.props.showCharacters\n            };\n\n        this.currentGroup=0;\n\n        this.onFilterClick = this.onFilterClick.bind(this);\n    }\n    onFilterClick(filterName) {\n        let state = this.state;\n\n        state[filterName] = !state[filterName];\n\n        this.setState(Object.assign({}, state));\n    }\n    renderOffsetPanel() {\n        let hexDumpLength = this.props.hexdump.byteLength;\n\n        let minimumLength10 = Math.ceil(Math.log10(hexDumpLength));\n        let minimumLength16 = Math.ceil(Math.log2(hexDumpLength) / Math.log2(16));\n\n        let offsets = [];\n        let offset = 0;\n        while (offset < hexDumpLength) {\n            offsets\n                .push(\n                    \"0x\"\n                    + offset.toString(16).padStart(minimumLength16,\"0\")\n                    + \":\"\n                    + offset.toString(10).padStart(minimumLength10,\"0\")\n                );\n\n            offset+=16;\n\n            if (offset < hexDumpLength) {\n                offsets.push(<br key={\"offset-offset-\"+offset} />);\n            }\n        }\n\n        return <div className=\"simple-hex-dump-offset-panel\"><code>{offsets}</code></div>;\n    }\n    renderHexPanel() {\n        let dump = [];\n\n        let hexDumpLength = this.props.hexdump.byteLength;\n\n        this.currentGroup = 0;\n\n        for (let offset = 0;offset < hexDumpLength;offset++) {\n            this.endGroup(offset, dump);\n            this.startGroup(offset, dump);\n\n            dump.push(this.props.hexdump.readUInt8(offset).toString(16).padStart(2,\"0\"));\n\n            if (\n                (offset % 4 === 3)\n                && (offset % 16 !== 15)\n            ) {\n                dump.push(\" |\");\n            }\n\n            if (offset % 16 < 15) {\n                dump.push(\" \");\n            }\n\n            if (offset>0 && offset % 16 === 15) {\n                dump.push(\"<br />\");\n            }\n        }\n\n        this.endGroup(hexDumpLength, dump);\n\n        return <div className=\"simple-hex-dump-body-panel\"><code dangerouslySetInnerHTML={{__html:dump.join(\"\")}} /></div>;\n    }\n    renderCharactersPanel() {\n        this.currentGroup = 0;\n\n        let dump = [];\n\n        let hexDumpLength = this.props.hexdump.byteLength;\n\n        for (let offset = 0;offset < hexDumpLength;offset++) {\n            this.endGroup(offset, dump);\n            this.startGroup(offset, dump);\n\n            let charCode = this.props.hexdump.readUInt8(offset);\n\n            let char = Utils.Text.isPrint(charCode) ? String.fromCodePoint(charCode) : \".\";\n\n            dump.push(char);\n\n            if (\n                (offset % 4 === 3)\n                && (offset % 16 !== 15)\n            ) {\n                dump.push(\" |\");\n            }\n\n            if (offset % 16 < 15) {\n                dump.push(\" \");\n            }\n\n            if (offset>0 && offset % 16 === 15) {\n                dump.push(\"<br  />\");\n            }\n        }\n\n        this.endGroup(hexDumpLength, dump);\n\n        return <div className=\"simple-hex-dump-characters-panel\"><code dangerouslySetInnerHTML={{__html: dump.join(\"\")}} /></div>;\n    }\n    startGroup(offset, array) {\n        if (typeof this.props.groups === \"undefined\" || this.props.groups.length === 0) {\n            return ;\n        }\n        for (let i in this.props.groups) {\n            let curGroup = this.props.groups[i];\n\n            if (curGroup.offset === offset) {\n                array.push(\"<span class=\\\"color-group\"+this.nextGroup()+\"\\\" title=\\\"\"+curGroup.name+\"\\\">\");\n\n                break;\n            }\n        }\n    }\n    endGroup(offset, array) {\n        if (typeof this.props.groups === \"undefined\" || this.props.groups.length === 0) {\n            return ;\n        }\n        for (let i in this.props.groups) {\n            let curGroup = this.props.groups[i];\n\n            if (curGroup.offset + curGroup.length === offset) {\n                array.push(\"</span>\");\n                break;\n            }\n        }\n    }\n    nextGroup() {\n        if (this.currentGroup >= 20) {\n            this.currentGroup = 1;\n        } else {\n            this.currentGroup++;\n        }\n\n        return this.currentGroup;\n    }\n    render() {\n        this.currentGroup=0;\n\n        if (\n            typeof this.props.hexdump === \"undefined\"\n            || this.props.hexdump == null\n        ) {\n            return \"\";\n        }\n\n        let panels = [];\n\n        if (this.state.showOffset) {\n            panels.push(this.renderOffsetPanel());\n        }\n\n        if (this.state.showHex) {\n            panels.push(this.renderHexPanel());\n        }\n\n        if (this.state.showCharacters) {\n            panels.push(this.renderCharactersPanel());\n        }\n\n        return (\n            <div className=\"a1s-simple-hex-dump\">\n                <table className=\"simple-hex-dump\">\n                    <tbody>\n                        <tr>\n                            {panels.map((el, index) => <td key={\"of\"+index} style={{padding:\"0px 10px\"}}>{el}</td>)}\n                        </tr>\n                    </tbody>\n                </table>\n                <div>\n                    <label className=\"a1s-simple-hex-dump-btn-xs\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-element\"\n                            checked={this.state.showOffset}\n                            onChange={()=>this.onFilterClick(\"showOffset\")}\n                        />Offset\n                    </label>\n\n                    <label className=\"a1s-simple-hex-dump-btn-xs\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-element\"\n                            checked={this.state.showHex}\n                            onChange={()=>this.onFilterClick(\"showHex\")}\n                        />Hex\n                    </label>\n\n                    <label className=\"a1s-simple-hex-dump-btn-xs\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-element\"\n                            checked={this.state.showCharacters}\n                            onChange={()=>this.onFilterClick(\"showCharacters\")}\n                        />Characters\n                    </label>\n                </div>\n            </div>\n        );\n    }\n}\n\nSimpleHexDump.propTypes = {\n    hexdump: PropTypes.object.isRequired,\n    groups: PropTypes.array\n};\n\nSimpleHexDump.defaultProps = {\n    showOffset: true,\n    showHex: true,\n    showCharacters: true,\n};\n\nexport default SimpleHexDump;","let Utils = {};\nUtils.Text = {};\nUtils.Text.isPrint=function(val) {\n\tif (val > 0x20 && val < 0x7f) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\nUtils.Text.HexSymbols = \"0123456789ABCDEF\";\nUtils.Text.intToHex = function(val) {\n\tif (val > 255) {\n\t\t//var H = Utils.Text.byteToHex(val >> 8);\n\t\tvar H = Utils.Text.intToHex(val >> 8);\n\t\tvar L = Utils.Text.byteToHex(val & 0xFF);\n\t\t\t\t\n\t\treturn \"\"+H+L;\n\t} else {\n\t\treturn Utils.Text.byteToHex(val);\n\t}\n};\nUtils.Text.byteToHex = function(val) {\n\tvar H = Utils.Text.halfByteToHex(val >> 4);\n\tvar L =\tUtils.Text.halfByteToHex(val & 0xF);\n\t\n\treturn \"\"+H+L;\n};\nUtils.Text.halfByteToHex = function(val) {\n\treturn Utils.Text.HexSymbols.charAt(val & 0xF);\n};\n\nUtils.Text.stringToHex=function(s) {\n\tvar result=[];\n\tfor (var i=0;i<s.length;i++) {\n\t\tresult.push(Utils.Text.intToHex(s.charCodeAt(i)));\n\t}\n\t\n\treturn result.join('');\n};\n\nUtils.Text.hexToIntArray=function(hexString) {\n\tvar upperHexString = hexString.toUpperCase();\n\t\n\tvar result=[];\n\tvar currentValue=0;\n\tfor (var i=0;i<upperHexString.length;i++) {\n\t\tif (i % 2 === 1) {\n\t\t\tcurrentValue |= Utils.Text.HexSymbols.indexOf(upperHexString.charAt(i)); \n\t\t\tresult.push(currentValue);\t\t\t\t\t\t\n\t\t} else {\n\t\t\tcurrentValue = Utils.Text.HexSymbols.indexOf(upperHexString.charAt(i)) << 4; \n\t\t}\n\t}\n\t\t\t \n\treturn result;\t \n};\n\nUtils.Text.intArrayToString=function(intArray) {\n\tvar result=[];\n\t\n\tfor (var i=0;i<intArray.length;i++) {\n\t\tresult.push(String.fromCharCode(intArray[i]));\n\t}\n\t\t\t \n\treturn result.join('');\t \n};\n\nUtils.Text.Hex = {};\n\nUtils.Text.Hex.cleanup = function(hexString) {\n\tif (hexString == null) {\n\t\treturn \"\";\n\t}\n\n    var text = hexString.replace(/[^0-9a-fA-F]/gim,\"\");\n\n    return text;\n};\n\nUtils.Text.Encoding = {};\n\nUtils.Text.Encoding.GSM0338 = {};\n\nUtils.Text.Encoding.GSM0338.basicSet = \"@£$¥èéùìòÇ\\rØø\\nÅåΔ_ΦΓΛΩΠΨΣΘΞ@ÆæßÉ !\\\"#¤%&'()*+,-./0123456789:;<=>?¡ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÑÜ§¿abcdefghijklmnopqrstuvwxyzäöñüà\";\nUtils.Text.Encoding.GSM0338.extendedSet = \"|^€{}[~]\\\\\";\nUtils.Text.Encoding.GSM0338.mapping = [0x40, 0x14, 0x65, 0x28, 0x29, 0x3c, 0x3d, 0x3e, 0x2f];\nUtils.Text.Encoding.GSM0338.escCharacter = 0x1B;\n\nUtils.Text.Encoding.GSM0338.isRepresentable = function(str) {\n\tif (str === null || str.length === 0) {\n\t\treturn true;\n\t}\n\n\t/*if (str.length > 1) {\n\t\tfor (var i=0;i<str.length;i++) {\n\t\t\tvar res = Utils.Text.Encoding.GSM0338.isRepresentable(str.charCodeAt());\n\t\t}\n\t}*/\n\treturn false;\n};\n\nUtils.Text.Encoding.GSM0338.isCharRepresentable = function(character) {\n\tvar basicPosition = Utils.Text.Encoding.GSM0338.basicSet.indexOf(character);\n\n\tif (basicPosition >= 0) {\n        return true;\n    }\n\n    var extendedPosition = Utils.Text.Encoding.GSM0338.extendedSet.indexOf(character);\n\n\tif (extendedPosition >= 0) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nUtils.Buffer = {};\n\nUtils.Buffer.create = function(intArray) {\n\tvar buffer = {\n\t\tdata: intArray,\n\t\tlength: intArray.length,\n\t\tposition:0,\n\t\tcap:function() {\n\t\t\treturn this.length - this.position;\n\t\t},\n\t\treadByte:function() {\n\t\t\tvar b = this.data[this.position];\n\t\t\tthis.position++;\n\t\t\t\n\t\t\treturn b;\n\t\t},\n\t\treadShort:function() {\n\t\t  var res = 0;\n\t\t\tfor (var i=0;i<2;i++) {\n\t\t\t\tres = (res << 8) + this.readByte();\n\t\t\t}\n\n\t\t\treturn res;\t\n\t\t},\n\t\treadInt:function() {\n\t\t\tvar res = 0;\n\t\t\tfor (var i=0;i<4;i++) {\n\t\t\t\tres = (res << 8) + this.readByte();\n\t\t\t}\n\n\t\t\treturn res;\n\t\t}\n\t};\n\t\n\treturn buffer;\n};\n\nUtils.Bytes = {};\n\nUtils.Bytes.readLong=function(array) {\n\tvar res = 0;\n\tfor (let i=0;i<4;i++) {\n\t\tres = (res << 8) + array[i];\n\t}\n\t\n\treturn res;\n}\n\nUtils.Smpp = {};\n\nUtils.Smpp.DataTypes = {};\n\nUtils.Smpp.DataTypes.Integer = {\n\tread:function(buf) {\n\t\treturn buf.readInt();\n\t}\n};\nUtils.Smpp.DataTypes.CString = {};\nUtils.Smpp.DataTypes.String = {};\nUtils.Smpp.DataTypes.Integer = {};\n/*\nvar hexDumpStr=\"0000007500000004000000000000000200010131393438000000313233343536373839000000000000000003000568656C6C6F000500010000070001010006000101000800020000042400000019000100020F000101020E0001010421000101000D000100000F000101000E000101001000020000\";\n\nvar intArr = Utils.Text.hexToIntArray(hexDumpStr);\n\nvar buf = Utils.Buffer.create(intArr);\n\nconsole.log(\"Length:\" + buf.readInt() +\":\" + buf.cap());\nconsole.log(\"Command ID:\" + buf.readInt() +\":\" + buf.cap());\nconsole.log(\"Status:\" + buf.readInt() +\":\" + buf.cap());\nconsole.log(\"Sequence number:\"+buf.readInt() +\":\" + buf.cap());*/\n\n\nexport default Utils;","import React, {Component, Fragment} from 'react';\nimport SmppDecoder from 'js-smpp';\nimport SimpleHexDump from \"../HexDump/SimpleHexDump\";\nimport { Base64 } from 'js-base64';\n\nclass SmppDecoderPage extends Component {\n    constructor(props){\n        super(props);\n\n        let state = {\n            value:null,\n            buffer:null,\n            result:null,\n            meta: null,\n            settings:{\n                dissectingFieldsColors:false\n            }\n        };\n\n        this.currentGroup = 0;\n\n        let decodeState = {};\n\n        if (window.location.hash !== null ) {\n            let hash = window.location.hash.substr(1);\n\n            let buf = Buffer.from(Base64.btoa(hash));\n\n            decodeState = this.doDecode(buf.toString(\"hex\"));\n        }\n\n        this.state = Object.assign({}, state, decodeState);\n\n        this.change = this.change.bind(this);\n\n        this.changeSettings = this.changeSettings.bind(this);\n    }\n    changeSettings(key, value) {\n        let oldState = this.state;\n\n        oldState.settings[key] = value;\n\n        this.setState(Object.assign({}, oldState));\n    }\n    render() {\n        let decodedData = null;\n        let notifications = null;\n\n        if (this.state.result !== null) {\n            this.currentGroup = 0;\n\n            let self = this;\n\n            decodedData =\n                Object\n                    .keys(this.state.result.data)\n                    .map(\n                        (key) => {\n                            let decodedField = this.state.result.data[key];\n                            let className = \"\";\n\n                            if (self.state.settings.dissectingFieldsColors) {\n                                className = \"color-group\" + self.nextGroup();\n                            }\n\n                            return (<tr key={decodedField.name} className={className}>\n                                <td>\n                                    <span className=\"text-xs\">no</span>\n                                </td>\n                                <td>\n                                    <div>{decodedField.name}</div>\n                                    {\n                                        typeof decodedField.specRef !== \"undefined\"\n                                        && decodedField.specRef!==\"\" && <div><small>ref: <span>{decodedField.specRef}</span></small></div>\n                                    }\n                                    <small>Offset: {decodedField.offset}</small>&nbsp;\n                                    <small>Length: {decodedField.length}</small>\n                                </td>\n                                <td>\n                                    <SimpleHexDump\n                                        hexdump={decodedField.buffer}\n                                        showOffset={false}\n                                        showCharacters={false}\n                                    />\n                                </td>\n                                <td>{decodedField.value.raw}</td>\n                                <td></td>\n                            </tr>);\n                        }\n                    );\n\n            notifications =\n                this\n                    .state\n                    .result\n                    .notifications\n                    .getAll()\n                    .map(\n                        ({tag, body, offset}) => <li key={\"notification\"+offset}>{body} at offset:{offset}</li>\n                    );\n        }\n\n        return (\n            <div>\n                <h1>PDU Hex dump</h1>\n                <textarea\n                    style={{width:\"100%\"}}\n                    rows={8}\n                    placeholder=\"Введите HEX-dump SMPP PDU\"\n                    defaultValue={this.state.value}\n                    onChange={this.change}\n                />\n                <div>\n                    <a href={window.location}>Link to this page</a>\n                </div>\n                {\n                    this.state.buffer &&\n                    <Fragment>\n                        <h1>Hex dump representation</h1>\n                        <SimpleHexDump hexdump={this.state.buffer} groups={this.state.result.data} />\n                    </Fragment>\n                }\n\n                <h1>Decoded data</h1>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        value={this.state.settings.dissectingFieldsColors}\n                        onChange={(e)=>this.changeSettings(\"dissectingFieldsColors\", e.target.checked)}\n                    />Добавить цветовое разделение полей\n                </label>\n                {decodedData !== null &&\n                    <Fragment>\n                        <ol>{notifications}</ol>\n                        <table className=\"table table-stripped\">\n                            <thead>\n                                <tr>\n                                    <th title=\"Validation\">Val</th>\n                                    <th title=\"Field name and specification reference\">Field</th>\n                                    <th title=\"Hex dump representation\">Hex</th>\n                                    <th title=\"Interpreted value\">Value</th>\n                                    <th title=\"Comment\">Comment</th>\n                                </tr>\n                            </thead>\n                            <tbody>{decodedData}</tbody>\n                        </table>\n                    </Fragment>\n\n                }\n            </div>\n        );\n    }\n    nextGroup() {\n        if (this.currentGroup >= 20) {\n            this.currentGroup = 1;\n        } else {\n            this.currentGroup++;\n        }\n\n        return this.currentGroup;\n    }\n    doDecode(value) {\n        let decoder = new SmppDecoder();\n\n        value = value.replace(\"~[^0-9a-fA-F]~gim\", \"\").trim();\n\n        if (value.length % 2 === 0) {\n            let buffer = Buffer.from(value, \"hex\");\n\n            try {\n                let result =\n                    decoder\n                        .decode(buffer, true, \"SUBMIT_SM\");\n\n                return ({value, buffer, result});\n            } catch (e) {\n                return ({value, buffer:null, result: null});\n            }\n        }\n    }\n    change(e) {\n        let state = this.doDecode(e.target.value);\n\n        if (state.buffer !== null) {\n            window.location.hash = Base64.atob(state.buffer.toString());\n        }\n\n        this.setState(Object.assign({}, this.state, state));\n    }\n}\n\nexport default SmppDecoderPage;","module.exports = require('./src/SmppDecoder');","import React, {Component} from 'react';\nimport SimpleHexDump from \"../../HexDump/SimpleHexDump\";\n\nclass TestHexDumpPage extends Component {\n    render() {\n        let buf =\n            Buffer\n                .from(\n                    [\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                    ]);\n\n        console.log(buf.byteLength);\n\n        let groups = [\n            {offset: 0, length: 1, name:\"serviceType\"},\n            {offset: 1, length: 1, name:\"sourceAddrTon\"},\n            {offset: 2, length: 1, name:\"sourceAddrNpi\"},\n            {offset: 3, length: 5, name:\"sourceAddr\"},\n        ];\n\n        return (\n            <div>\n                <SimpleHexDump\n                    hexdump={buf}\n                    groups={groups}\n                />\n\n                <table>\n                    <tr>\n                        <td colSpan=\"3\">\n                            <span style={{fontSize:\"10px\"}}>\n                                <button className=\"btn btn-xs btn-primary\">Show offset</button>\n                                <button className=\"btn btn-xs btn-primary\">Show dump</button>\n                                <button className=\"btn btn-xs btn-primary\">Show characters</button>\n                            </span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style={{paddingRight:\"10px\"}}>\n                            <code>\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                            </code>\n                        </td>\n                        <td style={{paddingLeft:\"5px\",paddingRight:\"5px\"}}>\n                            <code>\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 <span className=\"color-group1\" title=\"serviceType: sms\">00 00 00 00 00 00 00<br />\n                                00 00 00 <span title=\"udh\" className=\"color-group2\">00 00 00 00 00</span> 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00</span> 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                            </code>\n                        </td>\n                        <td style={{paddingLeft:\"10px\"}}>\n                            <code>\n                                A B C D E F G H I J K L<br />\n                                A B C D <span className=\"color-group1\" title=\"serviceType: sms\">E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J</span> K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                            </code>\n                        </td>\n\n                    </tr>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default TestHexDumpPage;","import React, {Component} from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport * as ROUTES from '../routes';\n\nclass Menu extends Component {\n    render() {\n        return (\n            <div className=\"sidebar-sticky\">\n                <ul className=\"nav flex-column\">\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_HOME}>\n                            Главная\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_HEX_DUMP}>\n                            Hex-dump\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_SMPP_DECODE}>\n                            Smpp-decoder\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING}>\n                            encodings\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING_GSM}>\n                            Gsm encoding\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING_LATIN1}>\n                            Latin-1 encoding\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING_ASCII}>\n                            Ascii encoding\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING_UCS2}>\n                            Ucs2 encoding\n                        </NavLink>\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Menu;","export const PATH_HOME = \"/\";\nexport const PATH_HEX_DUMP = \"/hex-dump\";\nexport const PATH_SMPP_DECODE = \"/smpp-decode\";\n\nexport const PATH_ENCODING = \"/encoding\";\n\nexport const PATH_ENCODING_GSM = PATH_ENCODING + \"/gsm\";\nexport const PATH_ENCODING_ASCII = PATH_ENCODING + \"/ascii\";\nexport const PATH_ENCODING_LATIN1 = PATH_ENCODING + \"/latin1\";\nexport const PATH_ENCODING_UCS2 = PATH_ENCODING + \"/ucs2\";","import React, {Component} from 'react';\n\nclass HomePage extends Component {\n    render() {\n        return (\n            <div>\n              Главная+++\n            </div>\n        );\n    }\n}\n\nexport default HomePage;","import React, {Component} from 'react';\n\nclass HexDumpPage extends Component {\n    render() {\n        return (\n            <div>\n                hex dump\n            </div>\n        );\n    }\n}\n\nexport default HexDumpPage;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass EncodingsPage extends Component {\n    render() {\n        return (\n            <div>\n                {this.props.encodingName}\n                <Row from={1} to={10} />\n            </div>\n        );\n    }\n}\n\nfunction Row(params) {\n    console.log(arguments);\n\n    return <div>Ok {params.from} to {params.to}</div>;\n}\n\nEncodingsPage.propTypes = {\n    encodingName: PropTypes.string.isRequired,\n};\n\nexport default EncodingsPage;\n\nexport const encodingParameterizedPage = ({match}) => <EncodingsPage encodingName={match.params.encodingName} />;","import React, { Component } from 'react';\nimport './App.css';\nimport Utils from \"./Utils\";\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Menu from \"./components/Menu\";\nimport SmppDecoderPage from \"./pages/SmppDecoderPage\";\nimport * as ROUTES from \"./routes\";\nimport HomePage from \"./pages/HomePage\";\nimport HexDumpPage from \"./pages/HexDumpPage\";\nimport {encodingParameterizedPage} from \"./pages/EncodingsPage\";\nimport TestHexDumpPage from \"./pages/test/TestHexDumpPage\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        var hash = window.location.hash;\n\n        var oldText=\"\";\n\n        if (hash != null && hash.length>1) {\n            oldText = Utils.Text.Hex.cleanup(hash.substr(1));\n        }\n\n        this.state = {\n            text:oldText,\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n    onChange(text) {\n        this.setState({text: text});\n\n        if (text.length <= 2000) {\n            window.location.hash = '#' + text;\n        }\n    }\n    render() {\n        return (\n            <Router basename={`${process.env.PUBLIC_URL}`}>\n                <div className=\"container-fluid h-100\">\n                    <div className=\"row h-100\">\n                        <nav className=\"col-md-2 d-none d-md-block bg-light sidebar\">\n                            <Menu />\n                        </nav>\n\n                        <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4 h-100\">\n                            <Switch>\n                                <Route exact path={ROUTES.PATH_HOME} component={HomePage} />\n                                <Route path={ROUTES.PATH_HEX_DUMP} component={HexDumpPage} />\n                                <Route path={ROUTES.PATH_SMPP_DECODE} component={SmppDecoderPage} />\n\n                                <Route\n                                    path={ROUTES.PATH_ENCODING + \"/:encodingName\"}\n                                    component={encodingParameterizedPage}\n                                />\n\n                                <Route\n                                    path=\"/test/hexdump\"\n                                    component={TestHexDumpPage}\n                                />\n                            </Switch>\n                        </main>\n                    </div>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// Base SMPP HEADER\nexport var SMPP_HEADER = {\n  packetLength: {\n    pattern: \"packetLength:32/integer\",\n    fieldLength: 4,\n    specRef: \"3.2.1\"\n  },\n  commandId: {\n    pattern: \"commandId:32/integer\",\n    interpret: function interpret(v) {\n      for (var cmdId in SMPP_COMMANDS_DESCRIPTIONS) {\n        if (SMPP_COMMANDS_DESCRIPTIONS[cmdId].commandId == v) {\n          return cmdId;\n        }\n      }\n\n      return \"unknown command id\";\n    },\n    fieldLength: 4,\n    specRef: \"3.2.1\"\n  },\n  status: {\n    pattern: \"status:32/integer\",\n    interpret: function interpret(v) {\n      // https://github.com/twitter-archive/cloudhopper-smpp/blob/master/src/main/java/com/cloudhopper/smpp/SmppConstants.java#L355\n      return \"OK\";\n    },\n    fieldLength: 4,\n    specRef: \"3.2.1\"\n  },\n  sequenceNumber: {\n    pattern: \"sequenceNumber:32/integer\",\n    fieldLength: 4,\n    specRef: \"3.2.1\"\n  }\n};\nexport var COMMAND_ID_GENERIC_NACK = \"GENERIC_NACK\";\nexport var COMMAND_ID_BIND_RECEIVER = \"BIND_RECEIVER\";\nexport var COMMAND_ID_BIND_RECEIVER_RESP = \"BIND_RECEIVER_RESP\";\nexport var COMMAND_ID_BIND_TRANSMITTER = \"BIND_TRANSMITTER\";\nexport var COMMAND_ID_BIND_TRANSMITTER_RESP = \"BIND_TRANSMITTER_RESP\";\nexport var COMMAND_ID_QUERY_SM = \"QUERY_SM\";\nexport var COMMAND_ID_QUERY_SM_RESP = \"QUERY_SM_RESP\";\nexport var COMMAND_ID_SUBMIT_SM = \"SUBMIT_SM\";\nexport var COMMAND_ID_SUBMIT_SM_RESP = \"SUBMIT_SM_RESP\";\nexport var COMMAND_ID_DELIVER_SM = \"DELIVER_SM\";\nexport var COMMAND_ID_DELIVER_SM_RESP = \"DELIVER_SM_RESP\";\nexport var COMMAND_ID_UNBIND = \"UNBIND\";\nexport var COMMAND_ID_UNBIND_RESP = \"UNBIND_RESP\";\nexport var COMMAND_ID_REPLACE_SM = \"REPLACE_SM\";\nexport var COMMAND_ID_REPLACE_SM_RESP = \"REPLACE_SM_RESP\";\nexport var COMMAND_ID_CANCEL_SM = \"CANCEL_SM\";\nexport var COMMAND_ID_CANCEL_SM_RESP = \"CANCEL_SM_RESP\";\nexport var COMMAND_ID_BIND_TRANSCEIVER = \"BIND_TRANSCEIVER\";\nexport var COMMAND_ID_BIND_TRANSCEIVER_RESP = \"BIND_TRANSCEIVER_RESP\";\nexport var COMMAND_ID_OUTBIND = \"OUTBIND\";\nexport var COMMAND_ID_ENQUIRE_LINK = \"ENQUIRE_LINK\";\nexport var COMMAND_ID_ENQUIRE_LINK_RESP = \"ENQUIRE_LINK_RESP\";\nexport var COMMAND_ID_ALERT_NOTIFICATION = \"ALERT_NOTIFICATION\";\nexport var COMMAND_ID_DATA_SM = \"DATA_SM\";\nexport var COMMAND_ID_DATA_SM_RESP = \"DATA_SM_RESP\";\nexport var SMPP_COMMAND_IDS = [COMMAND_ID_GENERIC_NACK, COMMAND_ID_BIND_RECEIVER, COMMAND_ID_BIND_RECEIVER_RESP, COMMAND_ID_BIND_TRANSMITTER, COMMAND_ID_BIND_TRANSMITTER_RESP, COMMAND_ID_QUERY_SM, COMMAND_ID_QUERY_SM_RESP, COMMAND_ID_SUBMIT_SM, COMMAND_ID_SUBMIT_SM_RESP, COMMAND_ID_DELIVER_SM, COMMAND_ID_DELIVER_SM_RESP, COMMAND_ID_UNBIND, COMMAND_ID_UNBIND_RESP, COMMAND_ID_REPLACE_SM, COMMAND_ID_REPLACE_SM_RESP, COMMAND_ID_CANCEL_SM, COMMAND_ID_CANCEL_SM_RESP, COMMAND_ID_BIND_TRANSCEIVER, COMMAND_ID_BIND_TRANSCEIVER_RESP, COMMAND_ID_OUTBIND, COMMAND_ID_ENQUIRE_LINK, COMMAND_ID_ENQUIRE_LINK_RESP, COMMAND_ID_ALERT_NOTIFICATION, COMMAND_ID_DATA_SM, COMMAND_ID_DATA_SM_RESP];\nexport var SMPP_COMMANDS_DESCRIPTIONS = {\n  \"GENERIC_NACK\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x80000000,\n    \"pattern\": null\n  },\n  \"BIND_RECEIVER\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000001,\n    \"pattern\": {\n      systemId: \"systemId:16/string-z\",\n      password: \"password:9/string-z\",\n      systemType: \"systemType:13/string-z\",\n      interfaceVersion: \"interfaceVersion:8/integer\",\n      addrTon: \"addrTon:8/integer\",\n      addrNpi: \"addrNpi:8/integer\",\n      addressRange: \"addressRange:41/string-z\"\n    }\n  },\n  \"BIND_RECEIVER_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000001,\n    \"pattern\": {\n      systemId: \"systemId:16/string-z\",\n      tlvs: \"tlvs/binary\"\n    }\n  },\n  \"BIND_TRANSMITTER\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000002,\n    \"pattern\": {\n      systemId: \"systemId:16/string-z\",\n      password: \"password:9/string-z\",\n      systemType: \"systemType:13/string-z\",\n      interfaceVersion: \"interfaceVersion:8/integer\",\n      addrTon: \"addrTon:8/integer\",\n      addrNpi: \"addrNpi:8/integer\",\n      addressRange: \"addressRange:41/string-z\"\n    }\n  },\n  \"BIND_TRANSMITTER_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000002,\n    \"pattern\": {\n      systemId: \"systemId:16/string-z\",\n      tlvs: \"tlvs/binary\"\n    }\n  },\n  \"QUERY_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000003,\n    \"pattern\": {\n      messageId: \"messageId:65/string-z\",\n      sourceAddrTon: \"sourceAddrTon:8/integer\",\n      sourceAddrNpi: \"sourceAddrNpi:8/integer\",\n      sourceAddr: \"sourceAddr:21/string-z\"\n    }\n  },\n  \"QUERY_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000003,\n    \"pattern\": {\n      messageId: \"messageId:65/string-z\",\n      finalDate: \"finalDate:18/string-z\",\n      messageState: \"messageState:8/integer\",\n      errorCode: \"errorCode:8/integer\"\n    }\n  },\n  \"SUBMIT_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000004,\n    \"specRef\": \"4.4.1\",\n    \"pattern\": {\n      serviceType: {\n        pattern: \"serviceType:6/string-z\",\n        specRef: \"5.2.11\"\n      },\n      sourceAddrTon: {\n        pattern: \"sourceAddrTon:8/integer\",\n        specRef: \"5.2.5\"\n      },\n      sourceAddrNpi: {\n        pattern: \"sourceAddrNpi:8/integer\",\n        specRef: \"5.2.6\"\n      },\n      sourceAddr: {\n        pattern: \"sourceAddr:21/string-z\",\n        specRef: \"5.2.8\"\n      },\n      destAddrTon: {\n        pattern: \"destAddrTon:8/integer\",\n        specRef: \"5.2.5\"\n      },\n      destAddrNpi: {\n        pattern: \"destAddrNpi:8/integer\",\n        specRef: \"5.2.6\"\n      },\n      destinationAddr: {\n        pattern: \"destinationAddr:21/string-z\",\n        specRef: \"5.2.9\"\n      },\n      esmClass: {\n        pattern: \"esmClass:8/integer\",\n        specRef: \"5.2.12\"\n      },\n      protocolId: {\n        pattern: \"protocolId:8/integer\",\n        specRef: \"5.2.13\"\n      },\n      priorityFlag: {\n        pattern: \"priorityFlag:8/integer\",\n        specRef: \"5.2.14\"\n      },\n      scheduleDeliveryTime: {\n        pattern: \"scheduleDeliveryTime:17/string-z\",\n        specRef: \"5.2.15\"\n      },\n      validityPeriod: {\n        pattern: \"validityPeriod:17/string-z\",\n        specRef: \"5.2.16\"\n      },\n      registeredDelivery: {\n        pattern: \"registeredDelivery:8/integer\",\n        specRef: \"5.2.17\"\n      },\n      replaceIfPresentFlag: {\n        pattern: \"replaceIfPresentFlag:8/integer\",\n        specRef: \"5.2.18\"\n      },\n      dataCoding: {\n        pattern: \"dataCoding:8/integer\",\n        specRef: \"5.2.19\"\n      },\n      smDefaultMsgId: {\n        pattern: \"smDefaultMsgId:8/integer\",\n        specRef: \"5.2.20\"\n      },\n      smLength: {\n        pattern: \"smLength:8/integer\",\n        specRef: \"5.2.21\"\n      },\n      shortMessage: {\n        pattern: \"shortMessage:smLength/binary\",\n        specRef: \"5.2.22\"\n      },\n      tlvs: {\n        pattern: \"tlvs/binary\"\n      }\n    }\n  },\n  \"SUBMIT_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000004,\n    \"specRef\": \"4.4.2\",\n    \"pattern\": [\"messageId:65/string-z\"]\n  },\n  \"DELIVER_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000005,\n    \"pattern\": [\"serviceType:6/string-z\", \"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"destAddrTon:8/integer\", \"destAddrNpi:8/integer\", \"destinationAddr:21/string-z\", \"esmClass:8/integer\", \"protocolId:8/integer\", \"priorityFlag:8/integer\", \"scheduleDeliveryTime:17/string-z\", \"validityPeriod:17/string-z\", \"registeredDelivery:8/integer\", \"replaceIfPresentFlag:8/integer\", \"dataCoding:8/integer\", \"smDefaultMsgId:8/integer\", \"smLength:8/integer\", \"shortMessage:smLength/binary\", \"tlvs/binary\"]\n  },\n  \"DELIVER_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000005,\n    \"pattern\": [\"messageId:65/string-z\"]\n  },\n  \"UNBIND\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000006,\n    \"pattern\": null\n  },\n  \"UNBIND_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000006,\n    \"pattern\": null\n  },\n  \"REPLACE_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000007,\n    \"pattern\": [\"messageId:65/string-z\", \"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"scheduleDeliveryTime:17/string-z\", \"validityPeriod:17/string-z\", \"registeredDelivery:8/integer\", \"smDefaultMsgId:8/integer\", \"smLength:8/integer\", \"shortMessage:smLength/binary\"]\n  },\n  \"REPLACE_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000007,\n    \"pattern\": null\n  },\n  \"CANCEL_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000008,\n    \"pattern\": [\"serviceType:6/string-z\", \"messageId:65/string-z\", \"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"destAddrTon:8/integer\", \"destAddrNpi:8/integer\", \"destinationAddr:21/string-z\"]\n  },\n  \"CANCEL_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000008,\n    \"pattern\": null\n  },\n  \"BIND_TRANSCEIVER\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000009,\n    \"pattern\": [\"systemId:16/string-z\", \"password:9/string-z\", \"systemType:13/string-z\", \"interfaceVersion:8/integer\", \"addrTon:8/integer\", \"addrNpi:8/integer\", \"addressRange:41/string-z\"]\n  },\n  \"BIND_TRANSCEIVER_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000009,\n    \"pattern\": [\"systemId:16/string-z\", \"tlvs/binary\"]\n  },\n  \"OUTBIND\": {\n    \"mtid\": \"request\",\n    \"example\": \"00000000B000000000000000148656c6c6f0031323300\",\n    \"commandId\": \"0000000B\",\n    \"pattern\": [\"systemId:16/string-z\", \"password:9/string-z\"]\n  },\n  \"ENQUIRE_LINK\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000015,\n    \"pattern\": null\n  },\n  \"ENQUIRE_LINK_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000015,\n    \"pattern\": null\n  },\n  \"ALERT_NOTIFICATION\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000102,\n    \"pattern\": [\"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"esmeAddrTon:8/integer\", \"esmeAddrNpi:8/integer\", \"esmeAddr:65/string-z\", \"tlvs/binary\"]\n  },\n  \"DATA_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000103,\n    \"pattern\": [\"serviceType:6/string-z\", \"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"destAddrTon:8/integer\", \"destAddrNpi:8/integer\", \"destinationAddr:21/string-z\", \"esmClass:8/integer\", \"registeredDelivery:8/integer\", \"dataCoding:8/integer\", \"tlvs/binary\"]\n  },\n  \"DATA_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000103,\n    \"pattern\": [\"messageId:65/string-z\", \"tlvs/binary\"]\n  }\n}; // TLV TAGS\n// @see: https://github.com/fizzed/cloudhopper-smpp/blob/master/src/main/java/com/cloudhopper/smpp/SmppConstants.java#L109-L224\n//\n// Optional TLV Tags\n//\n\nexport var TAG_SOURCE_TELEMATICS_ID = 0x0010;\nexport var TAG_PAYLOAD_TYPE = 0x0019;\nexport var TAG_PRIVACY_INDICATOR = 0x0201;\nexport var TAG_USER_MESSAGE_REFERENCE = 0x0204;\nexport var TAG_USER_RESPONSE_CODE = 0x0205;\nexport var TAG_SOURCE_PORT = 0x020A;\nexport var TAG_DESTINATION_PORT = 0x020B;\nexport var TAG_SAR_MSG_REF_NUM = 0x020C;\nexport var TAG_LANGUAGE_INDICATOR = 0x020D;\nexport var TAG_SAR_TOTAL_SEGMENTS = 0x020E;\nexport var TAG_SAR_SEGMENT_SEQNUM = 0x020F;\nexport var TAG_SOURCE_SUBADDRESS = 0x0202;\nexport var TAG_DEST_SUBADDRESS = 0x0203;\nexport var TAG_CALLBACK_NUM = 0x0381;\nexport var TAG_MESSAGE_PAYLOAD = 0x0424; // SC Interface Version\n\nexport var TAG_SC_INTERFACE_VERSION = 0x0210; // Display Time\n\nexport var TAG_DISPLAY_TIME = 0x1201; // Validity Information\n\nexport var TAG_MS_VALIDITY = 0x1204; // DPF Result\n\nexport var TAG_DPF_RESULT = 0x0420; // Set DPF\n\nexport var TAG_SET_DPF = 0x0421; // MS Availability Status\n\nexport var TAG_MS_AVAIL_STATUS = 0x0422; // Network Error Code\n\nexport var TAG_NETWORK_ERROR_CODE = 0x0423; // Delivery Failure Reason\n\nexport var TAG_DELIVERY_FAILURE_REASON = 0x0425; // More Messages to Follow\n\nexport var TAG_MORE_MSGS_TO_FOLLOW = 0x0426; // Message State\n\nexport var TAG_MSG_STATE = 0x0427; // Congestion State\n\nexport var TAG_CONGESTION_STATE = 0x0428; // Callback Number Presentation  Indicator\n\nexport var TAG_CALLBACK_NUM_PRES_IND = 0x0302; // Callback Number Alphanumeric Tag\n\nexport var TAG_CALLBACK_NUM_ATAG = 0x0303; // Number of messages in Mailbox\n\nexport var TAG_NUM_MSGS = 0x0304; // SMS Received Alert\n\nexport var TAG_SMS_SIGNAL = 0x1203; // Message Delivery Alert\n\nexport var TAG_ALERT_ON_MSG_DELIVERY = 0x130C; // ITS Reply Type\n\nexport var TAG_ITS_REPLY_TYPE = 0x1380; // ITS Session Info\n\nexport var TAG_ITS_SESSION_INFO = 0x1383; // USSD Service Op\n\nexport var TAG_USSD_SERVICE_OP = 0x0501; // Broadcast Channel Indicator\n\nexport var TAG_BROADCAST_CHANNEL_INDICATOR = 0x0600; // Broadcast Content Type\n\nexport var TAG_BROADCAST_CONTENT_TYPE = 0x0601; // Broadcast Content Type Info\n\nexport var TAG_BROADCAST_CONTENT_TYPE_INFO = 0x0602; // Broadcast Message Class\n\nexport var TAG_BROADCAST_MESSAGE_CLASS = 0x0603; // Broadcast Rep Num\n\nexport var TAG_BROADCAST_REP_NUM = 0x0604; // Broadcast Frequency Interval\n\nexport var TAG_BROADCAST_FREQUENCY_INTERVAL = 0x0605; // Broadcast Area Identifier\n\nexport var TAG_BROADCAST_AREA_IDENTIFIER = 0x0606; // Broadcast Error Status\n\nexport var TAG_BROADCAST_ERROR_STATUS = 0x0607; // Broadcast Area Success\n\nexport var TAG_BROADCAST_AREA_SUCCESS = 0x0608; // Broadcast End Time\n\nexport var TAG_BROADCAST_END_TIME = 0x0609; // Broadcast Service Group\n\nexport var TAG_BROADCAST_SERVICE_GROUP = 0x060A; // Source Network Id\n\nexport var TAG_SOURCE_NETWORK_ID = 0x060D; // Dest Network Id\n\nexport var TAG_DEST_NETWORK_ID = 0x060E; // Source Node Id\n\nexport var TAG_SOURCE_NODE_ID = 0x060F; // Dest Node Id\n\nexport var TAG_DEST_NODE_ID = 0x0610; // Billing Identification\n\nexport var TAG_BILLING_IDENTIFICATION = 0x060B; // Originating MSC Address\n\nexport var TAG_ORIG_MSC_ADDR = 0x8081; // Destination MSC Address\n\nexport var TAG_DEST_MSC_ADDR = 0x8082; // Destination Address Subunit\n\nexport var TAG_DEST_ADDR_SUBUNIT = 0x0005; // Destination Network Type\n\nexport var TAG_DEST_NETWORK_TYPE = 0x0006; // Destination Bearer Type\n\nexport var TAG_DEST_BEAR_TYPE = 0x0007; // Destination Telematics ID\n\nexport var TAG_DEST_TELE_ID = 0x0008; // Source Address Subunit\n\nexport var TAG_SOURCE_ADDR_SUBUNIT = 0x000D; // Source Network Type\n\nexport var TAG_SOURCE_NETWORK_TYPE = 0x000E; // Source Bearer Type\n\nexport var TAG_SOURCE_BEAR_TYPE = 0x000F; // Source Telematics ID\n\nexport var TAG_SOURCE_TELE_ID = 0x0010; // QOS Time to Live\n\nexport var TAG_QOS_TIME_TO_LIVE = 0x0017; // Additional Status Info Text\n\nexport var TAG_ADD_STATUS_INFO = 0x001D; // Receipted Message ID\n\nexport var TAG_RECEIPTED_MSG_ID = 0x001E; // MS Message Wait Facilities\n\nexport var TAG_MS_MSG_WAIT_FACILITIES = 0x0030;\nexport var SMPP_TLV_TAG_IDS = [TAG_SOURCE_TELEMATICS_ID, TAG_PAYLOAD_TYPE, TAG_PRIVACY_INDICATOR, TAG_USER_MESSAGE_REFERENCE, TAG_USER_RESPONSE_CODE, TAG_SOURCE_PORT, TAG_DESTINATION_PORT, TAG_SAR_MSG_REF_NUM, TAG_LANGUAGE_INDICATOR, TAG_SAR_TOTAL_SEGMENTS, TAG_SAR_SEGMENT_SEQNUM, TAG_SOURCE_SUBADDRESS, TAG_DEST_SUBADDRESS, TAG_CALLBACK_NUM, TAG_MESSAGE_PAYLOAD, TAG_SC_INTERFACE_VERSION, TAG_DISPLAY_TIME, TAG_MS_VALIDITY, TAG_DPF_RESULT, TAG_SET_DPF, TAG_MS_AVAIL_STATUS, TAG_NETWORK_ERROR_CODE, TAG_DELIVERY_FAILURE_REASON, TAG_MORE_MSGS_TO_FOLLOW, TAG_MSG_STATE, TAG_CONGESTION_STATE, TAG_CALLBACK_NUM_PRES_IND, TAG_CALLBACK_NUM_ATAG, TAG_NUM_MSGS, TAG_SMS_SIGNAL, TAG_ALERT_ON_MSG_DELIVERY, TAG_ITS_REPLY_TYPE, TAG_ITS_SESSION_INFO, TAG_USSD_SERVICE_OP, TAG_BROADCAST_CHANNEL_INDICATOR, TAG_BROADCAST_CONTENT_TYPE, TAG_BROADCAST_CONTENT_TYPE_INFO, TAG_BROADCAST_MESSAGE_CLASS, TAG_BROADCAST_REP_NUM, TAG_BROADCAST_FREQUENCY_INTERVAL, TAG_BROADCAST_AREA_IDENTIFIER, TAG_BROADCAST_ERROR_STATUS, TAG_BROADCAST_AREA_SUCCESS, TAG_BROADCAST_END_TIME, TAG_BROADCAST_SERVICE_GROUP, TAG_SOURCE_NETWORK_ID, TAG_DEST_NETWORK_ID, TAG_SOURCE_NODE_ID, TAG_DEST_NODE_ID, TAG_BILLING_IDENTIFICATION, TAG_ORIG_MSC_ADDR, TAG_DEST_MSC_ADDR, TAG_DEST_ADDR_SUBUNIT, TAG_DEST_NETWORK_TYPE, TAG_DEST_BEAR_TYPE, TAG_DEST_TELE_ID, TAG_SOURCE_ADDR_SUBUNIT, TAG_SOURCE_NETWORK_TYPE, TAG_SOURCE_BEAR_TYPE, TAG_SOURCE_TELE_ID, TAG_QOS_TIME_TO_LIVE, TAG_ADD_STATUS_INFO, TAG_RECEIPTED_MSG_ID, TAG_MS_MSG_WAIT_FACILITIES];\nexport var SMPP_TLV_TAGS = [{\n  tag: TAG_SOURCE_TELEMATICS_ID,\n  name: \"TAG_SOURCE_TELEMATICS_ID\"\n}, {\n  tag: TAG_PAYLOAD_TYPE,\n  name: \"TAG_PAYLOAD_TYPE\"\n}, {\n  tag: TAG_PRIVACY_INDICATOR,\n  name: \"TAG_PRIVACY_INDICATOR\"\n}, {\n  tag: TAG_USER_MESSAGE_REFERENCE,\n  name: \"TAG_USER_MESSAGE_REFERENCE\"\n}, {\n  tag: TAG_USER_RESPONSE_CODE,\n  name: \"TAG_USER_RESPONSE_CODE\"\n}, {\n  tag: TAG_SOURCE_PORT,\n  name: \"TAG_SOURCE_PORT\"\n}, {\n  tag: TAG_DESTINATION_PORT,\n  name: \"TAG_DESTINATION_PORT\"\n}, {\n  tag: TAG_SAR_MSG_REF_NUM,\n  name: \"TAG_SAR_MSG_REF_NUM\"\n}, {\n  tag: TAG_LANGUAGE_INDICATOR,\n  name: \"TAG_LANGUAGE_INDICATOR\"\n}, {\n  tag: TAG_SAR_TOTAL_SEGMENTS,\n  name: \"TAG_SAR_TOTAL_SEGMENTS\"\n}, {\n  tag: TAG_SAR_SEGMENT_SEQNUM,\n  name: \"TAG_SAR_SEGMENT_SEQNUM\"\n}, {\n  tag: TAG_SOURCE_SUBADDRESS,\n  name: \"TAG_SOURCE_SUBADDRESS\"\n}, {\n  tag: TAG_DEST_SUBADDRESS,\n  name: \"TAG_DEST_SUBADDRESS\"\n}, {\n  tag: TAG_CALLBACK_NUM,\n  name: \"TAG_CALLBACK_NUM\"\n}, {\n  tag: TAG_MESSAGE_PAYLOAD,\n  name: \"TAG_MESSAGE_PAYLOAD\"\n}, {\n  tag: TAG_SC_INTERFACE_VERSION,\n  name: \"TAG_SC_INTERFACE_VERSION\"\n}, {\n  tag: TAG_DISPLAY_TIME,\n  name: \"TAG_DISPLAY_TIME\"\n}, {\n  tag: TAG_MS_VALIDITY,\n  name: \"TAG_MS_VALIDITY\"\n}, {\n  tag: TAG_DPF_RESULT,\n  name: \"TAG_DPF_RESULT\"\n}, {\n  tag: TAG_SET_DPF,\n  name: \"TAG_SET_DPF\"\n}, {\n  tag: TAG_MS_AVAIL_STATUS,\n  name: \"TAG_MS_AVAIL_STATUS\"\n}, {\n  tag: TAG_NETWORK_ERROR_CODE,\n  name: \"TAG_NETWORK_ERROR_CODE\"\n}, {\n  tag: TAG_DELIVERY_FAILURE_REASON,\n  name: \"TAG_DELIVERY_FAILURE_REASON\"\n}, {\n  tag: TAG_MORE_MSGS_TO_FOLLOW,\n  name: \"TAG_MORE_MSGS_TO_FOLLOW\"\n}, {\n  tag: TAG_MSG_STATE,\n  name: \"TAG_MSG_STATE\"\n}, {\n  tag: TAG_CONGESTION_STATE,\n  name: \"TAG_CONGESTION_STATE\"\n}, {\n  tag: TAG_CALLBACK_NUM_PRES_IND,\n  name: \"TAG_CALLBACK_NUM_PRES_IND\"\n}, {\n  tag: TAG_CALLBACK_NUM_ATAG,\n  name: \"TAG_CALLBACK_NUM_ATAG\"\n}, {\n  tag: TAG_NUM_MSGS,\n  name: \"TAG_NUM_MSGS\"\n}, {\n  tag: TAG_SMS_SIGNAL,\n  name: \"TAG_SMS_SIGNAL\"\n}, {\n  tag: TAG_ALERT_ON_MSG_DELIVERY,\n  name: \"TAG_ALERT_ON_MSG_DELIVERY\"\n}, {\n  tag: TAG_ITS_REPLY_TYPE,\n  name: \"TAG_ITS_REPLY_TYPE\"\n}, {\n  tag: TAG_ITS_SESSION_INFO,\n  name: \"TAG_ITS_SESSION_INFO\"\n}, {\n  tag: TAG_USSD_SERVICE_OP,\n  name: \"TAG_USSD_SERVICE_OP\"\n}, {\n  tag: TAG_BROADCAST_CHANNEL_INDICATOR,\n  name: \"TAG_BROADCAST_CHANNEL_INDICATOR\"\n}, {\n  tag: TAG_BROADCAST_CONTENT_TYPE,\n  name: \"TAG_BROADCAST_CONTENT_TYPE\"\n}, {\n  tag: TAG_BROADCAST_CONTENT_TYPE_INFO,\n  name: \"TAG_BROADCAST_CONTENT_TYPE_INFO\"\n}, {\n  tag: TAG_BROADCAST_MESSAGE_CLASS,\n  name: \"TAG_BROADCAST_MESSAGE_CLASS\"\n}, {\n  tag: TAG_BROADCAST_REP_NUM,\n  name: \"TAG_BROADCAST_REP_NUM\"\n}, {\n  tag: TAG_BROADCAST_FREQUENCY_INTERVAL,\n  name: \"TAG_BROADCAST_FREQUENCY_INTERVAL\"\n}, {\n  tag: TAG_BROADCAST_AREA_IDENTIFIER,\n  name: \"TAG_BROADCAST_AREA_IDENTIFIER\"\n}, {\n  tag: TAG_BROADCAST_ERROR_STATUS,\n  name: \"TAG_BROADCAST_ERROR_STATUS\"\n}, {\n  tag: TAG_BROADCAST_AREA_SUCCESS,\n  name: \"TAG_BROADCAST_AREA_SUCCESS\"\n}, {\n  tag: TAG_BROADCAST_END_TIME,\n  name: \"TAG_BROADCAST_END_TIME\"\n}, {\n  tag: TAG_BROADCAST_SERVICE_GROUP,\n  name: \"TAG_BROADCAST_SERVICE_GROUP\"\n}, {\n  tag: TAG_SOURCE_NETWORK_ID,\n  name: \"TAG_SOURCE_NETWORK_ID\"\n}, {\n  tag: TAG_DEST_NETWORK_ID,\n  name: \"TAG_DEST_NETWORK_ID\"\n}, {\n  tag: TAG_SOURCE_NODE_ID,\n  name: \"TAG_SOURCE_NODE_ID\"\n}, {\n  tag: TAG_DEST_NODE_ID,\n  name: \"TAG_DEST_NODE_ID\"\n}, {\n  tag: TAG_BILLING_IDENTIFICATION,\n  name: \"TAG_BILLING_IDENTIFICATION\",\n  specRef: \"\"\n}, {\n  tag: TAG_ORIG_MSC_ADDR,\n  name: \"TAG_ORIG_MSC_ADDR\"\n}, {\n  tag: TAG_DEST_MSC_ADDR,\n  name: \"TAG_DEST_MSC_ADDR\"\n}, {\n  tag: TAG_DEST_ADDR_SUBUNIT,\n  name: \"TAG_DEST_ADDR_SUBUNIT\"\n}, {\n  tag: TAG_DEST_NETWORK_TYPE,\n  name: \"TAG_DEST_NETWORK_TYPE\"\n}, {\n  tag: TAG_DEST_BEAR_TYPE,\n  name: \"TAG_DEST_BEAR_TYPE\"\n}, {\n  tag: TAG_DEST_TELE_ID,\n  name: \"TAG_DEST_TELE_ID\"\n}, {\n  tag: TAG_SOURCE_ADDR_SUBUNIT,\n  name: \"TAG_SOURCE_ADDR_SUBUNIT\"\n}, {\n  tag: TAG_SOURCE_NETWORK_TYPE,\n  name: \"TAG_SOURCE_NETWORK_TYPE\"\n}, {\n  tag: TAG_SOURCE_BEAR_TYPE,\n  name: \"TAG_SOURCE_BEAR_TYPE\"\n}, {\n  tag: TAG_SOURCE_TELE_ID,\n  name: \"TAG_SOURCE_TELE_ID\"\n}, {\n  tag: TAG_QOS_TIME_TO_LIVE,\n  name: \"TAG_QOS_TIME_TO_LIVE\"\n}, {\n  tag: TAG_ADD_STATUS_INFO,\n  name: \"TAG_ADD_STATUS_INFO\"\n}, {\n  tag: TAG_RECEIPTED_MSG_ID,\n  name: \"TAG_RECEIPTED_MSG_ID\"\n}, {\n  tag: TAG_MS_MSG_WAIT_FACILITIES,\n  name: \"TAG_MS_MSG_WAIT_FACILITIES\"\n}];","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar DissectingContext =\n/*#__PURE__*/\nfunction () {\n  function DissectingContext(initialBuffer) {\n    _classCallCheck(this, DissectingContext);\n\n    this.offset = 0;\n    this.processingBuffer = initialBuffer;\n    this.processedVariables = {};\n    this.initialBuffer = initialBuffer;\n    this.previoudBuffer = initialBuffer;\n    this.initialBufferLength = initialBuffer.byteLength;\n    this.boundVars = {};\n  }\n\n  _createClass(DissectingContext, [{\n    key: \"checkLength\",\n    value: function checkLength(fieldDescription) {\n      if (typeof fieldDescription.fieldLength !== \"undefined\") {\n        if (this.offset + fieldDescription.fieldLength > this.initialBufferLength) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"pushBuffer\",\n    value: function pushBuffer(newBuffer) {\n      this.previoudBuffer = this.processingBuffer;\n      this.processingBuffer = newBuffer;\n      var currentOffset = this.offset;\n      var newLength = this.processingBuffer.byteLength;\n      var fieldLength = this.initialBufferLength - currentOffset - newLength;\n      this.offset += fieldLength;\n      return {\n        offset: currentOffset,\n        length: fieldLength,\n        buffer: this.previoudBuffer.slice(0, fieldLength)\n      };\n    }\n  }]);\n\n  return DissectingContext;\n}();\n\nexport default DissectingContext;","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Notifications =\n/*#__PURE__*/\nfunction () {\n  function Notifications() {\n    _classCallCheck(this, Notifications);\n\n    this.messages = [];\n  }\n\n  _createClass(Notifications, [{\n    key: \"addNotification\",\n    value: function addNotification(tag, body, offset) {\n      this.messages.push({\n        tag: tag,\n        body: body,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this.messages;\n    }\n  }, {\n    key: \"getByTagName\",\n    value: function getByTagName(tag) {\n      return this.messages.filter(function (item) {\n        return item.tag === tag;\n      });\n    }\n  }]);\n\n  return Notifications;\n}();\n\nexport default Notifications;","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport Notifications from \"./Notifications\";\n\nvar DissectingResult = function DissectingResult() {\n  _classCallCheck(this, DissectingResult);\n\n  this.data = [];\n  this.notifications = new Notifications();\n};\n\nexport default DissectingResult;","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport bitsyntax from 'ut-bitsyntax';\nimport * as CONSTANTS from './constants';\nimport { SMPP_HEADER } from \"./constants\";\nimport DissectingContext from \"./DissectingContext\";\nimport Notifications from \"./Notifications\";\nimport DissectingResult from \"./DissectingResult\";\nimport { SMPP_COMMANDS_DESCRIPTIONS } from \"./constants\";\nimport { SMPP_TLV_TAGS } from \"./constants\";\n\nvar SmppDecoder =\n/*#__PURE__*/\nfunction () {\n  function SmppDecoder() {\n    _classCallCheck(this, SmppDecoder);\n\n    this.logLevel = \"none\";\n  }\n\n  _createClass(SmppDecoder, [{\n    key: \"trace\",\n    value: function trace(logLevel) {\n      if (this.logLevel !== \"none\") {\n        for (var _len = arguments.length, msg = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          msg[_key - 1] = arguments[_key];\n        }\n\n        console.log(msg);\n      }\n    }\n  }, {\n    key: \"useLogLevel\",\n    value: function useLogLevel(level) {\n      this.logLevel = level;\n      return this;\n    }\n    /**\n     *\n     * @param buf\n     * @param ignoreHeader\n     * @param defaultCommandId\n     * @returns {boolean|*|boolean|*}\n     */\n\n  }, {\n    key: \"decode\",\n    value: function decode(buf) {\n      var ignoreHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var defaultCommandId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"SUBMIT_SM\";\n      this.trace(\"trace\", \"start decoding\", buf, ignoreHeader, defaultCommandId);\n      var ctx = new DissectingContext(buf);\n      var result = new DissectingResult(); // Do not parse header\n\n      if (!ignoreHeader) {\n        for (var fieldName in SMPP_HEADER) {\n          var fieldDescription = SMPP_HEADER[fieldName];\n\n          try {\n            this.decodeField(fieldName, fieldDescription, ctx, result);\n          } catch (e) {\n            break;\n          }\n        }\n      }\n\n      var bodyFieldDescription = SMPP_COMMANDS_DESCRIPTIONS[defaultCommandId];\n\n      for (var _fieldName in bodyFieldDescription.pattern) {\n        if (_fieldName === \"tlvs\") {\n          // parse TLVs\n          var pattern = bitsyntax.parse('t:16/integer,l:16/integer,v:l/binary,rest/binary');\n\n          do {\n            var tlvMatch = bitsyntax.match(pattern, ctx.processingBuffer);\n\n            if (tlvMatch !== false) {\n              var obj = ctx.pushBuffer(tlvMatch.rest);\n              obj.name = this.getTlvName(tlvMatch.t);\n              obj.value = this.interpretValue(obj.name, tlvMatch.v.toString());\n              result.data.push(obj);\n            } else {\n              result.notifications.addNotification(\"tlv\", \"Error on processing TLV\", ctx.offset);\n              break;\n            }\n          } while (ctx.processingBuffer.byteLength > 0);\n        } else {\n          var _fieldDescription = bodyFieldDescription.pattern[_fieldName];\n          this.trace(\"trace\", \"Field description\", _fieldDescription);\n\n          try {\n            this.decodeField(_fieldName, _fieldDescription, ctx, result);\n          } catch (e) {\n            break;\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"decodeField\",\n    value: function decodeField(fieldName, fieldDescription, ctx, result) {\n      if (!ctx.checkLength(fieldDescription)) {\n        result.notifications.addNotification(fieldName, \"Not enough data in buffer. Need: \".concat(fieldDescription.fieldLength, \" but have:\").concat(ctx.initialBufferLength - ctx.offset), ctx.offset); // Todo: тут что-то сделать надо\n\n        throw new Error(\"Not enough data n  buffer\");\n      }\n\n      var matchedObject = bitsyntax.match(this.getPattern(fieldDescription), ctx.processingBuffer, ctx.boundVars);\n\n      if (!matchedObject) {\n        result.notifications.addNotification(fieldName, \"Error on dissecting field:\".concat(fieldName), ctx.offset); // Todo: тут что-то сделать надо\n\n        throw new Error(\"Not enough data n  buffer\");\n      } else {\n        var obj = ctx.pushBuffer(matchedObject.rest);\n        obj.name = fieldName;\n        obj.value = this.interpretValue(fieldName, matchedObject[fieldName], fieldDescription);\n\n        if (typeof fieldDescription.specRef !== \"undefined\") {\n          obj.specRef = fieldDescription.specRef;\n        }\n\n        ctx.boundVars[fieldName] = obj.value.raw;\n        result.data.push(obj);\n      }\n    }\n  }, {\n    key: \"interpretValue\",\n    value: function interpretValue(field, value, header) {\n      var interpreted = value;\n\n      if (typeof header !== \"undefined\" && typeof header.interpret !== \"undefined\") {\n        interpreted = header.interpret(value);\n      }\n\n      return {\n        interpreted: interpreted,\n        raw: value\n      };\n    }\n  }, {\n    key: \"getPattern\",\n    value: function getPattern(descr) {\n      if (typeof descr.pattern !== \"undefined\") {\n        return this.compilePattern(descr.pattern);\n      } else {\n        return this.compilePattern(descr);\n      }\n    }\n  }, {\n    key: \"compilePattern\",\n    value: function compilePattern(ptr) {\n      if (typeof ptr === \"string\") {\n        return bitsyntax.parse(ptr + \",rest/binary\");\n      } else {\n        return ptr;\n      }\n    }\n  }, {\n    key: \"getTlvName\",\n    value: function getTlvName(tag) {\n      for (var i in SMPP_TLV_TAGS) {\n        if (tag === SMPP_TLV_TAGS[i].tag) {\n          return SMPP_TLV_TAGS[i].name;\n        }\n      }\n\n      return \"UNKNOWN_TLV\";\n    }\n  }]);\n\n  return SmppDecoder;\n}();\n\nexport default SmppDecoder;"],"sourceRoot":""}