{"version":3,"sources":["HexDump/SimpleHexDump.js","Utils.js","pages/SmppDecoderPage.js","../../js-smpp/index.js","pages/test/TestHexDumpPage.js","components/Menu.js","routes.js","pages/HomePage.js","pages/HexDumpPage.js","pages/EncodingsPage.js","App.js","index.js","../../js-smpp/src/constants.js","../../js-smpp/src/DissectingContext.js","../../js-smpp/src/Notifications.js","../../js-smpp/src/DissectingResult.js","../../js-smpp/src/SmppDecoder.js"],"names":["SimpleHexDump","props","_this","Object","_home_wiz_TRASH_utils_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_wiz_TRASH_utils_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_wiz_TRASH_utils_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","showOffset","showHex","showCharacters","currentGroup","onFilterClick","bind","_home_wiz_TRASH_utils_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","filterName","setState","assign","hexDumpLength","hexdump","byteLength","minimumLength10","Math","ceil","log10","minimumLength16","log2","offsets","offset","push","toString","padStart","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","key","className","dump","endGroup","startGroup","readUInt8","dangerouslySetInnerHTML","__html","join","charCode","char","Utils","Text","isPrint","String","fromCodePoint","array","groups","length","i","curGroup","name","_this2","panels","renderOffsetPanel","renderHexPanel","renderCharactersPanel","map","el","index","style","padding","type","checked","onChange","Component","defaultProps","val","HexSymbols","intToHex","byteToHex","halfByteToHex","charAt","stringToHex","s","result","charCodeAt","hexToIntArray","hexString","upperHexString","toUpperCase","currentValue","indexOf","intArrayToString","intArray","fromCharCode","Hex","cleanup","replace","Encoding","GSM0338","basicSet","extendedSet","mapping","escCharacter","isRepresentable","str","isCharRepresentable","character","Buffer","create","data","position","cap","readByte","b","readShort","res","readInt","Bytes","readLong","Smpp","DataTypes","Integer","read","buf","CString","SmppDecoderPage","value","buffer","meta","window","location","hash","substr","from","atob","doDecode","change","decodedData","notifications","keys","decodedField","specRef","_HexDump_SimpleHexDump__WEBPACK_IMPORTED_MODULE_8__","raw","getAll","_ref","tag","body","console","log","width","rows","placeholder","defaultValue","href","react__WEBPACK_IMPORTED_MODULE_6__","title","decoder","SmppDecoder","trim","decode","e","target","btoa","module","exports","__webpack_require__","TestHexDumpPage","react__WEBPACK_IMPORTED_MODULE_5___default","_HexDump_SimpleHexDump__WEBPACK_IMPORTED_MODULE_6__","colSpan","fontSize","paddingRight","paddingLeft","Menu","react_default","NavLink","activeClassName","to","PATH_ENCODING","HomePage","HexDumpPage","EncodingsPage","encodingName","Row","params","arguments","encodingParameterizedPage","match","EncodingsPage_EncodingsPage","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","oldText","text","assertThisInitialized","BrowserRouter","basename","concat","process","components_Menu","role","Switch","Route","exact","path","component","ROUTES","ReactDOM","render","src_App_0","document","getElementById","SMPP_HEADER","packetLength","pattern","fieldLength","commandId","interpret","v","cmdId","SMPP_COMMANDS_DESCRIPTIONS","status","sequenceNumber","GENERIC_NACK","mtid","BIND_RECEIVER","systemId","password","systemType","interfaceVersion","addrTon","addrNpi","addressRange","BIND_RECEIVER_RESP","tlvs","BIND_TRANSMITTER","BIND_TRANSMITTER_RESP","QUERY_SM","messageId","sourceAddrTon","sourceAddrNpi","sourceAddr","QUERY_SM_RESP","finalDate","messageState","errorCode","SUBMIT_SM","serviceType","destAddrTon","destAddrNpi","destinationAddr","esmClass","protocolId","priorityFlag","scheduleDeliveryTime","validityPeriod","registeredDelivery","replaceIfPresentFlag","dataCoding","smDefaultMsgId","smLength","shortMessage","SUBMIT_SM_RESP","DELIVER_SM","DELIVER_SM_RESP","UNBIND","UNBIND_RESP","REPLACE_SM","REPLACE_SM_RESP","CANCEL_SM","CANCEL_SM_RESP","BIND_TRANSCEIVER","BIND_TRANSCEIVER_RESP","OUTBIND","example","ENQUIRE_LINK","ENQUIRE_LINK_RESP","ALERT_NOTIFICATION","DATA_SM","DATA_SM_RESP","src_DissectingContext","DissectingContext","initialBuffer","processingBuffer","processedVariables","previoudBuffer","initialBufferLength","boundVars","createClass","fieldDescription","newBuffer","currentOffset","newLength","slice","src_Notifications","Notifications","messages","filter","item","src_DissectingResult","DissectingResult","SmppDecoder_SmppDecoder","logLevel","_len","msg","Array","_key","level","ignoreHeader","undefined","defaultCommandId","trace","ctx","fieldName","decodeField","bodyFieldDescription","_fieldName","_fieldDescription","checkLength","addNotification","Error","matchedObject","ut_bitsyntax_default","getPattern","obj","pushBuffer","rest","interpretValue","field","header","interpreted","descr","compilePattern","ptr","parse","__webpack_exports__"],"mappings":"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","file":"static/js/main.747d26a1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Utils from \"../Utils\";\nimport \"./simple-hex-dump.css\";\nimport \"../color-groups.css\";\n\nclass SimpleHexDump extends Component {\n    constructor(props) {\n        super(props);\n\n        this\n            .state = {\n                showOffset: this.props.showOffset,\n                showHex: this.props.showHex,\n                showCharacters: this.props.showCharacters\n            };\n\n        this.currentGroup=0;\n\n        this.onFilterClick = this.onFilterClick.bind(this);\n    }\n    onFilterClick(filterName) {\n        let state = this.state;\n\n        state[filterName] = !state[filterName];\n\n        this.setState(Object.assign({}, state));\n    }\n    renderOffsetPanel() {\n        let hexDumpLength = this.props.hexdump.byteLength;\n\n        let minimumLength10 = Math.ceil(Math.log10(hexDumpLength));\n        let minimumLength16 = Math.ceil(Math.log2(hexDumpLength) / Math.log2(16));\n\n        let offsets = [];\n        let offset = 0;\n        while (offset < hexDumpLength) {\n            offsets\n                .push(\n                    \"0x\"\n                    + offset.toString(16).padStart(minimumLength16,\"0\")\n                    + \":\"\n                    + offset.toString(10).padStart(minimumLength10,\"0\")\n                );\n\n            offset+=16;\n\n            if (offset < hexDumpLength) {\n                offsets.push(<br key={\"offset-offset-\"+offset} />);\n            }\n        }\n\n        return <div className=\"simple-hex-dump-offset-panel\"><code>{offsets}</code></div>;\n    }\n    renderHexPanel() {\n        let dump = [];\n\n        let hexDumpLength = this.props.hexdump.byteLength;\n\n        this.currentGroup = 0;\n\n        for (let offset = 0;offset < hexDumpLength;offset++) {\n            this.endGroup(offset, dump);\n            this.startGroup(offset, dump);\n\n            dump.push(this.props.hexdump.readUInt8(offset).toString(16).padStart(2,\"0\"));\n\n            if (\n                (offset % 4 === 3)\n                && (offset % 16 !== 15)\n            ) {\n                dump.push(\" |\");\n            }\n\n            if (offset % 16 < 15) {\n                dump.push(\" \");\n            }\n\n            if (offset>0 && offset % 16 === 15) {\n                dump.push(\"<br />\");\n            }\n        }\n\n        this.endGroup(hexDumpLength, dump);\n\n        return <div className=\"simple-hex-dump-body-panel\"><code dangerouslySetInnerHTML={{__html:dump.join(\"\")}} /></div>;\n    }\n    renderCharactersPanel() {\n        this.currentGroup = 0;\n\n        let dump = [];\n\n        let hexDumpLength = this.props.hexdump.byteLength;\n\n        for (let offset = 0;offset < hexDumpLength;offset++) {\n            this.endGroup(offset, dump);\n            this.startGroup(offset, dump);\n\n            let charCode = this.props.hexdump.readUInt8(offset);\n\n            let char = Utils.Text.isPrint(charCode) ? String.fromCodePoint(charCode) : \".\";\n\n            dump.push(char);\n\n            if (\n                (offset % 4 === 3)\n                && (offset % 16 !== 15)\n            ) {\n                dump.push(\" |\");\n            }\n\n            if (offset % 16 < 15) {\n                dump.push(\" \");\n            }\n\n            if (offset>0 && offset % 16 === 15) {\n                dump.push(\"<br  />\");\n            }\n        }\n\n        this.endGroup(hexDumpLength, dump);\n\n        return <div className=\"simple-hex-dump-characters-panel\"><code dangerouslySetInnerHTML={{__html: dump.join(\"\")}} /></div>;\n    }\n    startGroup(offset, array) {\n        if (typeof this.props.groups === \"undefined\" || this.props.groups.length == 0) {\n            return ;\n        }\n        for (let i in this.props.groups) {\n            let curGroup = this.props.groups[i];\n\n            if (curGroup.offset === offset) {\n                this.currentGroup++;\n\n                array.push(\"<span class=\\\"color-group\"+this.currentGroup+\"\\\" title=\\\"\"+curGroup.name+\"\\\">\");\n\n                break;\n            }\n        }\n    }\n    endGroup(offset, array) {\n        if (typeof this.props.groups === \"undefined\" || this.props.groups.length == 0) {\n            return ;\n        }\n        for (let i in this.props.groups) {\n            let curGroup = this.props.groups[i];\n\n            if (curGroup.offset + curGroup.length === offset) {\n                array.push(\"</span>\");\n                break;\n            }\n        }\n    }\n    render() {\n        this.currentGroup=0;\n\n        if (\n            typeof this.props.hexdump === \"undefined\"\n            || this.props.hexdump == null\n        ) {\n            return \"\";\n        }\n\n        let panels = [];\n\n        if (this.state.showOffset) {\n            panels.push(this.renderOffsetPanel());\n        }\n\n        if (this.state.showHex) {\n            panels.push(this.renderHexPanel());\n        }\n\n        if (this.state.showCharacters) {\n            panels.push(this.renderCharactersPanel());\n        }\n\n        return (\n            <div className=\"a1s-simple-hex-dump\">\n                <table className=\"simple-hex-dump\">\n                    <tbody>\n                        <tr>\n                            {panels.map((el, index) => <td key={\"of\"+index} style={{padding:\"0px 10px\"}}>{el}</td>)}\n                        </tr>\n                    </tbody>\n                </table>\n                <div>\n                    <label className=\"a1s-simple-hex-dump-btn-xs\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-element\"\n                            checked={this.state.showOffset}\n                            onChange={()=>this.onFilterClick(\"showOffset\")}\n                        />Offset\n                    </label>\n\n                    <label className=\"a1s-simple-hex-dump-btn-xs\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-element\"\n                            checked={this.state.showHex}\n                            onChange={()=>this.onFilterClick(\"showHex\")}\n                        />Hex\n                    </label>\n\n                    <label className=\"a1s-simple-hex-dump-btn-xs\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-element\"\n                            checked={this.state.showCharacters}\n                            onChange={()=>this.onFilterClick(\"showCharacters\")}\n                        />Characters\n                    </label>\n                </div>\n            </div>\n        );\n    }\n}\n\nSimpleHexDump.propTypes = {\n    hexdump: PropTypes.object.isRequired,\n    groups: PropTypes.array\n};\n\nSimpleHexDump.defaultProps = {\n    showOffset: true,\n    showHex: true,\n    showCharacters: true,\n};\n\nexport default SimpleHexDump;","let Utils = {};\nUtils.Text = {};\nUtils.Text.isPrint=function(val) {\n\tif (val > 0x20 && val < 0x7f) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\nUtils.Text.HexSymbols = \"0123456789ABCDEF\";\nUtils.Text.intToHex = function(val) {\n\tif (val > 255) {\n\t\t//var H = Utils.Text.byteToHex(val >> 8);\n\t\tvar H = Utils.Text.intToHex(val >> 8);\n\t\tvar L = Utils.Text.byteToHex(val & 0xFF);\n\t\t\t\t\n\t\treturn \"\"+H+L;\n\t} else {\n\t\treturn Utils.Text.byteToHex(val);\n\t}\n};\nUtils.Text.byteToHex = function(val) {\n\tvar H = Utils.Text.halfByteToHex(val >> 4);\n\tvar L =\tUtils.Text.halfByteToHex(val & 0xF);\n\t\n\treturn \"\"+H+L;\n};\nUtils.Text.halfByteToHex = function(val) {\n\treturn Utils.Text.HexSymbols.charAt(val & 0xF);\n};\n\nUtils.Text.stringToHex=function(s) {\n\tvar result=[];\n\tfor (var i=0;i<s.length;i++) {\n\t\tresult.push(Utils.Text.intToHex(s.charCodeAt(i)));\n\t}\n\t\n\treturn result.join('');\n};\n\nUtils.Text.hexToIntArray=function(hexString) {\n\tvar upperHexString = hexString.toUpperCase();\n\t\n\tvar result=[];\n\tvar currentValue=0;\n\tfor (var i=0;i<upperHexString.length;i++) {\n\t\tif (i % 2 === 1) {\n\t\t\tcurrentValue |= Utils.Text.HexSymbols.indexOf(upperHexString.charAt(i)); \n\t\t\tresult.push(currentValue);\t\t\t\t\t\t\n\t\t} else {\n\t\t\tcurrentValue = Utils.Text.HexSymbols.indexOf(upperHexString.charAt(i)) << 4; \n\t\t}\n\t}\n\t\t\t \n\treturn result;\t \n};\n\nUtils.Text.intArrayToString=function(intArray) {\n\tvar result=[];\n\t\n\tfor (var i=0;i<intArray.length;i++) {\n\t\tresult.push(String.fromCharCode(intArray[i]));\n\t}\n\t\t\t \n\treturn result.join('');\t \n};\n\nUtils.Text.Hex = {};\n\nUtils.Text.Hex.cleanup = function(hexString) {\n\tif (hexString == null) {\n\t\treturn \"\";\n\t}\n\n    var text = hexString.replace(/[^0-9a-fA-F]/gim,\"\");\n\n    return text;\n};\n\nUtils.Text.Encoding = {};\n\nUtils.Text.Encoding.GSM0338 = {};\n\nUtils.Text.Encoding.GSM0338.basicSet = \"@£$¥èéùìòÇ\\rØø\\nÅåΔ_ΦΓΛΩΠΨΣΘΞ@ÆæßÉ !\\\"#¤%&'()*+,-./0123456789:;<=>?¡ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÑÜ§¿abcdefghijklmnopqrstuvwxyzäöñüà\";\nUtils.Text.Encoding.GSM0338.extendedSet = \"|^€{}[~]\\\\\";\nUtils.Text.Encoding.GSM0338.mapping = [0x40, 0x14, 0x65, 0x28, 0x29, 0x3c, 0x3d, 0x3e, 0x2f];\nUtils.Text.Encoding.GSM0338.escCharacter = 0x1B;\n\nUtils.Text.Encoding.GSM0338.isRepresentable = function(str) {\n\tif (str === null || str.length === 0) {\n\t\treturn true;\n\t}\n\n\t/*if (str.length > 1) {\n\t\tfor (var i=0;i<str.length;i++) {\n\t\t\tvar res = Utils.Text.Encoding.GSM0338.isRepresentable(str.charCodeAt());\n\t\t}\n\t}*/\n\treturn false;\n};\n\nUtils.Text.Encoding.GSM0338.isCharRepresentable = function(character) {\n\tvar basicPosition = Utils.Text.Encoding.GSM0338.basicSet.indexOf(character);\n\n\tif (basicPosition >= 0) {\n        return true;\n    }\n\n    var extendedPosition = Utils.Text.Encoding.GSM0338.extendedSet.indexOf(character);\n\n\tif (extendedPosition >= 0) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nUtils.Buffer = {};\n\nUtils.Buffer.create = function(intArray) {\n\tvar buffer = {\n\t\tdata: intArray,\n\t\tlength: intArray.length,\n\t\tposition:0,\n\t\tcap:function() {\n\t\t\treturn this.length - this.position;\n\t\t},\n\t\treadByte:function() {\n\t\t\tvar b = this.data[this.position];\n\t\t\tthis.position++;\n\t\t\t\n\t\t\treturn b;\n\t\t},\n\t\treadShort:function() {\n\t\t  var res = 0;\n\t\t\tfor (var i=0;i<2;i++) {\n\t\t\t\tres = (res << 8) + this.readByte();\n\t\t\t}\n\n\t\t\treturn res;\t\n\t\t},\n\t\treadInt:function() {\n\t\t\tvar res = 0;\n\t\t\tfor (var i=0;i<4;i++) {\n\t\t\t\tres = (res << 8) + this.readByte();\n\t\t\t}\n\n\t\t\treturn res;\n\t\t}\n\t};\n\t\n\treturn buffer;\n};\n\nUtils.Bytes = {};\n\nUtils.Bytes.readLong=function(array) {\n\tvar res = 0;\n\tfor (let i=0;i<4;i++) {\n\t\tres = (res << 8) + array[i];\n\t}\n\t\n\treturn res;\n}\n\nUtils.Smpp = {};\n\nUtils.Smpp.DataTypes = {};\n\nUtils.Smpp.DataTypes.Integer = {\n\tread:function(buf) {\n\t\treturn buf.readInt();\n\t}\n};\nUtils.Smpp.DataTypes.CString = {};\nUtils.Smpp.DataTypes.String = {};\nUtils.Smpp.DataTypes.Integer = {};\n/*\nvar hexDumpStr=\"0000007500000004000000000000000200010131393438000000313233343536373839000000000000000003000568656C6C6F000500010000070001010006000101000800020000042400000019000100020F000101020E0001010421000101000D000100000F000101000E000101001000020000\";\n\nvar intArr = Utils.Text.hexToIntArray(hexDumpStr);\n\nvar buf = Utils.Buffer.create(intArr);\n\nconsole.log(\"Length:\" + buf.readInt() +\":\" + buf.cap());\nconsole.log(\"Command ID:\" + buf.readInt() +\":\" + buf.cap());\nconsole.log(\"Status:\" + buf.readInt() +\":\" + buf.cap());\nconsole.log(\"Sequence number:\"+buf.readInt() +\":\" + buf.cap());*/\n\n\nexport default Utils;","import React, {Component, Fragment} from 'react';\nimport SmppDecoder from 'js-smpp';\nimport SimpleHexDump from \"../HexDump/SimpleHexDump\";\n\nclass SmppDecoderPage extends Component {\n    constructor(props){\n        super(props);\n\n        let state = {value:null,buffer:null,result:null, meta: null};\n\n        if (window.location.hash !== null ) {\n            let hash = window.location.hash.substr(1);\n\n            let buf = Buffer.from(atob(hash));\n\n            state = this.doDecode(buf.toString(\"hex\"));\n        }\n\n        this.state = state;\n\n        this.change = this.change.bind(this);\n    }\n    render() {\n        let decodedData = null;\n        let notifications = null;\n\n        if (this.state.result !== null) {\n            decodedData =\n                Object\n                    .keys(this.state.result.data)\n                    .map(\n                        (key) => {\n                            let decodedField = this.state.result.data[key];\n\n                            return (<tr key={decodedField.name}>\n                                <td>\n                                    <span className=\"text-xs\">no</span>\n                                </td>\n                                <td>\n                                    {decodedField.name}\n                                    {\n                                        typeof decodedField.specRef !== \"undefined\"\n                                        && decodedField.specRef!==\"\" && <div>ref: <span className=\"text-sm\">{decodedField.specRef}</span></div>\n                                    }\n                                </td>\n                                <td>\n                                    <SimpleHexDump\n                                        hexdump={decodedField.buffer}\n                                        showOffset={false}\n                                        showCharacters={false}\n                                    />\n                                </td>\n                                <td>{decodedField.value.raw}</td>\n                                <td></td>\n                            </tr>);\n                        }\n                    );\n\n            notifications =\n                this\n                    .state\n                    .result\n                    .notifications\n                    .getAll()\n                    .map(\n                        ({tag, body, offset}) => <li>{body} at offset:{offset}</li>\n                    );\n        }\n\n        console.log(\"Result\", this.state.result);\n\n        return (\n            <div>\n                <h1>PDU Hex dump</h1>\n                <textarea\n                    style={{width:\"100%\"}}\n                    rows={8}\n                    placeholder=\"Введите HEX-dump SMPP PDU\"\n                    defaultValue={this.state.value}\n                    onChange={this.change}\n                />\n                <div>\n                    <a href={window.location}>Link to this page</a>\n                </div>\n                {\n                    this.state.buffer &&\n                    <Fragment>\n                        <h1>Hex dump representation</h1>\n                        <SimpleHexDump hexdump={this.state.buffer} groups={this.state.result.data} />\n                    </Fragment>\n                }\n\n                <h1>Decoded data</h1>\n                {decodedData !== null &&\n                    <Fragment>\n                        <ol>{notifications}</ol>\n                        <table className=\"table table-stripped\">\n                            <thead>\n                                <tr>\n                                    <th title=\"Validation\">Val</th>\n                                    <th title=\"Field name and specification reference\">Field</th>\n                                    <th title=\"Hex dump representation\">Hex</th>\n                                    <th title=\"Interpreted value\">Value</th>\n                                    <th title=\"Comment\">Comment</th>\n                                </tr>\n                            </thead>\n                            <tbody>{decodedData}</tbody>\n                        </table>\n                    </Fragment>\n\n                }\n            </div>\n        );\n    }\n    doDecode(value) {\n        let decoder = new SmppDecoder();\n\n        value = value.replace(\"~[^0-9a-fA-F]~gim\", \"\").trim();\n\n        if (value.length % 2 === 0) {\n            let buffer = Buffer.from(value, \"hex\");\n\n            try {\n                let result =\n                    decoder\n                        .decode(buffer, true, \"SUBMIT_SM\");\n\n                return ({value, buffer, result});\n            } catch (e) {\n                return ({value, buffer:null, result: null});\n            }\n        }\n    }\n    change(e) {\n        let state = this.doDecode(e.target.value);\n\n        window.location.hash = btoa(state.buffer.toString());\n\n        this.setState(state);\n    }\n}\n\nexport default SmppDecoderPage;","module.exports = require('./src/SmppDecoder');","import React, {Component} from 'react';\nimport SimpleHexDump from \"../../HexDump/SimpleHexDump\";\n\nclass TestHexDumpPage extends Component {\n    render() {\n        let buf =\n            Buffer\n                .from(\n                    [\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                        0,1,5,4,87,8,9,6,4,64,6,46,46,4,6,13,13,4,8,4,1,31,3,165,4,4,8,31,31,68,4,4,\n                    ]);\n\n        console.log(buf.byteLength);\n\n        let groups = [\n            {offset: 0, length: 1, name:\"serviceType\"},\n            {offset: 1, length: 1, name:\"sourceAddrTon\"},\n            {offset: 2, length: 1, name:\"sourceAddrNpi\"},\n            {offset: 3, length: 5, name:\"sourceAddr\"},\n        ];\n\n        return (\n            <div>\n                <SimpleHexDump\n                    hexdump={buf}\n                    groups={groups}\n                />\n\n                <table>\n                    <tr>\n                        <td colSpan=\"3\">\n                            <span style={{fontSize:\"10px\"}}>\n                                <button className=\"btn btn-xs btn-primary\">Show offset</button>\n                                <button className=\"btn btn-xs btn-primary\">Show dump</button>\n                                <button className=\"btn btn-xs btn-primary\">Show characters</button>\n                            </span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style={{paddingRight:\"10px\"}}>\n                            <code>\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                                0x000:000<br />\n                            </code>\n                        </td>\n                        <td style={{paddingLeft:\"5px\",paddingRight:\"5px\"}}>\n                            <code>\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 <span className=\"color-group1\" title=\"serviceType: sms\">00 00 00 00 00 00 00<br />\n                                00 00 00 <span title=\"udh\" className=\"color-group2\">00 00 00 00 00</span> 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00</span> 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                                00 00 00 00 00 00 00 00 00 00 00<br />\n                            </code>\n                        </td>\n                        <td style={{paddingLeft:\"10px\"}}>\n                            <code>\n                                A B C D E F G H I J K L<br />\n                                A B C D <span className=\"color-group1\" title=\"serviceType: sms\">E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J</span> K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                                A B C D E F G H I J K L<br />\n                            </code>\n                        </td>\n\n                    </tr>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default TestHexDumpPage;","import React, {Component} from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport * as ROUTES from '../routes';\n\nclass Menu extends Component {\n    render() {\n        return (\n            <div className=\"sidebar-sticky\">\n                <ul className=\"nav flex-column\">\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_HOME}>\n                            Главная\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_HEX_DUMP}>\n                            Hex-dump\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_SMPP_DECODE}>\n                            Smpp-decoder\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING}>\n                            encodings\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING_GSM}>\n                            Gsm encoding\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING_LATIN1}>\n                            Latin-1 encoding\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING_ASCII}>\n                            Ascii encoding\n                        </NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={ROUTES.PATH_ENCODING_UCS2}>\n                            Ucs2 encoding\n                        </NavLink>\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Menu;","export const PATH_HOME = \"/\";\nexport const PATH_HEX_DUMP = \"/hex-dump\";\nexport const PATH_SMPP_DECODE = \"/smpp-decode\";\n\nexport const PATH_ENCODING = \"/encoding\";\n\nexport const PATH_ENCODING_GSM = PATH_ENCODING + \"/gsm\";\nexport const PATH_ENCODING_ASCII = PATH_ENCODING + \"/ascii\";\nexport const PATH_ENCODING_LATIN1 = PATH_ENCODING + \"/latin1\";\nexport const PATH_ENCODING_UCS2 = PATH_ENCODING + \"/ucs2\";","import React, {Component} from 'react';\n\nclass HomePage extends Component {\n    render() {\n        return (\n            <div>\n              Главная+++\n            </div>\n        );\n    }\n}\n\nexport default HomePage;","import React, {Component} from 'react';\n\nclass HexDumpPage extends Component {\n    render() {\n        return (\n            <div>\n                hex dump\n            </div>\n        );\n    }\n}\n\nexport default HexDumpPage;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass EncodingsPage extends Component {\n    render() {\n        return (\n            <div>\n                {this.props.encodingName}\n                <Row from={1} to={10} />\n            </div>\n        );\n    }\n}\n\nfunction Row(params) {\n    console.log(arguments);\n\n    return <div>Ok {params.from} to {params.to}</div>;\n}\n\nEncodingsPage.propTypes = {\n    encodingName: PropTypes.string.isRequired,\n};\n\nexport default EncodingsPage;\n\nexport const encodingParameterizedPage = ({match}) => <EncodingsPage encodingName={match.params.encodingName} />;","import React, { Component } from 'react';\nimport './App.css';\nimport Utils from \"./Utils\";\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Menu from \"./components/Menu\";\nimport SmppDecoderPage from \"./pages/SmppDecoderPage\";\nimport * as ROUTES from \"./routes\";\nimport HomePage from \"./pages/HomePage\";\nimport HexDumpPage from \"./pages/HexDumpPage\";\nimport {encodingParameterizedPage} from \"./pages/EncodingsPage\";\nimport TestHexDumpPage from \"./pages/test/TestHexDumpPage\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        var hash = window.location.hash;\n\n        var oldText=\"\";\n\n        if (hash != null && hash.length>1) {\n            oldText = Utils.Text.Hex.cleanup(hash.substr(1));\n        }\n\n        this.state = {\n            text:oldText,\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n    onChange(text) {\n        this.setState({text: text});\n\n        if (text.length <= 2000) {\n            window.location.hash = '#' + text;\n        }\n    }\n    render() {\n        return (\n            <Router basename={`${process.env.PUBLIC_URL}`}>\n                <div className=\"container-fluid h-100\">\n                    <div className=\"row h-100\">\n                        <nav className=\"col-md-2 d-none d-md-block bg-light sidebar\">\n                            <Menu />\n                        </nav>\n\n                        <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4 h-100\">\n                            <Switch>\n                                <Route exact path={ROUTES.PATH_HOME} component={HomePage} />\n                                <Route path={ROUTES.PATH_HEX_DUMP} component={HexDumpPage} />\n                                <Route path={ROUTES.PATH_SMPP_DECODE} component={SmppDecoderPage} />\n\n                                <Route\n                                    path={ROUTES.PATH_ENCODING + \"/:encodingName\"}\n                                    component={encodingParameterizedPage}\n                                />\n\n                                <Route\n                                    path=\"/test/hexdump\"\n                                    component={TestHexDumpPage}\n                                />\n                            </Switch>\n                        </main>\n                    </div>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// Base SMPP HEADER\nexport var SMPP_HEADER = {\n  packetLength: {\n    pattern: \"packetLength:32/integer\",\n    fieldLength: 4,\n    specRef: \"3.2.1\"\n  },\n  commandId: {\n    pattern: \"commandId:32/integer\",\n    interpret: function interpret(v) {\n      for (var cmdId in SMPP_COMMANDS_DESCRIPTIONS) {\n        if (SMPP_COMMANDS_DESCRIPTIONS[cmdId].commandId == v) {\n          return cmdId;\n        }\n      }\n\n      return \"unknown command id\";\n    },\n    fieldLength: 4,\n    specRef: \"3.2.1\"\n  },\n  status: {\n    pattern: \"status:32/integer\",\n    interpret: function interpret(v) {\n      // https://github.com/twitter-archive/cloudhopper-smpp/blob/master/src/main/java/com/cloudhopper/smpp/SmppConstants.java#L355\n      return \"OK\";\n    },\n    fieldLength: 4,\n    specRef: \"3.2.1\"\n  },\n  sequenceNumber: {\n    pattern: \"sequenceNumber:32/integer\",\n    fieldLength: 4,\n    specRef: \"3.2.1\"\n  }\n};\nexport var COMMAND_ID_GENERIC_NACK = \"GENERIC_NACK\";\nexport var COMMAND_ID_BIND_RECEIVER = \"BIND_RECEIVER\";\nexport var COMMAND_ID_BIND_RECEIVER_RESP = \"BIND_RECEIVER_RESP\";\nexport var COMMAND_ID_BIND_TRANSMITTER = \"BIND_TRANSMITTER\";\nexport var COMMAND_ID_BIND_TRANSMITTER_RESP = \"BIND_TRANSMITTER_RESP\";\nexport var COMMAND_ID_QUERY_SM = \"QUERY_SM\";\nexport var COMMAND_ID_QUERY_SM_RESP = \"QUERY_SM_RESP\";\nexport var COMMAND_ID_SUBMIT_SM = \"SUBMIT_SM\";\nexport var COMMAND_ID_SUBMIT_SM_RESP = \"SUBMIT_SM_RESP\";\nexport var COMMAND_ID_DELIVER_SM = \"DELIVER_SM\";\nexport var COMMAND_ID_DELIVER_SM_RESP = \"DELIVER_SM_RESP\";\nexport var COMMAND_ID_UNBIND = \"UNBIND\";\nexport var COMMAND_ID_UNBIND_RESP = \"UNBIND_RESP\";\nexport var COMMAND_ID_REPLACE_SM = \"REPLACE_SM\";\nexport var COMMAND_ID_REPLACE_SM_RESP = \"REPLACE_SM_RESP\";\nexport var COMMAND_ID_CANCEL_SM = \"CANCEL_SM\";\nexport var COMMAND_ID_CANCEL_SM_RESP = \"CANCEL_SM_RESP\";\nexport var COMMAND_ID_BIND_TRANSCEIVER = \"BIND_TRANSCEIVER\";\nexport var COMMAND_ID_BIND_TRANSCEIVER_RESP = \"BIND_TRANSCEIVER_RESP\";\nexport var COMMAND_ID_OUTBIND = \"OUTBIND\";\nexport var COMMAND_ID_ENQUIRE_LINK = \"ENQUIRE_LINK\";\nexport var COMMAND_ID_ENQUIRE_LINK_RESP = \"ENQUIRE_LINK_RESP\";\nexport var COMMAND_ID_ALERT_NOTIFICATION = \"ALERT_NOTIFICATION\";\nexport var COMMAND_ID_DATA_SM = \"DATA_SM\";\nexport var COMMAND_ID_DATA_SM_RESP = \"DATA_SM_RESP\";\nexport var SMPP_COMMAND_IDS = [COMMAND_ID_GENERIC_NACK, COMMAND_ID_BIND_RECEIVER, COMMAND_ID_BIND_RECEIVER_RESP, COMMAND_ID_BIND_TRANSMITTER, COMMAND_ID_BIND_TRANSMITTER_RESP, COMMAND_ID_QUERY_SM, COMMAND_ID_QUERY_SM_RESP, COMMAND_ID_SUBMIT_SM, COMMAND_ID_SUBMIT_SM_RESP, COMMAND_ID_DELIVER_SM, COMMAND_ID_DELIVER_SM_RESP, COMMAND_ID_UNBIND, COMMAND_ID_UNBIND_RESP, COMMAND_ID_REPLACE_SM, COMMAND_ID_REPLACE_SM_RESP, COMMAND_ID_CANCEL_SM, COMMAND_ID_CANCEL_SM_RESP, COMMAND_ID_BIND_TRANSCEIVER, COMMAND_ID_BIND_TRANSCEIVER_RESP, COMMAND_ID_OUTBIND, COMMAND_ID_ENQUIRE_LINK, COMMAND_ID_ENQUIRE_LINK_RESP, COMMAND_ID_ALERT_NOTIFICATION, COMMAND_ID_DATA_SM, COMMAND_ID_DATA_SM_RESP];\nexport var SMPP_COMMANDS_DESCRIPTIONS = {\n  \"GENERIC_NACK\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x80000000,\n    \"pattern\": null\n  },\n  \"BIND_RECEIVER\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000001,\n    \"pattern\": {\n      systemId: \"systemId:16/string-z\",\n      password: \"password:9/string-z\",\n      systemType: \"systemType:13/string-z\",\n      interfaceVersion: \"interfaceVersion:8/integer\",\n      addrTon: \"addrTon:8/integer\",\n      addrNpi: \"addrNpi:8/integer\",\n      addressRange: \"addressRange:41/string-z\"\n    }\n  },\n  \"BIND_RECEIVER_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000001,\n    \"pattern\": {\n      systemId: \"systemId:16/string-z\",\n      tlvs: \"tlvs/binary\"\n    }\n  },\n  \"BIND_TRANSMITTER\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000002,\n    \"pattern\": {\n      systemId: \"systemId:16/string-z\",\n      password: \"password:9/string-z\",\n      systemType: \"systemType:13/string-z\",\n      interfaceVersion: \"interfaceVersion:8/integer\",\n      addrTon: \"addrTon:8/integer\",\n      addrNpi: \"addrNpi:8/integer\",\n      addressRange: \"addressRange:41/string-z\"\n    }\n  },\n  \"BIND_TRANSMITTER_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000002,\n    \"pattern\": {\n      systemId: \"systemId:16/string-z\",\n      tlvs: \"tlvs/binary\"\n    }\n  },\n  \"QUERY_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000003,\n    \"pattern\": {\n      messageId: \"messageId:65/string-z\",\n      sourceAddrTon: \"sourceAddrTon:8/integer\",\n      sourceAddrNpi: \"sourceAddrNpi:8/integer\",\n      sourceAddr: \"sourceAddr:21/string-z\"\n    }\n  },\n  \"QUERY_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000003,\n    \"pattern\": {\n      messageId: \"messageId:65/string-z\",\n      finalDate: \"finalDate:18/string-z\",\n      messageState: \"messageState:8/integer\",\n      errorCode: \"errorCode:8/integer\"\n    }\n  },\n  \"SUBMIT_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000004,\n    \"specRef\": \"4.4.1\",\n    \"pattern\": {\n      serviceType: {\n        pattern: \"serviceType:6/string-z\",\n        specRef: \"5.2.11\"\n      },\n      sourceAddrTon: {\n        pattern: \"sourceAddrTon:8/integer\",\n        specRef: \"5.2.5\"\n      },\n      sourceAddrNpi: {\n        pattern: \"sourceAddrNpi:8/integer\",\n        specRef: \"5.2.6\"\n      },\n      sourceAddr: {\n        pattern: \"sourceAddr:21/string-z\",\n        specRef: \"5.2.8\"\n      },\n      destAddrTon: {\n        pattern: \"destAddrTon:8/integer\",\n        specRef: \"5.2.5\"\n      },\n      destAddrNpi: {\n        pattern: \"destAddrNpi:8/integer\",\n        specRef: \"5.2.6\"\n      },\n      destinationAddr: {\n        pattern: \"destinationAddr:21/string-z\",\n        specRef: \"5.2.9\"\n      },\n      esmClass: {\n        pattern: \"esmClass:8/integer\",\n        specRef: \"5.2.12\"\n      },\n      protocolId: {\n        pattern: \"protocolId:8/integer\",\n        specRef: \"5.2.13\"\n      },\n      priorityFlag: {\n        pattern: \"priorityFlag:8/integer\",\n        specRef: \"5.2.14\"\n      },\n      scheduleDeliveryTime: {\n        pattern: \"scheduleDeliveryTime:17/string-z\",\n        specRef: \"5.2.15\"\n      },\n      validityPeriod: {\n        pattern: \"validityPeriod:17/string-z\",\n        specRef: \"5.2.16\"\n      },\n      registeredDelivery: {\n        pattern: \"registeredDelivery:8/integer\",\n        specRef: \"5.2.17\"\n      },\n      replaceIfPresentFlag: {\n        pattern: \"replaceIfPresentFlag:8/integer\",\n        specRef: \"5.2.18\"\n      },\n      dataCoding: {\n        pattern: \"dataCoding:8/integer\",\n        specRef: \"5.2.19\"\n      },\n      smDefaultMsgId: {\n        pattern: \"smDefaultMsgId:8/integer\",\n        specRef: \"5.2.20\"\n      },\n      smLength: {\n        pattern: \"smLength:8/integer\",\n        specRef: \"5.2.21\"\n      },\n      shortMessage: {\n        pattern: \"shortMessage:smLength/binary\",\n        specRef: \"5.2.22\"\n      },\n      tlvs: {\n        pattern: \"tlvs/binary\"\n      }\n    }\n  },\n  \"SUBMIT_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000004,\n    \"specRef\": \"4.4.2\",\n    \"pattern\": [\"messageId:65/string-z\"]\n  },\n  \"DELIVER_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000005,\n    \"pattern\": [\"serviceType:6/string-z\", \"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"destAddrTon:8/integer\", \"destAddrNpi:8/integer\", \"destinationAddr:21/string-z\", \"esmClass:8/integer\", \"protocolId:8/integer\", \"priorityFlag:8/integer\", \"scheduleDeliveryTime:17/string-z\", \"validityPeriod:17/string-z\", \"registeredDelivery:8/integer\", \"replaceIfPresentFlag:8/integer\", \"dataCoding:8/integer\", \"smDefaultMsgId:8/integer\", \"smLength:8/integer\", \"shortMessage:smLength/binary\", \"tlvs/binary\"]\n  },\n  \"DELIVER_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000005,\n    \"pattern\": [\"messageId:65/string-z\"]\n  },\n  \"UNBIND\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000006,\n    \"pattern\": null\n  },\n  \"UNBIND_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000006,\n    \"pattern\": null\n  },\n  \"REPLACE_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000007,\n    \"pattern\": [\"messageId:65/string-z\", \"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"scheduleDeliveryTime:17/string-z\", \"validityPeriod:17/string-z\", \"registeredDelivery:8/integer\", \"smDefaultMsgId:8/integer\", \"smLength:8/integer\", \"shortMessage:smLength/binary\"]\n  },\n  \"REPLACE_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000007,\n    \"pattern\": null\n  },\n  \"CANCEL_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000008,\n    \"pattern\": [\"serviceType:6/string-z\", \"messageId:65/string-z\", \"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"destAddrTon:8/integer\", \"destAddrNpi:8/integer\", \"destinationAddr:21/string-z\"]\n  },\n  \"CANCEL_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000008,\n    \"pattern\": null\n  },\n  \"BIND_TRANSCEIVER\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000009,\n    \"pattern\": [\"systemId:16/string-z\", \"password:9/string-z\", \"systemType:13/string-z\", \"interfaceVersion:8/integer\", \"addrTon:8/integer\", \"addrNpi:8/integer\", \"addressRange:41/string-z\"]\n  },\n  \"BIND_TRANSCEIVER_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000009,\n    \"pattern\": [\"systemId:16/string-z\", \"tlvs/binary\"]\n  },\n  \"OUTBIND\": {\n    \"mtid\": \"request\",\n    \"example\": \"00000000B000000000000000148656c6c6f0031323300\",\n    \"commandId\": \"0000000B\",\n    \"pattern\": [\"systemId:16/string-z\", \"password:9/string-z\"]\n  },\n  \"ENQUIRE_LINK\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000015,\n    \"pattern\": null\n  },\n  \"ENQUIRE_LINK_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000015,\n    \"pattern\": null\n  },\n  \"ALERT_NOTIFICATION\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000102,\n    \"pattern\": [\"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"esmeAddrTon:8/integer\", \"esmeAddrNpi:8/integer\", \"esmeAddr:65/string-z\", \"tlvs/binary\"]\n  },\n  \"DATA_SM\": {\n    \"mtid\": \"request\",\n    \"commandId\": 0x00000103,\n    \"pattern\": [\"serviceType:6/string-z\", \"sourceAddrTon:8/integer\", \"sourceAddrNpi:8/integer\", \"sourceAddr:21/string-z\", \"destAddrTon:8/integer\", \"destAddrNpi:8/integer\", \"destinationAddr:21/string-z\", \"esmClass:8/integer\", \"registeredDelivery:8/integer\", \"dataCoding:8/integer\", \"tlvs/binary\"]\n  },\n  \"DATA_SM_RESP\": {\n    \"mtid\": \"response\",\n    \"commandId\": 0x80000103,\n    \"pattern\": [\"messageId:65/string-z\", \"tlvs/binary\"]\n  }\n};","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar DissectingContext =\n/*#__PURE__*/\nfunction () {\n  function DissectingContext(initialBuffer) {\n    _classCallCheck(this, DissectingContext);\n\n    this.offset = 0;\n    this.processingBuffer = initialBuffer;\n    this.processedVariables = {};\n    this.initialBuffer = initialBuffer;\n    this.previoudBuffer = initialBuffer;\n    this.initialBufferLength = initialBuffer.byteLength;\n    this.boundVars = {};\n  }\n\n  _createClass(DissectingContext, [{\n    key: \"checkLength\",\n    value: function checkLength(fieldDescription) {\n      if (typeof fieldDescription.fieldLength !== \"undefined\") {\n        if (this.offset + fieldDescription.fieldLength > this.initialBufferLength) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"pushBuffer\",\n    value: function pushBuffer(newBuffer) {\n      this.previoudBuffer = this.processingBuffer;\n      this.processingBuffer = newBuffer;\n      var currentOffset = this.offset;\n      var newLength = this.processingBuffer.byteLength;\n      var fieldLength = this.initialBufferLength - currentOffset - newLength;\n      this.offset += fieldLength;\n      return {\n        offset: currentOffset,\n        length: fieldLength,\n        buffer: this.previoudBuffer.slice(0, fieldLength)\n      };\n    }\n  }]);\n\n  return DissectingContext;\n}();\n\nexport default DissectingContext;","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Notifications =\n/*#__PURE__*/\nfunction () {\n  function Notifications() {\n    _classCallCheck(this, Notifications);\n\n    this.messages = [];\n  }\n\n  _createClass(Notifications, [{\n    key: \"addNotification\",\n    value: function addNotification(tag, body, offset) {\n      this.messages.push({\n        tag: tag,\n        body: body,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this.messages;\n    }\n  }, {\n    key: \"getByTagName\",\n    value: function getByTagName(tag) {\n      return this.messages.filter(function (item) {\n        return item.tag === tag;\n      });\n    }\n  }]);\n\n  return Notifications;\n}();\n\nexport default Notifications;","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport Notifications from \"./Notifications\";\n\nvar DissectingResult = function DissectingResult() {\n  _classCallCheck(this, DissectingResult);\n\n  this.data = [];\n  this.notifications = new Notifications();\n};\n\nexport default DissectingResult;","import _classCallCheck from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wiz/TRASH/utils/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport bitsyntax from 'ut-bitsyntax';\nimport * as CONSTANTS from './constants';\nimport { SMPP_HEADER } from \"./constants\";\nimport DissectingContext from \"./DissectingContext\";\nimport Notifications from \"./Notifications\";\nimport DissectingResult from \"./DissectingResult\";\nimport { SMPP_COMMANDS_DESCRIPTIONS } from \"./constants\";\n\nvar SmppDecoder =\n/*#__PURE__*/\nfunction () {\n  function SmppDecoder() {\n    _classCallCheck(this, SmppDecoder);\n\n    this.logLevel = \"none\";\n  }\n\n  _createClass(SmppDecoder, [{\n    key: \"trace\",\n    value: function trace(logLevel) {\n      if (this.logLevel !== \"none\") {\n        for (var _len = arguments.length, msg = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          msg[_key - 1] = arguments[_key];\n        }\n\n        console.log(msg);\n      }\n    }\n  }, {\n    key: \"useLogLevel\",\n    value: function useLogLevel(level) {\n      this.logLevel = level;\n      return this;\n    }\n    /**\n     *\n     * @param buf\n     * @param ignoreHeader\n     * @param defaultCommandId\n     * @returns {boolean|*|boolean|*}\n     */\n\n  }, {\n    key: \"decode\",\n    value: function decode(buf) {\n      var ignoreHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var defaultCommandId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"SUBMIT_SM\";\n      this.trace(\"trace\", \"start decoding\", buf, ignoreHeader, defaultCommandId);\n      var ctx = new DissectingContext(buf);\n      var result = new DissectingResult(); // Do not parse header\n\n      if (!ignoreHeader) {\n        for (var fieldName in SMPP_HEADER) {\n          var fieldDescription = SMPP_HEADER[fieldName];\n\n          try {\n            this.decodeField(fieldName, fieldDescription, ctx, result);\n          } catch (e) {\n            break;\n          }\n        }\n      }\n\n      var bodyFieldDescription = SMPP_COMMANDS_DESCRIPTIONS[defaultCommandId];\n\n      for (var _fieldName in bodyFieldDescription.pattern) {\n        if (_fieldName === \"tlvs\") {// parse TLVs\n        } else {\n          var _fieldDescription = bodyFieldDescription.pattern[_fieldName];\n          this.trace(\"trace\", \"Field description\", _fieldDescription);\n\n          try {\n            this.decodeField(_fieldName, _fieldDescription, ctx, result);\n          } catch (e) {\n            break;\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"decodeField\",\n    value: function decodeField(fieldName, fieldDescription, ctx, result) {\n      if (!ctx.checkLength(fieldDescription)) {\n        result.notifications.addNotification(fieldName, \"Not enough data in buffer. Need: \".concat(fieldDescription.fieldLength, \" but have:\").concat(ctx.initialBufferLength - ctx.offset), ctx.offset); // Todo: тут что-то сделать надо\n\n        throw new Error(\"Not enough data n  buffer\");\n      }\n\n      var matchedObject = bitsyntax.match(this.getPattern(fieldDescription), ctx.processingBuffer, ctx.boundVars);\n\n      if (!matchedObject) {\n        result.notifications.addNotification(fieldName, \"Error on dissecting field:\".concat(fieldName), ctx.offset); // Todo: тут что-то сделать надо\n\n        throw new Error(\"Not enough data n  buffer\");\n      } else {\n        var obj = ctx.pushBuffer(matchedObject.rest);\n        obj.name = fieldName;\n        obj.value = this.interpretValue(fieldName, matchedObject[fieldName], fieldDescription);\n\n        if (typeof fieldDescription.specRef !== \"undefined\") {\n          obj.specRef = fieldDescription.specRef;\n        }\n\n        ctx.boundVars[fieldName] = obj.value.raw;\n        result.data.push(obj);\n      }\n    }\n  }, {\n    key: \"interpretValue\",\n    value: function interpretValue(field, value, header) {\n      var interpreted = value;\n\n      if (typeof header.interpret !== 'undefined') {\n        interpreted = header.interpret(value);\n      }\n\n      return {\n        interpreted: interpreted,\n        raw: value\n      };\n    }\n  }, {\n    key: \"getPattern\",\n    value: function getPattern(descr) {\n      if (typeof descr.pattern !== \"undefined\") {\n        return this.compilePattern(descr.pattern);\n      } else {\n        return this.compilePattern(descr);\n      }\n    }\n  }, {\n    key: \"compilePattern\",\n    value: function compilePattern(ptr) {\n      if (typeof ptr === \"string\") {\n        return bitsyntax.parse(ptr + \",rest/binary\");\n      } else {\n        return ptr;\n      }\n    }\n  }]);\n\n  return SmppDecoder;\n}();\n\nexport default SmppDecoder;"],"sourceRoot":""}